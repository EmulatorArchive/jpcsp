/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceI2c_driver implements HLEModule {
	@Override
	public String getName() { return "sceI2c_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceI2cInitFunction, 0x20ADF12A);
			
			mm.addFunction(sceI2cEndFunction, 0x4809D85F);
			
			mm.addFunction(sceI2cSuspendFunction, 0x21A8282C);
			
			mm.addFunction(sceI2cResumeFunction, 0xB952BA65);
			
			mm.addFunction(sceI2cSetDebugHandlersFunction, 0xDB6C4F9B);
			
			mm.addFunction(sceI2cSetPollingModeFunction, 0x0397408B);
			
			mm.addFunction(sceI2cResetFunction, 0x17B0DA59);
			
			mm.addFunction(sceI2cSetClockFunction, 0xD6E9836A);
			
			mm.addFunction(sceI2cMasterTransmitFunction, 0xE9463B99);
			
			mm.addFunction(sceI2cMasterReceiveFunction, 0xF87D1ED6);
			
			mm.addFunction(sceI2cMasterTransmitReceiveFunction, 0x6536B1B6);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceI2cInitFunction);
			
			mm.removeFunction(sceI2cEndFunction);
			
			mm.removeFunction(sceI2cSuspendFunction);
			
			mm.removeFunction(sceI2cResumeFunction);
			
			mm.removeFunction(sceI2cSetDebugHandlersFunction);
			
			mm.removeFunction(sceI2cSetPollingModeFunction);
			
			mm.removeFunction(sceI2cResetFunction);
			
			mm.removeFunction(sceI2cSetClockFunction);
			
			mm.removeFunction(sceI2cMasterTransmitFunction);
			
			mm.removeFunction(sceI2cMasterReceiveFunction);
			
			mm.removeFunction(sceI2cMasterTransmitReceiveFunction);
			
		}
	}
	
	
	public void sceI2cInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cInit [0x20ADF12A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cEnd [0x4809D85F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cSuspend [0x21A8282C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cResume [0xB952BA65]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cSetDebugHandlers(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cSetDebugHandlers [0xDB6C4F9B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cSetPollingMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cSetPollingMode [0x0397408B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cReset(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cReset [0x17B0DA59]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cSetClock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cSetClock [0xD6E9836A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cMasterTransmit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cMasterTransmit [0xE9463B99]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cMasterReceive(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cMasterReceive [0xF87D1ED6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceI2cMasterTransmitReceive(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceI2cMasterTransmitReceive [0x6536B1B6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceI2cInitFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cInit") {
		@Override
		public final void execute(Processor processor) {
			sceI2cInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cEndFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cEnd") {
		@Override
		public final void execute(Processor processor) {
			sceI2cEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cSuspendFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceI2cSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cResumeFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cResume") {
		@Override
		public final void execute(Processor processor) {
			sceI2cResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cSetDebugHandlersFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cSetDebugHandlers") {
		@Override
		public final void execute(Processor processor) {
			sceI2cSetDebugHandlers(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cSetDebugHandlersFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cSetPollingModeFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cSetPollingMode") {
		@Override
		public final void execute(Processor processor) {
			sceI2cSetPollingMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cSetPollingModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cResetFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cReset") {
		@Override
		public final void execute(Processor processor) {
			sceI2cReset(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cResetFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cSetClockFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cSetClock") {
		@Override
		public final void execute(Processor processor) {
			sceI2cSetClock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cSetClockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cMasterTransmitFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cMasterTransmit") {
		@Override
		public final void execute(Processor processor) {
			sceI2cMasterTransmit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cMasterTransmitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cMasterReceiveFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cMasterReceive") {
		@Override
		public final void execute(Processor processor) {
			sceI2cMasterReceive(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cMasterReceiveFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceI2cMasterTransmitReceiveFunction = new HLEModuleFunction("sceI2c_driver", "sceI2cMasterTransmitReceive") {
		@Override
		public final void execute(Processor processor) {
			sceI2cMasterTransmitReceive(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceI2c_driver.sceI2cMasterTransmitReceiveFunction.execute(processor);";
		}
	};
    
};
