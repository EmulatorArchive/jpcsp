/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNand_driver implements HLEModule {
	@Override
	public String getName() { return "sceNand_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceNandInitFunction, 0xA513BB12);
			
			mm.addFunction(sceNandEndFunction, 0xD305870E);
			
			mm.addFunction(sceNandSuspendFunction, 0x73A68408);
			
			mm.addFunction(sceNandResumeFunction, 0x0F9BBBBD);
			
			mm.addFunction(sceNandSetWriteProtectFunction, 0x84EE5D76);
			
			mm.addFunction(sceNandLockFunction, 0xAE4438C7);
			
			mm.addFunction(sceNandUnlockFunction, 0x41FFA822);
			
			mm.addFunction(sceNandReadStatusFunction, 0xE41A11DE);
			
			mm.addFunction(sceNandResetFunction, 0x7AF7B77A);
			
			mm.addFunction(sceNandReadIdFunction, 0xFCDF7610);
			
			mm.addFunction(sceNandReadPagesFunction, 0x89BDCA08);
			
			mm.addFunction(sceNandWritePagesFunction, 0x8AF0AB9F);
			
			mm.addFunction(sceNandReadPagesRawExtraFunction, 0xE05AE88D);
			
			mm.addFunction(sceNandWritePagesRawExtraFunction, 0x8932166A);
			
			mm.addFunction(sceNandReadPagesRawAllFunction, 0xC478C1DE);
			
			mm.addFunction(sceNandWritePagesRawAllFunction, 0xBADD5D46);
			
			mm.addFunction(sceNandReadAccessFunction, 0x766756EF);
			
			mm.addFunction(sceNandWriteAccessFunction, 0x0ADC8686);
			
			mm.addFunction(sceNandEraseBlockFunction, 0xEB0A0022);
			
			mm.addFunction(sceNandReadExtraOnlyFunction, 0x5182C394);
			
			mm.addFunction(sceNandCalcEccFunction, 0xEF55F193);
			
			mm.addFunction(sceNandVerifyEccFunction, 0x18B78661);
			
			mm.addFunction(sceNandCollectEccFunction, 0xB795D2ED);
			
			mm.addFunction(sceNandDetectChipFunction, 0xD897C343);
			
			mm.addFunction(sceNandGetPageSizeFunction, 0xCE9843E6);
			
			mm.addFunction(sceNandGetPagesPerBlockFunction, 0xB07C41D4);
			
			mm.addFunction(sceNandGetTotalBlocksFunction, 0xC1376222);
			
			mm.addFunction(sceNandWriteBlockFunction, 0x716CD2B2);
			
			mm.addFunction(sceNandWriteBlockWithVerifyFunction, 0xB2B021E5);
			
			mm.addFunction(sceNandReadBlockWithRetryFunction, 0xC32EA051);
			
			mm.addFunction(sceNandVerifyBlockWithRetryFunction, 0x5AC02755);
			
			mm.addFunction(sceNandEraseBlockWithRetryFunction, 0x8933B2E0);
			
			mm.addFunction(sceNandIsBadBlockFunction, 0x01F09203);
			
			mm.addFunction(sceNandDoMarkAsBadBlockFunction, 0xC29DA136);
			
			mm.addFunction(sceNandDumpWearBBMSizeFunction, 0x3F76BC21);
			
			mm.addFunction(sceNandCountChipMakersBBMFunction, 0xEBA0E6C6);
			
			mm.addFunction(sceNandDetectChipMakersBBMFunction, 0x2FF6081B);
			
			mm.addFunction(sceNandEraseAllBlockFunction, 0x2674CFFE);
			
			mm.addFunction(sceNandTestBlockFunction, 0x9B2AC433);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceNandInitFunction);
			
			mm.removeFunction(sceNandEndFunction);
			
			mm.removeFunction(sceNandSuspendFunction);
			
			mm.removeFunction(sceNandResumeFunction);
			
			mm.removeFunction(sceNandSetWriteProtectFunction);
			
			mm.removeFunction(sceNandLockFunction);
			
			mm.removeFunction(sceNandUnlockFunction);
			
			mm.removeFunction(sceNandReadStatusFunction);
			
			mm.removeFunction(sceNandResetFunction);
			
			mm.removeFunction(sceNandReadIdFunction);
			
			mm.removeFunction(sceNandReadPagesFunction);
			
			mm.removeFunction(sceNandWritePagesFunction);
			
			mm.removeFunction(sceNandReadPagesRawExtraFunction);
			
			mm.removeFunction(sceNandWritePagesRawExtraFunction);
			
			mm.removeFunction(sceNandReadPagesRawAllFunction);
			
			mm.removeFunction(sceNandWritePagesRawAllFunction);
			
			mm.removeFunction(sceNandReadAccessFunction);
			
			mm.removeFunction(sceNandWriteAccessFunction);
			
			mm.removeFunction(sceNandEraseBlockFunction);
			
			mm.removeFunction(sceNandReadExtraOnlyFunction);
			
			mm.removeFunction(sceNandCalcEccFunction);
			
			mm.removeFunction(sceNandVerifyEccFunction);
			
			mm.removeFunction(sceNandCollectEccFunction);
			
			mm.removeFunction(sceNandDetectChipFunction);
			
			mm.removeFunction(sceNandGetPageSizeFunction);
			
			mm.removeFunction(sceNandGetPagesPerBlockFunction);
			
			mm.removeFunction(sceNandGetTotalBlocksFunction);
			
			mm.removeFunction(sceNandWriteBlockFunction);
			
			mm.removeFunction(sceNandWriteBlockWithVerifyFunction);
			
			mm.removeFunction(sceNandReadBlockWithRetryFunction);
			
			mm.removeFunction(sceNandVerifyBlockWithRetryFunction);
			
			mm.removeFunction(sceNandEraseBlockWithRetryFunction);
			
			mm.removeFunction(sceNandIsBadBlockFunction);
			
			mm.removeFunction(sceNandDoMarkAsBadBlockFunction);
			
			mm.removeFunction(sceNandDumpWearBBMSizeFunction);
			
			mm.removeFunction(sceNandCountChipMakersBBMFunction);
			
			mm.removeFunction(sceNandDetectChipMakersBBMFunction);
			
			mm.removeFunction(sceNandEraseAllBlockFunction);
			
			mm.removeFunction(sceNandTestBlockFunction);
			
		}
	}
	
	
	public void sceNandInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandInit [0xA513BB12]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandEnd [0xD305870E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandSuspend [0x73A68408]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandResume [0x0F9BBBBD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandSetWriteProtect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandSetWriteProtect [0x84EE5D76]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandLock [0xAE4438C7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandUnlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandUnlock [0x41FFA822]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadStatus(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadStatus [0xE41A11DE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReset(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReset [0x7AF7B77A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadId(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadId [0xFCDF7610]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadPages(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadPages [0x89BDCA08]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandWritePages(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandWritePages [0x8AF0AB9F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadPagesRawExtra(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadPagesRawExtra [0xE05AE88D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandWritePagesRawExtra(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandWritePagesRawExtra [0x8932166A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadPagesRawAll(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadPagesRawAll [0xC478C1DE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandWritePagesRawAll(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandWritePagesRawAll [0xBADD5D46]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadAccess(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadAccess [0x766756EF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandWriteAccess(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandWriteAccess [0x0ADC8686]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandEraseBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandEraseBlock [0xEB0A0022]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadExtraOnly(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadExtraOnly [0x5182C394]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandCalcEcc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandCalcEcc [0xEF55F193]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandVerifyEcc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandVerifyEcc [0x18B78661]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandCollectEcc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandCollectEcc [0xB795D2ED]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandDetectChip(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandDetectChip [0xD897C343]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandGetPageSize(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandGetPageSize [0xCE9843E6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandGetPagesPerBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandGetPagesPerBlock [0xB07C41D4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandGetTotalBlocks(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandGetTotalBlocks [0xC1376222]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandWriteBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandWriteBlock [0x716CD2B2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandWriteBlockWithVerify(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandWriteBlockWithVerify [0xB2B021E5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandReadBlockWithRetry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandReadBlockWithRetry [0xC32EA051]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandVerifyBlockWithRetry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandVerifyBlockWithRetry [0x5AC02755]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandEraseBlockWithRetry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandEraseBlockWithRetry [0x8933B2E0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandIsBadBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandIsBadBlock [0x01F09203]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandDoMarkAsBadBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandDoMarkAsBadBlock [0xC29DA136]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandDumpWearBBMSize(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandDumpWearBBMSize [0x3F76BC21]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandCountChipMakersBBM(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandCountChipMakersBBM [0xEBA0E6C6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandDetectChipMakersBBM(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandDetectChipMakersBBM [0x2FF6081B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandEraseAllBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandEraseAllBlock [0x2674CFFE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNandTestBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNandTestBlock [0x9B2AC433]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNandInitFunction = new HLEModuleFunction("sceNand_driver", "sceNandInit") {
		@Override
		public final void execute(Processor processor) {
			sceNandInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandEndFunction = new HLEModuleFunction("sceNand_driver", "sceNandEnd") {
		@Override
		public final void execute(Processor processor) {
			sceNandEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandSuspendFunction = new HLEModuleFunction("sceNand_driver", "sceNandSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceNandSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandResumeFunction = new HLEModuleFunction("sceNand_driver", "sceNandResume") {
		@Override
		public final void execute(Processor processor) {
			sceNandResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandSetWriteProtectFunction = new HLEModuleFunction("sceNand_driver", "sceNandSetWriteProtect") {
		@Override
		public final void execute(Processor processor) {
			sceNandSetWriteProtect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandSetWriteProtectFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandLockFunction = new HLEModuleFunction("sceNand_driver", "sceNandLock") {
		@Override
		public final void execute(Processor processor) {
			sceNandLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandLockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandUnlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandUnlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandUnlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandUnlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadStatusFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadStatus") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadStatus(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadStatusFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandResetFunction = new HLEModuleFunction("sceNand_driver", "sceNandReset") {
		@Override
		public final void execute(Processor processor) {
			sceNandReset(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandResetFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadIdFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadId") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadId(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadIdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadPagesFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadPages") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadPages(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadPagesFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandWritePagesFunction = new HLEModuleFunction("sceNand_driver", "sceNandWritePages") {
		@Override
		public final void execute(Processor processor) {
			sceNandWritePages(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandWritePagesFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadPagesRawExtraFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadPagesRawExtra") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadPagesRawExtra(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadPagesRawExtraFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandWritePagesRawExtraFunction = new HLEModuleFunction("sceNand_driver", "sceNandWritePagesRawExtra") {
		@Override
		public final void execute(Processor processor) {
			sceNandWritePagesRawExtra(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandWritePagesRawExtraFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadPagesRawAllFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadPagesRawAll") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadPagesRawAll(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadPagesRawAllFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandWritePagesRawAllFunction = new HLEModuleFunction("sceNand_driver", "sceNandWritePagesRawAll") {
		@Override
		public final void execute(Processor processor) {
			sceNandWritePagesRawAll(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandWritePagesRawAllFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadAccessFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadAccess") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadAccess(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadAccessFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandWriteAccessFunction = new HLEModuleFunction("sceNand_driver", "sceNandWriteAccess") {
		@Override
		public final void execute(Processor processor) {
			sceNandWriteAccess(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandWriteAccessFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandEraseBlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandEraseBlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandEraseBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandEraseBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadExtraOnlyFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadExtraOnly") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadExtraOnly(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadExtraOnlyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandCalcEccFunction = new HLEModuleFunction("sceNand_driver", "sceNandCalcEcc") {
		@Override
		public final void execute(Processor processor) {
			sceNandCalcEcc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandCalcEccFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandVerifyEccFunction = new HLEModuleFunction("sceNand_driver", "sceNandVerifyEcc") {
		@Override
		public final void execute(Processor processor) {
			sceNandVerifyEcc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandVerifyEccFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandCollectEccFunction = new HLEModuleFunction("sceNand_driver", "sceNandCollectEcc") {
		@Override
		public final void execute(Processor processor) {
			sceNandCollectEcc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandCollectEccFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandDetectChipFunction = new HLEModuleFunction("sceNand_driver", "sceNandDetectChip") {
		@Override
		public final void execute(Processor processor) {
			sceNandDetectChip(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandDetectChipFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandGetPageSizeFunction = new HLEModuleFunction("sceNand_driver", "sceNandGetPageSize") {
		@Override
		public final void execute(Processor processor) {
			sceNandGetPageSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandGetPageSizeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandGetPagesPerBlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandGetPagesPerBlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandGetPagesPerBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandGetPagesPerBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandGetTotalBlocksFunction = new HLEModuleFunction("sceNand_driver", "sceNandGetTotalBlocks") {
		@Override
		public final void execute(Processor processor) {
			sceNandGetTotalBlocks(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandGetTotalBlocksFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandWriteBlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandWriteBlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandWriteBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandWriteBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandWriteBlockWithVerifyFunction = new HLEModuleFunction("sceNand_driver", "sceNandWriteBlockWithVerify") {
		@Override
		public final void execute(Processor processor) {
			sceNandWriteBlockWithVerify(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandWriteBlockWithVerifyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandReadBlockWithRetryFunction = new HLEModuleFunction("sceNand_driver", "sceNandReadBlockWithRetry") {
		@Override
		public final void execute(Processor processor) {
			sceNandReadBlockWithRetry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandReadBlockWithRetryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandVerifyBlockWithRetryFunction = new HLEModuleFunction("sceNand_driver", "sceNandVerifyBlockWithRetry") {
		@Override
		public final void execute(Processor processor) {
			sceNandVerifyBlockWithRetry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandVerifyBlockWithRetryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandEraseBlockWithRetryFunction = new HLEModuleFunction("sceNand_driver", "sceNandEraseBlockWithRetry") {
		@Override
		public final void execute(Processor processor) {
			sceNandEraseBlockWithRetry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandEraseBlockWithRetryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandIsBadBlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandIsBadBlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandIsBadBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandIsBadBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandDoMarkAsBadBlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandDoMarkAsBadBlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandDoMarkAsBadBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandDoMarkAsBadBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandDumpWearBBMSizeFunction = new HLEModuleFunction("sceNand_driver", "sceNandDumpWearBBMSize") {
		@Override
		public final void execute(Processor processor) {
			sceNandDumpWearBBMSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandDumpWearBBMSizeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandCountChipMakersBBMFunction = new HLEModuleFunction("sceNand_driver", "sceNandCountChipMakersBBM") {
		@Override
		public final void execute(Processor processor) {
			sceNandCountChipMakersBBM(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandCountChipMakersBBMFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandDetectChipMakersBBMFunction = new HLEModuleFunction("sceNand_driver", "sceNandDetectChipMakersBBM") {
		@Override
		public final void execute(Processor processor) {
			sceNandDetectChipMakersBBM(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandDetectChipMakersBBMFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandEraseAllBlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandEraseAllBlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandEraseAllBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandEraseAllBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNandTestBlockFunction = new HLEModuleFunction("sceNand_driver", "sceNandTestBlock") {
		@Override
		public final void execute(Processor processor) {
			sceNandTestBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNand_driver.sceNandTestBlockFunction.execute(processor);";
		}
	};
    
};
