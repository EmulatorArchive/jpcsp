/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceDmacplus_driver implements HLEModule {
	@Override
	public String getName() { return "sceDmacplus_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceDmacplusInitFunction, 0xDF32F547);
			
			mm.addFunction(sceDmacplusEndFunction, 0xE6219C61);
			
			mm.addFunction(sceDmacplusQuerySuspendFunction, 0xC748491D);
			
			mm.addFunction(sceDmacplusSuspendFunction, 0x853C5EC6);
			
			mm.addFunction(sceDmacplusResumeFunction, 0xD49A5922);
			
			mm.addFunction(sceDmacplusEnableIntrFunction, 0xA7B05225);
			
			mm.addFunction(sceDmacplusDisableIntrFunction, 0xBF939272);
			
			mm.addFunction(sceDmacplusQueryIntrFunction, 0x6AA3D654);
			
			mm.addFunction(sceDmacplusAcquireIntrFunction, 0x0DA570C1);
			
			mm.addFunction(sceDmacplusLcdcInitFunction, 0xFE3F3228);
			
			mm.addFunction(sceDmacplusLcdcEndFunction, 0xCDB039A7);
			
			mm.addFunction(sceDmacplusLcdcQuerySuspendFunction, 0xC3236D69);
			
			mm.addFunction(sceDmacplusLcdcSuspendFunction, 0xC8336549);
			
			mm.addFunction(sceDmacplusLcdcResumeFunction, 0x42BEB349);
			
			mm.addFunction(sceDmacplusLcdcSetBaseAddrFunction, 0x29B50A82);
			
			mm.addFunction(sceDmacplusLcdcGetBaseAddrFunction, 0x58C380BB);
			
			mm.addFunction(sceDmacplusLcdcSetFormatFunction, 0x8AE579CD);
			
			mm.addFunction(sceDmacplusLcdcGetFormatFunction, 0x241601AE);
			
			mm.addFunction(sceDmacplusLcdcEnableFunction, 0xF8C7C180);
			
			mm.addFunction(sceDmacplusLcdcDisableFunction, 0x576522BC);
			
			mm.addFunction(sceDmacplusAvcInitFunction, 0xBEC10779);
			
			mm.addFunction(sceDmacplusAvcEndFunction, 0x7AAE5443);
			
			mm.addFunction(sceDmacplusAvcQuerySuspendFunction, 0x1E7483D0);
			
			mm.addFunction(sceDmacplusAvcSuspendFunction, 0x168836CF);
			
			mm.addFunction(sceDmacplusAvcResumeFunction, 0x5E32C8AF);
			
			mm.addFunction(sceDmacplus_driver_B2EFA681Function, 0xB2EFA681);
			
			mm.addFunction(sceDmacplus_driver_1D73DDA8Function, 0x1D73DDA8);
			
			mm.addFunction(sceDmacplus_driver_74323807Function, 0x74323807);
			
			mm.addFunction(sceDmacplusAvcSyncFunction, 0x3A98EE05);
			
			mm.addFunction(sceDmacplusSc2MeInitFunction, 0xFD8B15BC);
			
			mm.addFunction(sceDmacplusSc2MeEndFunction, 0xF7DEC189);
			
			mm.addFunction(sceDmacplusSc2MeQuerySuspendFunction, 0xD0464B29);
			
			mm.addFunction(sceDmacplusSc2MeSuspendFunction, 0xFEE3392C);
			
			mm.addFunction(sceDmacplusSc2MeResumeFunction, 0xC5B75E09);
			
			mm.addFunction(sceDmacplusSc2MeNormal16Function, 0x4B980588);
			
			mm.addFunction(sceDmacplusSc2MeLLIFunction, 0x3438DA0B);
			
			mm.addFunction(sceDmacplusSc2MeSyncFunction, 0x58DE4914);
			
			mm.addFunction(sceDmacplusMe2ScInitFunction, 0x1F5A80D0);
			
			mm.addFunction(sceDmacplusMe2ScEndFunction, 0xD1E1567E);
			
			mm.addFunction(sceDmacplusMe2ScQuerySuspendFunction, 0x9393B40D);
			
			mm.addFunction(sceDmacplusMe2ScSuspendFunction, 0x6D4F8BD7);
			
			mm.addFunction(sceDmacplusMe2ScResumeFunction, 0x78A55D62);
			
			mm.addFunction(sceDmacplusMe2ScNormal16Function, 0xBE693828);
			
			mm.addFunction(sceDmacplusMe2ScLLIFunction, 0x2D5940FF);
			
			mm.addFunction(sceDmacplusMe2ScSyncFunction, 0xAB49D2CB);
			
			mm.addFunction(sceDmacplusSc128InitFunction, 0xB6592A56);
			
			mm.addFunction(sceDmacplusSc128EndFunction, 0x4F1B8D26);
			
			mm.addFunction(sceDmacplusSc128QuerySuspendFunction, 0x410ED0DD);
			
			mm.addFunction(sceDmacplusSc128SuspendFunction, 0x3DB353DB);
			
			mm.addFunction(sceDmacplusSc128ResumeFunction, 0x97DCBBBF);
			
			mm.addFunction(sceDmacplusSc128MemcpyFunction, 0xC7D33466);
			
			mm.addFunction(sceDmacplusSc128TryMemcpyFunction, 0x28558DBF);
			
			mm.addFunction(sceDmacplusSc128LLIFunction, 0xFD183BCF);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceDmacplusInitFunction);
			
			mm.removeFunction(sceDmacplusEndFunction);
			
			mm.removeFunction(sceDmacplusQuerySuspendFunction);
			
			mm.removeFunction(sceDmacplusSuspendFunction);
			
			mm.removeFunction(sceDmacplusResumeFunction);
			
			mm.removeFunction(sceDmacplusEnableIntrFunction);
			
			mm.removeFunction(sceDmacplusDisableIntrFunction);
			
			mm.removeFunction(sceDmacplusQueryIntrFunction);
			
			mm.removeFunction(sceDmacplusAcquireIntrFunction);
			
			mm.removeFunction(sceDmacplusLcdcInitFunction);
			
			mm.removeFunction(sceDmacplusLcdcEndFunction);
			
			mm.removeFunction(sceDmacplusLcdcQuerySuspendFunction);
			
			mm.removeFunction(sceDmacplusLcdcSuspendFunction);
			
			mm.removeFunction(sceDmacplusLcdcResumeFunction);
			
			mm.removeFunction(sceDmacplusLcdcSetBaseAddrFunction);
			
			mm.removeFunction(sceDmacplusLcdcGetBaseAddrFunction);
			
			mm.removeFunction(sceDmacplusLcdcSetFormatFunction);
			
			mm.removeFunction(sceDmacplusLcdcGetFormatFunction);
			
			mm.removeFunction(sceDmacplusLcdcEnableFunction);
			
			mm.removeFunction(sceDmacplusLcdcDisableFunction);
			
			mm.removeFunction(sceDmacplusAvcInitFunction);
			
			mm.removeFunction(sceDmacplusAvcEndFunction);
			
			mm.removeFunction(sceDmacplusAvcQuerySuspendFunction);
			
			mm.removeFunction(sceDmacplusAvcSuspendFunction);
			
			mm.removeFunction(sceDmacplusAvcResumeFunction);
			
			mm.removeFunction(sceDmacplus_driver_B2EFA681Function);
			
			mm.removeFunction(sceDmacplus_driver_1D73DDA8Function);
			
			mm.removeFunction(sceDmacplus_driver_74323807Function);
			
			mm.removeFunction(sceDmacplusAvcSyncFunction);
			
			mm.removeFunction(sceDmacplusSc2MeInitFunction);
			
			mm.removeFunction(sceDmacplusSc2MeEndFunction);
			
			mm.removeFunction(sceDmacplusSc2MeQuerySuspendFunction);
			
			mm.removeFunction(sceDmacplusSc2MeSuspendFunction);
			
			mm.removeFunction(sceDmacplusSc2MeResumeFunction);
			
			mm.removeFunction(sceDmacplusSc2MeNormal16Function);
			
			mm.removeFunction(sceDmacplusSc2MeLLIFunction);
			
			mm.removeFunction(sceDmacplusSc2MeSyncFunction);
			
			mm.removeFunction(sceDmacplusMe2ScInitFunction);
			
			mm.removeFunction(sceDmacplusMe2ScEndFunction);
			
			mm.removeFunction(sceDmacplusMe2ScQuerySuspendFunction);
			
			mm.removeFunction(sceDmacplusMe2ScSuspendFunction);
			
			mm.removeFunction(sceDmacplusMe2ScResumeFunction);
			
			mm.removeFunction(sceDmacplusMe2ScNormal16Function);
			
			mm.removeFunction(sceDmacplusMe2ScLLIFunction);
			
			mm.removeFunction(sceDmacplusMe2ScSyncFunction);
			
			mm.removeFunction(sceDmacplusSc128InitFunction);
			
			mm.removeFunction(sceDmacplusSc128EndFunction);
			
			mm.removeFunction(sceDmacplusSc128QuerySuspendFunction);
			
			mm.removeFunction(sceDmacplusSc128SuspendFunction);
			
			mm.removeFunction(sceDmacplusSc128ResumeFunction);
			
			mm.removeFunction(sceDmacplusSc128MemcpyFunction);
			
			mm.removeFunction(sceDmacplusSc128TryMemcpyFunction);
			
			mm.removeFunction(sceDmacplusSc128LLIFunction);
			
		}
	}
	
	
	public void sceDmacplusInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusInit [0xDF32F547]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusEnd [0xE6219C61]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusQuerySuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusQuerySuspend [0xC748491D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSuspend [0x853C5EC6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusResume [0xD49A5922]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusEnableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusEnableIntr [0xA7B05225]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusDisableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusDisableIntr [0xBF939272]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusQueryIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusQueryIntr [0x6AA3D654]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusAcquireIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusAcquireIntr [0x0DA570C1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcInit [0xFE3F3228]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcEnd [0xCDB039A7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcQuerySuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcQuerySuspend [0xC3236D69]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcSuspend [0xC8336549]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcResume [0x42BEB349]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcSetBaseAddr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcSetBaseAddr [0x29B50A82]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcGetBaseAddr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcGetBaseAddr [0x58C380BB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcSetFormat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcSetFormat [0x8AE579CD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcGetFormat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcGetFormat [0x241601AE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcEnable [0xF8C7C180]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusLcdcDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusLcdcDisable [0x576522BC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusAvcInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusAvcInit [0xBEC10779]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusAvcEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusAvcEnd [0x7AAE5443]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusAvcQuerySuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusAvcQuerySuspend [0x1E7483D0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusAvcSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusAvcSuspend [0x168836CF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusAvcResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusAvcResume [0x5E32C8AF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplus_driver_B2EFA681(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplus_driver_B2EFA681 [0xB2EFA681]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplus_driver_1D73DDA8(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplus_driver_1D73DDA8 [0x1D73DDA8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplus_driver_74323807(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplus_driver_74323807 [0x74323807]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusAvcSync(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusAvcSync [0x3A98EE05]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeInit [0xFD8B15BC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeEnd [0xF7DEC189]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeQuerySuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeQuerySuspend [0xD0464B29]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeSuspend [0xFEE3392C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeResume [0xC5B75E09]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeNormal16(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeNormal16 [0x4B980588]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeLLI(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeLLI [0x3438DA0B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc2MeSync(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc2MeSync [0x58DE4914]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScInit [0x1F5A80D0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScEnd [0xD1E1567E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScQuerySuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScQuerySuspend [0x9393B40D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScSuspend [0x6D4F8BD7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScResume [0x78A55D62]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScNormal16(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScNormal16 [0xBE693828]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScLLI(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScLLI [0x2D5940FF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusMe2ScSync(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusMe2ScSync [0xAB49D2CB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128Init(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128Init [0xB6592A56]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128End(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128End [0x4F1B8D26]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128QuerySuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128QuerySuspend [0x410ED0DD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128Suspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128Suspend [0x3DB353DB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128Resume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128Resume [0x97DCBBBF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128Memcpy(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128Memcpy [0xC7D33466]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128TryMemcpy(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128TryMemcpy [0x28558DBF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDmacplusSc128LLI(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDmacplusSc128LLI [0xFD183BCF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceDmacplusInitFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusInit") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusEndFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusEnd") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusQuerySuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusQuerySuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusQuerySuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusQuerySuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusResumeFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusResume") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusEnableIntrFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusEnableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusEnableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusEnableIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusDisableIntrFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusDisableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusDisableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusDisableIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusQueryIntrFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusQueryIntr") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusQueryIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusQueryIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusAcquireIntrFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusAcquireIntr") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusAcquireIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusAcquireIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcInitFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcInit") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcEndFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcEnd") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcQuerySuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcQuerySuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcQuerySuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcQuerySuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcSuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcResumeFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcResume") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcSetBaseAddrFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcSetBaseAddr") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcSetBaseAddr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcSetBaseAddrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcGetBaseAddrFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcGetBaseAddr") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcGetBaseAddr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcGetBaseAddrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcSetFormatFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcSetFormat") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcSetFormat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcSetFormatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcGetFormatFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcGetFormat") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcGetFormat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcGetFormatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcEnableFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcEnable") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcEnableFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusLcdcDisableFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusLcdcDisable") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusLcdcDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusLcdcDisableFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusAvcInitFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusAvcInit") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusAvcInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusAvcInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusAvcEndFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusAvcEnd") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusAvcEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusAvcEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusAvcQuerySuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusAvcQuerySuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusAvcQuerySuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusAvcQuerySuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusAvcSuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusAvcSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusAvcSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusAvcSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusAvcResumeFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusAvcResume") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusAvcResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusAvcResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplus_driver_B2EFA681Function = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplus_driver_B2EFA681") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplus_driver_B2EFA681(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplus_driver_B2EFA681Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplus_driver_1D73DDA8Function = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplus_driver_1D73DDA8") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplus_driver_1D73DDA8(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplus_driver_1D73DDA8Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplus_driver_74323807Function = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplus_driver_74323807") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplus_driver_74323807(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplus_driver_74323807Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusAvcSyncFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusAvcSync") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusAvcSync(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusAvcSyncFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeInitFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeInit") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeEndFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeEnd") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeQuerySuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeQuerySuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeQuerySuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeQuerySuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeSuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeResumeFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeResume") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeNormal16Function = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeNormal16") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeNormal16(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeNormal16Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeLLIFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeLLI") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeLLI(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeLLIFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc2MeSyncFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc2MeSync") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc2MeSync(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc2MeSyncFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScInitFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScInit") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScEndFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScEnd") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScQuerySuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScQuerySuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScQuerySuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScQuerySuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScSuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScResumeFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScResume") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScNormal16Function = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScNormal16") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScNormal16(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScNormal16Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScLLIFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScLLI") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScLLI(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScLLIFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusMe2ScSyncFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusMe2ScSync") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusMe2ScSync(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusMe2ScSyncFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128InitFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128Init") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128Init(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128InitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128EndFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128End") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128End(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128EndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128QuerySuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128QuerySuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128QuerySuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128QuerySuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128SuspendFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128Suspend") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128Suspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128SuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128ResumeFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128Resume") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128Resume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128ResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128MemcpyFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128Memcpy") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128Memcpy(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128MemcpyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128TryMemcpyFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128TryMemcpy") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128TryMemcpy(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128TryMemcpyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDmacplusSc128LLIFunction = new HLEModuleFunction("sceDmacplus_driver", "sceDmacplusSc128LLI") {
		@Override
		public final void execute(Processor processor) {
			sceDmacplusSc128LLI(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDmacplus_driver.sceDmacplusSc128LLIFunction.execute(processor);";
		}
	};
    
};
