/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceClockgen_driver implements HLEModule {
	@Override
	public String getName() { return "sceClockgen_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceClockgenInitFunction, 0x29160F5D);
			mm.addFunction(sceClockgenEndFunction, 0x36F9B49D);
			mm.addFunction(sceClockgenGetRevisionFunction, 0x32C8CA86);
			mm.addFunction(sceClockgenGetRegValueFunction, 0xB9716D48);
			mm.addFunction(sceClockgenAudioClkSetFreqFunction, 0x4EB657D5);
			mm.addFunction(sceClockgenAudioClkEnableFunction, 0x5F8328FD);
			mm.addFunction(sceClockgenAudioClkDisableFunction, 0xB9FE99D1);
			mm.addFunction(sceClockgenLeptonClkEnableFunction, 0x7FF82F6F);
			mm.addFunction(sceClockgenLeptonClkDisableFunction, 0xDBE5F283);
			mm.addFunction(sceClockgen_driver_C9AF3102Function, 0xC9AF3102);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceClockgenInitFunction);
			mm.removeFunction(sceClockgenEndFunction);
			mm.removeFunction(sceClockgenGetRevisionFunction);
			mm.removeFunction(sceClockgenGetRegValueFunction);
			mm.removeFunction(sceClockgenAudioClkSetFreqFunction);
			mm.removeFunction(sceClockgenAudioClkEnableFunction);
			mm.removeFunction(sceClockgenAudioClkDisableFunction);
			mm.removeFunction(sceClockgenLeptonClkEnableFunction);
			mm.removeFunction(sceClockgenLeptonClkDisableFunction);
			mm.removeFunction(sceClockgen_driver_C9AF3102Function);
			
		}
	}
	
	
	public void sceClockgenInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenInit [0x29160F5D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenEnd [0x36F9B49D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenGetRevision(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenGetRevision [0x32C8CA86]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenGetRegValue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenGetRegValue [0xB9716D48]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenAudioClkSetFreq(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenAudioClkSetFreq [0x4EB657D5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenAudioClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenAudioClkEnable [0x5F8328FD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenAudioClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenAudioClkDisable [0xB9FE99D1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenLeptonClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenLeptonClkEnable [0x7FF82F6F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgenLeptonClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgenLeptonClkDisable [0xDBE5F283]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceClockgen_driver_C9AF3102(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceClockgen_driver_C9AF3102 [0xC9AF3102]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceClockgenInitFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenInit") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenEndFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenEnd") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenEnd(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenGetRevisionFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenGetRevision") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenGetRevision(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenGetRevision(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenGetRegValueFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenGetRegValue") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenGetRegValue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenGetRegValue(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenAudioClkSetFreqFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenAudioClkSetFreq") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenAudioClkSetFreq(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenAudioClkSetFreq(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenAudioClkEnableFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenAudioClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenAudioClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenAudioClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenAudioClkDisableFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenAudioClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenAudioClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenAudioClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenLeptonClkEnableFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenLeptonClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenLeptonClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenLeptonClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgenLeptonClkDisableFunction = new HLEModuleFunction("sceClockgen_driver", "sceClockgenLeptonClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceClockgenLeptonClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgenLeptonClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceClockgen_driver_C9AF3102Function = new HLEModuleFunction("sceClockgen_driver", "sceClockgen_driver_C9AF3102") {
		@Override
		public final void execute(Processor processor) {
			sceClockgen_driver_C9AF3102(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceClockgen_driverModule.sceClockgen_driver_C9AF3102(processor);";
		}
	};
    
};
