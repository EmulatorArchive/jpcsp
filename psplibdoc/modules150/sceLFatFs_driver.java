/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceLFatFs_driver implements HLEModule {
	@Override
	public String getName() { return "sceLFatFs_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceLfatfsWaitReadyFunction, 0x933F6E29);
			mm.addFunction(sceLfatfsStopFunction, 0x8F0560E0);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceLfatfsWaitReadyFunction);
			mm.removeFunction(sceLfatfsStopFunction);
			
		}
	}
	
	
	public void sceLfatfsWaitReady(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceLfatfsWaitReady [0x933F6E29]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceLfatfsStop(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceLfatfsStop [0x8F0560E0]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceLfatfsWaitReadyFunction = new HLEModuleFunction("sceLFatFs_driver", "sceLfatfsWaitReady") {
		@Override
		public final void execute(Processor processor) {
			sceLfatfsWaitReady(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceLFatFs_driverModule.sceLfatfsWaitReady(processor);";
		}
	};
    
	public final HLEModuleFunction sceLfatfsStopFunction = new HLEModuleFunction("sceLFatFs_driver", "sceLfatfsStop") {
		@Override
		public final void execute(Processor processor) {
			sceLfatfsStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceLFatFs_driverModule.sceLfatfsStop(processor);";
		}
	};
    
};
