/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceReg implements HLEModule {
	@Override
	public String getName() { return "sceReg"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceRegExitFunction, 0x9B25EDF1);
			mm.addFunction(sceRegOpenRegistryFunction, 0x92E41280);
			mm.addFunction(sceRegCloseRegistryFunction, 0xFA8A5739);
			mm.addFunction(sceRegRemoveRegistryFunction, 0xDEDA92BF);
			mm.addFunction(sceRegOpenCategoryFunction, 0x1D8A762E);
			mm.addFunction(sceRegCloseCategoryFunction, 0x0CAE832B);
			mm.addFunction(sceRegFlushRegistryFunction, 0x39461B4D);
			mm.addFunction(sceRegFlushCategoryFunction, 0x0D69BF40);
			mm.addFunction(sceRegCreateKeyFunction, 0x57641A81);
			mm.addFunction(sceRegSetKeyValueFunction, 0x17768E14);
			mm.addFunction(sceRegGetKeyInfoFunction, 0xD4475AA8);
			mm.addFunction(sceRegGetKeyValueFunction, 0x28A8E98A);
			mm.addFunction(sceRegGetKeysNumFunction, 0x2C0DB9DD);
			mm.addFunction(sceRegGetKeysFunction, 0x2D211135);
			mm.addFunction(sceRegRemoveCategoryFunction, 0x4CA16893);
			mm.addFunction(sceRegRemoveKeyFunction, 0x3615BC87);
			mm.addFunction(sceRegGetKeyInfoByNameFunction, 0xC5768D02);
			mm.addFunction(sceRegGetKeyValueByNameFunction, 0x30BE0259);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceRegExitFunction);
			mm.removeFunction(sceRegOpenRegistryFunction);
			mm.removeFunction(sceRegCloseRegistryFunction);
			mm.removeFunction(sceRegRemoveRegistryFunction);
			mm.removeFunction(sceRegOpenCategoryFunction);
			mm.removeFunction(sceRegCloseCategoryFunction);
			mm.removeFunction(sceRegFlushRegistryFunction);
			mm.removeFunction(sceRegFlushCategoryFunction);
			mm.removeFunction(sceRegCreateKeyFunction);
			mm.removeFunction(sceRegSetKeyValueFunction);
			mm.removeFunction(sceRegGetKeyInfoFunction);
			mm.removeFunction(sceRegGetKeyValueFunction);
			mm.removeFunction(sceRegGetKeysNumFunction);
			mm.removeFunction(sceRegGetKeysFunction);
			mm.removeFunction(sceRegRemoveCategoryFunction);
			mm.removeFunction(sceRegRemoveKeyFunction);
			mm.removeFunction(sceRegGetKeyInfoByNameFunction);
			mm.removeFunction(sceRegGetKeyValueByNameFunction);
			
		}
	}
	
	
	public void sceRegExit(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegExit [0x9B25EDF1]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegOpenRegistry(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegOpenRegistry [0x92E41280]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegCloseRegistry(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegCloseRegistry [0xFA8A5739]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegRemoveRegistry(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegRemoveRegistry [0xDEDA92BF]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegOpenCategory(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegOpenCategory [0x1D8A762E]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegCloseCategory(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegCloseCategory [0x0CAE832B]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegFlushRegistry(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegFlushRegistry [0x39461B4D]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegFlushCategory(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegFlushCategory [0x0D69BF40]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegCreateKey(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegCreateKey [0x57641A81]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegSetKeyValue(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegSetKeyValue [0x17768E14]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegGetKeyInfo(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegGetKeyInfo [0xD4475AA8]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegGetKeyValue(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegGetKeyValue [0x28A8E98A]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegGetKeysNum(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegGetKeysNum [0x2C0DB9DD]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegGetKeys(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegGetKeys [0x2D211135]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegRemoveCategory(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegRemoveCategory [0x4CA16893]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegRemoveKey(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegRemoveKey [0x3615BC87]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegGetKeyInfoByName(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegGetKeyInfoByName [0xC5768D02]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceRegGetKeyValueByName(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceRegGetKeyValueByName [0x30BE0259]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceRegExitFunction = new HLEModuleFunction("sceReg", "sceRegExit") {
		@Override
		public final void execute(Processor processor) {
			sceRegExit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegExit(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegOpenRegistryFunction = new HLEModuleFunction("sceReg", "sceRegOpenRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegOpenRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegOpenRegistry(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegCloseRegistryFunction = new HLEModuleFunction("sceReg", "sceRegCloseRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegCloseRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegCloseRegistry(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegRemoveRegistryFunction = new HLEModuleFunction("sceReg", "sceRegRemoveRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegRemoveRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegRemoveRegistry(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegOpenCategoryFunction = new HLEModuleFunction("sceReg", "sceRegOpenCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegOpenCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegOpenCategory(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegCloseCategoryFunction = new HLEModuleFunction("sceReg", "sceRegCloseCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegCloseCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegCloseCategory(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegFlushRegistryFunction = new HLEModuleFunction("sceReg", "sceRegFlushRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegFlushRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegFlushRegistry(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegFlushCategoryFunction = new HLEModuleFunction("sceReg", "sceRegFlushCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegFlushCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegFlushCategory(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegCreateKeyFunction = new HLEModuleFunction("sceReg", "sceRegCreateKey") {
		@Override
		public final void execute(Processor processor) {
			sceRegCreateKey(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegCreateKey(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegSetKeyValueFunction = new HLEModuleFunction("sceReg", "sceRegSetKeyValue") {
		@Override
		public final void execute(Processor processor) {
			sceRegSetKeyValue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegSetKeyValue(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyInfoFunction = new HLEModuleFunction("sceReg", "sceRegGetKeyInfo") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegGetKeyInfo(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyValueFunction = new HLEModuleFunction("sceReg", "sceRegGetKeyValue") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyValue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegGetKeyValue(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeysNumFunction = new HLEModuleFunction("sceReg", "sceRegGetKeysNum") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeysNum(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegGetKeysNum(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeysFunction = new HLEModuleFunction("sceReg", "sceRegGetKeys") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeys(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegGetKeys(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegRemoveCategoryFunction = new HLEModuleFunction("sceReg", "sceRegRemoveCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegRemoveCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegRemoveCategory(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegRemoveKeyFunction = new HLEModuleFunction("sceReg", "sceRegRemoveKey") {
		@Override
		public final void execute(Processor processor) {
			sceRegRemoveKey(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegRemoveKey(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyInfoByNameFunction = new HLEModuleFunction("sceReg", "sceRegGetKeyInfoByName") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyInfoByName(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegGetKeyInfoByName(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyValueByNameFunction = new HLEModuleFunction("sceReg", "sceRegGetKeyValueByName") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyValueByName(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceRegModule.sceRegGetKeyValueByName(processor);";
		}
	};
    
};
