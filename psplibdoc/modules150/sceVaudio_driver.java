/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceVaudio_driver implements HLEModule {
	@Override
	public String getName() { return "sceVaudio_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceVaudioInitFunction, 0x5A7435B7);
			mm.addFunction(sceVaudioEndFunction, 0x72749E84);
			mm.addFunction(sceVaudioOutputBlockingFunction, 0x8986295E);
			mm.addFunction(sceVaudioChReserveFunction, 0x03B6807D);
			mm.addFunction(sceVaudioChReleaseFunction, 0x67585DFD);
			mm.addFunction(sceVaudio_driver_346FBE94Function, 0x346FBE94);
			mm.addFunction(sceVaudio_driver_82EF2F9DFunction, 0x82EF2F9D);
			mm.addFunction(sceVaudio_driver_DCC18F25Function, 0xDCC18F25);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceVaudioInitFunction);
			mm.removeFunction(sceVaudioEndFunction);
			mm.removeFunction(sceVaudioOutputBlockingFunction);
			mm.removeFunction(sceVaudioChReserveFunction);
			mm.removeFunction(sceVaudioChReleaseFunction);
			mm.removeFunction(sceVaudio_driver_346FBE94Function);
			mm.removeFunction(sceVaudio_driver_82EF2F9DFunction);
			mm.removeFunction(sceVaudio_driver_DCC18F25Function);
			
		}
	}
	
	
	public void sceVaudioInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudioInit [0x5A7435B7]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceVaudioEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudioEnd [0x72749E84]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceVaudioOutputBlocking(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudioOutputBlocking [0x8986295E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceVaudioChReserve(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudioChReserve [0x03B6807D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceVaudioChRelease(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudioChRelease [0x67585DFD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceVaudio_driver_346FBE94(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudio_driver_346FBE94 [0x346FBE94]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceVaudio_driver_82EF2F9D(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudio_driver_82EF2F9D [0x82EF2F9D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceVaudio_driver_DCC18F25(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceVaudio_driver_DCC18F25 [0xDCC18F25]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceVaudioInitFunction = new HLEModuleFunction("sceVaudio_driver", "sceVaudioInit") {
		@Override
		public final void execute(Processor processor) {
			sceVaudioInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudioInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceVaudioEndFunction = new HLEModuleFunction("sceVaudio_driver", "sceVaudioEnd") {
		@Override
		public final void execute(Processor processor) {
			sceVaudioEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudioEnd(processor);";
		}
	};
    
	public final HLEModuleFunction sceVaudioOutputBlockingFunction = new HLEModuleFunction("sceVaudio_driver", "sceVaudioOutputBlocking") {
		@Override
		public final void execute(Processor processor) {
			sceVaudioOutputBlocking(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudioOutputBlocking(processor);";
		}
	};
    
	public final HLEModuleFunction sceVaudioChReserveFunction = new HLEModuleFunction("sceVaudio_driver", "sceVaudioChReserve") {
		@Override
		public final void execute(Processor processor) {
			sceVaudioChReserve(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudioChReserve(processor);";
		}
	};
    
	public final HLEModuleFunction sceVaudioChReleaseFunction = new HLEModuleFunction("sceVaudio_driver", "sceVaudioChRelease") {
		@Override
		public final void execute(Processor processor) {
			sceVaudioChRelease(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudioChRelease(processor);";
		}
	};
    
	public final HLEModuleFunction sceVaudio_driver_346FBE94Function = new HLEModuleFunction("sceVaudio_driver", "sceVaudio_driver_346FBE94") {
		@Override
		public final void execute(Processor processor) {
			sceVaudio_driver_346FBE94(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudio_driver_346FBE94(processor);";
		}
	};
    
	public final HLEModuleFunction sceVaudio_driver_82EF2F9DFunction = new HLEModuleFunction("sceVaudio_driver", "sceVaudio_driver_82EF2F9D") {
		@Override
		public final void execute(Processor processor) {
			sceVaudio_driver_82EF2F9D(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudio_driver_82EF2F9D(processor);";
		}
	};
    
	public final HLEModuleFunction sceVaudio_driver_DCC18F25Function = new HLEModuleFunction("sceVaudio_driver", "sceVaudio_driver_DCC18F25") {
		@Override
		public final void execute(Processor processor) {
			sceVaudio_driver_DCC18F25(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceVaudio_driverModule.sceVaudio_driver_DCC18F25(processor);";
		}
	};
    
};
