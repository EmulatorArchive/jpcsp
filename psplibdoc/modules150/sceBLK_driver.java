/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceBLK_driver implements HLEModule {
	@Override
	public String getName() { return "sceBLK_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceBLKInitFunction, 0x6216FF5D);
			mm.addFunction(sceBLKTermFunction, 0x06CD0A03);
			mm.addFunction(sceBLKStartFunction, 0x2FD88F7C);
			mm.addFunction(sceBLKStopFunction, 0x39150835);
			mm.addFunction(sceBLKRegisterFunction, 0x550511CE);
			mm.addFunction(sceBLKUnRegisterFunction, 0x43AEEFB6);
			mm.addFunction(sceBLKGetDeviceDataFunction, 0x5E5285A5);
			mm.addFunction(sceBLK_driver_A86B6778Function, 0xA86B6778);
			mm.addFunction(sceBLKGetUnitNumFunction, 0x46C91FF8);
			mm.addFunction(sceBLKStartFeaturesFunction, 0xDC4A18BC);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceBLKInitFunction);
			mm.removeFunction(sceBLKTermFunction);
			mm.removeFunction(sceBLKStartFunction);
			mm.removeFunction(sceBLKStopFunction);
			mm.removeFunction(sceBLKRegisterFunction);
			mm.removeFunction(sceBLKUnRegisterFunction);
			mm.removeFunction(sceBLKGetDeviceDataFunction);
			mm.removeFunction(sceBLK_driver_A86B6778Function);
			mm.removeFunction(sceBLKGetUnitNumFunction);
			mm.removeFunction(sceBLKStartFeaturesFunction);
			
		}
	}
	
	
	public void sceBLKInit(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKInit [0x6216FF5D]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKTerm(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKTerm [0x06CD0A03]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKStart(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKStart [0x2FD88F7C]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKStop(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKStop [0x39150835]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKRegister(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKRegister [0x550511CE]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKUnRegister(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKUnRegister [0x43AEEFB6]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKGetDeviceData(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKGetDeviceData [0x5E5285A5]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLK_driver_A86B6778(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLK_driver_A86B6778 [0xA86B6778]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKGetUnitNum(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKGetUnitNum [0x46C91FF8]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceBLKStartFeatures(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceBLKStartFeatures [0xDC4A18BC]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceBLKInitFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKInit") {
		@Override
		public final void execute(Processor processor) {
			sceBLKInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKTermFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKTerm") {
		@Override
		public final void execute(Processor processor) {
			sceBLKTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKTerm(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKStartFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKStart") {
		@Override
		public final void execute(Processor processor) {
			sceBLKStart(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKStart(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKStopFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKStop") {
		@Override
		public final void execute(Processor processor) {
			sceBLKStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKStop(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKRegisterFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKRegister") {
		@Override
		public final void execute(Processor processor) {
			sceBLKRegister(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKRegister(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKUnRegisterFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKUnRegister") {
		@Override
		public final void execute(Processor processor) {
			sceBLKUnRegister(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKUnRegister(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKGetDeviceDataFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKGetDeviceData") {
		@Override
		public final void execute(Processor processor) {
			sceBLKGetDeviceData(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKGetDeviceData(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLK_driver_A86B6778Function = new HLEModuleFunction("sceBLK_driver", "sceBLK_driver_A86B6778") {
		@Override
		public final void execute(Processor processor) {
			sceBLK_driver_A86B6778(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLK_driver_A86B6778(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKGetUnitNumFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKGetUnitNum") {
		@Override
		public final void execute(Processor processor) {
			sceBLKGetUnitNum(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKGetUnitNum(processor);";
		}
	};
    
	public final HLEModuleFunction sceBLKStartFeaturesFunction = new HLEModuleFunction("sceBLK_driver", "sceBLKStartFeatures") {
		@Override
		public final void execute(Processor processor) {
			sceBLKStartFeatures(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceBLK_driverModule.sceBLKStartFeatures(processor);";
		}
	};
    
};
