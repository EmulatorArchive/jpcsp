/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNetAdhoc implements HLEModule {
	@Override
	public String getName() { return "sceNetAdhoc"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceNetAdhocInitFunction, 0xE1D621D7);
			
			mm.addFunction(sceNetAdhocTermFunction, 0xA62C6F57);
			
			mm.addFunction(sceNetAdhocPollSocketFunction, 0x7A662D6B);
			
			mm.addFunction(sceNetAdhocSetSocketAlertFunction, 0x73BFD52D);
			
			mm.addFunction(sceNetAdhocGetSocketAlertFunction, 0x4D2CE199);
			
			mm.addFunction(sceNetAdhocPdpCreateFunction, 0x6F92741B);
			
			mm.addFunction(sceNetAdhocPdpSendFunction, 0xABED3790);
			
			mm.addFunction(sceNetAdhocPdpRecvFunction, 0xDFE53E03);
			
			mm.addFunction(sceNetAdhocPdpDeleteFunction, 0x7F27BB5E);
			
			mm.addFunction(sceNetAdhocGetPdpStatFunction, 0xC7C1FC57);
			
			mm.addFunction(sceNetAdhocPtpOpenFunction, 0x877F6D66);
			
			mm.addFunction(sceNetAdhocPtpConnectFunction, 0xFC6FC07B);
			
			mm.addFunction(sceNetAdhocPtpListenFunction, 0xE08BDAC1);
			
			mm.addFunction(sceNetAdhocPtpAcceptFunction, 0x9DF81198);
			
			mm.addFunction(sceNetAdhocPtpSendFunction, 0x4DA4C788);
			
			mm.addFunction(sceNetAdhocPtpRecvFunction, 0x8BEA2B3E);
			
			mm.addFunction(sceNetAdhocPtpFlushFunction, 0x9AC2EEAC);
			
			mm.addFunction(sceNetAdhocPtpCloseFunction, 0x157E6225);
			
			mm.addFunction(sceNetAdhocGetPtpStatFunction, 0xB9685118);
			
			mm.addFunction(sceNetAdhocGameModeCreateMasterFunction, 0x7F75C338);
			
			mm.addFunction(sceNetAdhocGameModeCreateReplicaFunction, 0x3278AB0C);
			
			mm.addFunction(sceNetAdhocGameModeUpdateMasterFunction, 0x98C204C8);
			
			mm.addFunction(sceNetAdhocGameModeUpdateReplicaFunction, 0xFA324B4E);
			
			mm.addFunction(sceNetAdhocGameModeDeleteMasterFunction, 0xA0229362);
			
			mm.addFunction(sceNetAdhocGameModeDeleteReplicaFunction, 0x0B2228E9);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceNetAdhocInitFunction);
			
			mm.removeFunction(sceNetAdhocTermFunction);
			
			mm.removeFunction(sceNetAdhocPollSocketFunction);
			
			mm.removeFunction(sceNetAdhocSetSocketAlertFunction);
			
			mm.removeFunction(sceNetAdhocGetSocketAlertFunction);
			
			mm.removeFunction(sceNetAdhocPdpCreateFunction);
			
			mm.removeFunction(sceNetAdhocPdpSendFunction);
			
			mm.removeFunction(sceNetAdhocPdpRecvFunction);
			
			mm.removeFunction(sceNetAdhocPdpDeleteFunction);
			
			mm.removeFunction(sceNetAdhocGetPdpStatFunction);
			
			mm.removeFunction(sceNetAdhocPtpOpenFunction);
			
			mm.removeFunction(sceNetAdhocPtpConnectFunction);
			
			mm.removeFunction(sceNetAdhocPtpListenFunction);
			
			mm.removeFunction(sceNetAdhocPtpAcceptFunction);
			
			mm.removeFunction(sceNetAdhocPtpSendFunction);
			
			mm.removeFunction(sceNetAdhocPtpRecvFunction);
			
			mm.removeFunction(sceNetAdhocPtpFlushFunction);
			
			mm.removeFunction(sceNetAdhocPtpCloseFunction);
			
			mm.removeFunction(sceNetAdhocGetPtpStatFunction);
			
			mm.removeFunction(sceNetAdhocGameModeCreateMasterFunction);
			
			mm.removeFunction(sceNetAdhocGameModeCreateReplicaFunction);
			
			mm.removeFunction(sceNetAdhocGameModeUpdateMasterFunction);
			
			mm.removeFunction(sceNetAdhocGameModeUpdateReplicaFunction);
			
			mm.removeFunction(sceNetAdhocGameModeDeleteMasterFunction);
			
			mm.removeFunction(sceNetAdhocGameModeDeleteReplicaFunction);
			
		}
	}
	
	
	public void sceNetAdhocInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocInit [0xE1D621D7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocTerm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocTerm [0xA62C6F57]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPollSocket(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPollSocket [0x7A662D6B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocSetSocketAlert(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocSetSocketAlert [0x73BFD52D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGetSocketAlert(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGetSocketAlert [0x4D2CE199]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPdpCreate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPdpCreate [0x6F92741B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPdpSend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPdpSend [0xABED3790]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPdpRecv(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPdpRecv [0xDFE53E03]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPdpDelete(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPdpDelete [0x7F27BB5E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGetPdpStat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGetPdpStat [0xC7C1FC57]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpOpen(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpOpen [0x877F6D66]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpConnect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpConnect [0xFC6FC07B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpListen(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpListen [0xE08BDAC1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpAccept(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpAccept [0x9DF81198]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpSend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpSend [0x4DA4C788]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpRecv(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpRecv [0x8BEA2B3E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpFlush(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpFlush [0x9AC2EEAC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocPtpClose(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocPtpClose [0x157E6225]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGetPtpStat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGetPtpStat [0xB9685118]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGameModeCreateMaster(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGameModeCreateMaster [0x7F75C338]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGameModeCreateReplica(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGameModeCreateReplica [0x3278AB0C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGameModeUpdateMaster(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGameModeUpdateMaster [0x98C204C8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGameModeUpdateReplica(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGameModeUpdateReplica [0xFA324B4E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGameModeDeleteMaster(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGameModeDeleteMaster [0xA0229362]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocGameModeDeleteReplica(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocGameModeDeleteReplica [0x0B2228E9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNetAdhocInitFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocInit") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocTermFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocTerm") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocTermFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPollSocketFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPollSocket") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPollSocket(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPollSocketFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocSetSocketAlertFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocSetSocketAlert") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocSetSocketAlert(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocSetSocketAlertFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGetSocketAlertFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGetSocketAlert") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGetSocketAlert(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGetSocketAlertFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPdpCreateFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPdpCreate") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPdpCreate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPdpCreateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPdpSendFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPdpSend") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPdpSend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPdpSendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPdpRecvFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPdpRecv") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPdpRecv(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPdpRecvFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPdpDeleteFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPdpDelete") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPdpDelete(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPdpDeleteFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGetPdpStatFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGetPdpStat") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGetPdpStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGetPdpStatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpOpenFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpOpen") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpOpen(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpOpenFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpConnectFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpConnect") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpConnect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpConnectFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpListenFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpListen") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpListen(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpListenFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpAcceptFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpAccept") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpAccept(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpAcceptFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpSendFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpSend") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpSend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpSendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpRecvFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpRecv") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpRecv(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpRecvFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpFlushFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpFlush") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpFlush(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpFlushFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocPtpCloseFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocPtpClose") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocPtpClose(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocPtpCloseFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGetPtpStatFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGetPtpStat") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGetPtpStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGetPtpStatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGameModeCreateMasterFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGameModeCreateMaster") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGameModeCreateMaster(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGameModeCreateMasterFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGameModeCreateReplicaFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGameModeCreateReplica") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGameModeCreateReplica(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGameModeCreateReplicaFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGameModeUpdateMasterFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGameModeUpdateMaster") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGameModeUpdateMaster(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGameModeUpdateMasterFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGameModeUpdateReplicaFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGameModeUpdateReplica") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGameModeUpdateReplica(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGameModeUpdateReplicaFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGameModeDeleteMasterFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGameModeDeleteMaster") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGameModeDeleteMaster(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGameModeDeleteMasterFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocGameModeDeleteReplicaFunction = new HLEModuleFunction("sceNetAdhoc", "sceNetAdhocGameModeDeleteReplica") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocGameModeDeleteReplica(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhoc.sceNetAdhocGameModeDeleteReplicaFunction.execute(processor);";
		}
	};
    
};
