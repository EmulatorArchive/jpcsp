/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceUmdMan_driver implements HLEModule {
	@Override
	public String getName() { return "sceUmdMan_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceUmdManInitFunction, 0xD27D050E);
			
			mm.addFunction(sceUmdManTermFunction, 0x0D3EA203);
			
			mm.addFunction(sceUmdManGetErrorStatusFunction, 0x2C756C37);
			
			mm.addFunction(sceUmdManActivateFunction, 0xCC80CFC6);
			
			mm.addFunction(sceUmdManStartFunction, 0x8CFED611);
			
			mm.addFunction(sceUmdManStopFunction, 0xCAD31025);
			
			mm.addFunction(sceUmdMan_driver_F6BE91FCFunction, 0xF6BE91FC);
			
			mm.addFunction(sceUmdManGetUmdDriveFunction, 0x47E2B6D8);
			
			mm.addFunction(sceUmdManCheckDeviceReadyFunction, 0xB2368381);
			
			mm.addFunction(sceUmdManGetInquiryFunction, 0xE779ECEF);
			
			mm.addFunction(sceUmdMan_driver_CEA5C857Function, 0xCEA5C857);
			
			mm.addFunction(sceUmdMan_driver_8634FFC7Function, 0x8634FFC7);
			
			mm.addFunction(sceUmdMan_driver_39704B6EFunction, 0x39704B6E);
			
			mm.addFunction(sceUmdMan_driver_63ACFD28Function, 0x63ACFD28);
			
			mm.addFunction(sceUmdMan_driver_84410A8EFunction, 0x84410A8E);
			
			mm.addFunction(sceUmdManValidateUMDFunction, 0xFCFEF5FE);
			
			mm.addFunction(sceUmdExecRead10CmdFunction, 0x1B1BF9FD);
			
			mm.addFunction(sceUmdExecPrefetch10CmdFunction, 0x18DE1880);
			
			mm.addFunction(sceUmdExecReadUMDStructureCmdFunction, 0x3D44BABF);
			
			mm.addFunction(sceUmdExecStartStopUnitCmdFunction, 0xE3F448E0);
			
			mm.addFunction(sceUmdExecInquiryCmdFunction, 0x1B19A313);
			
			mm.addFunction(sceUmdExecReqSenseCmdFunction, 0x2CBE959B);
			
			mm.addFunction(sceUmdExecModSenseCmdFunction, 0x2A39569B);
			
			mm.addFunction(sceUmdExecModSelectCmdFunction, 0xCEE55E3E);
			
			mm.addFunction(sceUmdExecMechaStatCmdFunction, 0xE5B7EDC5);
			
			mm.addFunction(sceUmdExecGetEventStatusCmdFunction, 0x65E1B97E);
			
			mm.addFunction(sceUmdExecReadCapacityCmdFunction, 0x5AA96415);
			
			mm.addFunction(sceUmdExecSeekCmdFunction, 0x250E6975);
			
			mm.addFunction(sceUmdExecPreventAllowMediaCmdFunction, 0x2A08FE9A);
			
			mm.addFunction(sceUmdExecAllocateFromReadCmdFunction, 0x68577709);
			
			mm.addFunction(sceUmdExecReadMKICmdFunction, 0xF819E17C);
			
			mm.addFunction(sceUmdExecSetAreaLimitCmdFunction, 0x61C32A52);
			
			mm.addFunction(sceUmdExecSetAccessLimitCmdFunction, 0x7094E3A7);
			
			mm.addFunction(sceUmdExecSetLockLengthCmdFunction, 0xD31DAD7E);
			
			mm.addFunction(sceUmdExecGetMediaInfoCmdFunction, 0x108B2322);
			
			mm.addFunction(sceUmdExecReportCacheCmdFunction, 0x98345381);
			
			mm.addFunction(sceUmdExecSetCDSpeedCmdFunction, 0xBF88476F);
			
			mm.addFunction(sceUmdExecSetStreamingCmdFunction, 0x485D4925);
			
			mm.addFunction(sceUmdExecClearCacheInfoCmdFunction, 0x73E49F8F);
			
			mm.addFunction(sceUmdExecTestCmdFunction, 0x14D3381C);
			
			mm.addFunction(sceUmdExecAdjustDataCmdFunction, 0x92F1CC33);
			
			mm.addFunction(sceUmdExecGetErrorLogCmdFunction, 0x61EB07A5);
			
			mm.addFunction(sceUmdMan_driver_77E6C03AFunction, 0x77E6C03A);
			
			mm.addFunction(sceUmdMan_driver_A869CAB3Function, 0xA869CAB3);
			
			mm.addFunction(sceUmdManRegisterImposeCallBackFunction, 0xF65D819F);
			
			mm.addFunction(sceUmdManUnRegisterImposeCallbackFunction, 0x2787078E);
			
			mm.addFunction(sceUmdMan_driver_1F9AFFF4Function, 0x1F9AFFF4);
			
			mm.addFunction(sceUmdManGetDiscInfoFunction, 0x8609D1E4);
			
			mm.addFunction(sceUmdManGetDiscInfo4VSHFunction, 0xAAA4ED91);
			
			mm.addFunction(sceUmdManGetUmdDiscInfoFunction, 0xE192C10A);
			
			mm.addFunction(sceUmdManGetReadyFlagFunction, 0x42D28DD1);
			
			mm.addFunction(sceUmdManGetIntrStateFlagFunction, 0x4FB913A3);
			
			mm.addFunction(sceUmdManSetAlarmFunction, 0x7DF2A18D);
			
			mm.addFunction(sceUmdManCancelAlarmFunction, 0xB0A6DC55);
			
			mm.addFunction(sceUmdMan_driver_D1D4F296Function, 0xD1D4F296);
			
			mm.addFunction(sceUmdManRegisterInsertEjectUMDCallBackFunction, 0xBF8AED79);
			
			mm.addFunction(sceUmdManUnRegisterInsertEjectUMDCallBackFunction, 0x4217E7F5);
			
			mm.addFunction(sceUmdManGetPowerStatFunction, 0x4581E306);
			
			mm.addFunction(sceUmdManChangePowerModeFunction, 0xCA68F200);
			
			mm.addFunction(sceUmdMan_driver_F4AFF62DFunction, 0xF4AFF62D);
			
			mm.addFunction(sceUmdManSPKGetMKIFunction, 0x7C3D307C);
			
			mm.addFunction(sceUmdMan_driver_B511F821Function, 0xB511F821);
			
			mm.addFunction(sceUmdMan_driver_736AE133Function, 0x736AE133);
			
			mm.addFunction(sceUmdMan_driver_BD13A488Function, 0xBD13A488);
			
			mm.addFunction(sceUmdMan_driver_9814DCF3Function, 0x9814DCF3);
			
			mm.addFunction(sceUmdMan_driver_3DCFAA71Function, 0x3DCFAA71);
			
			mm.addFunction(sceUmdManWaitSemaFunction, 0x0DC8D26D);
			
			mm.addFunction(sceUmdManPollSemaFunction, 0x9F106F73);
			
			mm.addFunction(sceUmdManSignalSemaFunction, 0xB0A43DA7);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceUmdManInitFunction);
			
			mm.removeFunction(sceUmdManTermFunction);
			
			mm.removeFunction(sceUmdManGetErrorStatusFunction);
			
			mm.removeFunction(sceUmdManActivateFunction);
			
			mm.removeFunction(sceUmdManStartFunction);
			
			mm.removeFunction(sceUmdManStopFunction);
			
			mm.removeFunction(sceUmdMan_driver_F6BE91FCFunction);
			
			mm.removeFunction(sceUmdManGetUmdDriveFunction);
			
			mm.removeFunction(sceUmdManCheckDeviceReadyFunction);
			
			mm.removeFunction(sceUmdManGetInquiryFunction);
			
			mm.removeFunction(sceUmdMan_driver_CEA5C857Function);
			
			mm.removeFunction(sceUmdMan_driver_8634FFC7Function);
			
			mm.removeFunction(sceUmdMan_driver_39704B6EFunction);
			
			mm.removeFunction(sceUmdMan_driver_63ACFD28Function);
			
			mm.removeFunction(sceUmdMan_driver_84410A8EFunction);
			
			mm.removeFunction(sceUmdManValidateUMDFunction);
			
			mm.removeFunction(sceUmdExecRead10CmdFunction);
			
			mm.removeFunction(sceUmdExecPrefetch10CmdFunction);
			
			mm.removeFunction(sceUmdExecReadUMDStructureCmdFunction);
			
			mm.removeFunction(sceUmdExecStartStopUnitCmdFunction);
			
			mm.removeFunction(sceUmdExecInquiryCmdFunction);
			
			mm.removeFunction(sceUmdExecReqSenseCmdFunction);
			
			mm.removeFunction(sceUmdExecModSenseCmdFunction);
			
			mm.removeFunction(sceUmdExecModSelectCmdFunction);
			
			mm.removeFunction(sceUmdExecMechaStatCmdFunction);
			
			mm.removeFunction(sceUmdExecGetEventStatusCmdFunction);
			
			mm.removeFunction(sceUmdExecReadCapacityCmdFunction);
			
			mm.removeFunction(sceUmdExecSeekCmdFunction);
			
			mm.removeFunction(sceUmdExecPreventAllowMediaCmdFunction);
			
			mm.removeFunction(sceUmdExecAllocateFromReadCmdFunction);
			
			mm.removeFunction(sceUmdExecReadMKICmdFunction);
			
			mm.removeFunction(sceUmdExecSetAreaLimitCmdFunction);
			
			mm.removeFunction(sceUmdExecSetAccessLimitCmdFunction);
			
			mm.removeFunction(sceUmdExecSetLockLengthCmdFunction);
			
			mm.removeFunction(sceUmdExecGetMediaInfoCmdFunction);
			
			mm.removeFunction(sceUmdExecReportCacheCmdFunction);
			
			mm.removeFunction(sceUmdExecSetCDSpeedCmdFunction);
			
			mm.removeFunction(sceUmdExecSetStreamingCmdFunction);
			
			mm.removeFunction(sceUmdExecClearCacheInfoCmdFunction);
			
			mm.removeFunction(sceUmdExecTestCmdFunction);
			
			mm.removeFunction(sceUmdExecAdjustDataCmdFunction);
			
			mm.removeFunction(sceUmdExecGetErrorLogCmdFunction);
			
			mm.removeFunction(sceUmdMan_driver_77E6C03AFunction);
			
			mm.removeFunction(sceUmdMan_driver_A869CAB3Function);
			
			mm.removeFunction(sceUmdManRegisterImposeCallBackFunction);
			
			mm.removeFunction(sceUmdManUnRegisterImposeCallbackFunction);
			
			mm.removeFunction(sceUmdMan_driver_1F9AFFF4Function);
			
			mm.removeFunction(sceUmdManGetDiscInfoFunction);
			
			mm.removeFunction(sceUmdManGetDiscInfo4VSHFunction);
			
			mm.removeFunction(sceUmdManGetUmdDiscInfoFunction);
			
			mm.removeFunction(sceUmdManGetReadyFlagFunction);
			
			mm.removeFunction(sceUmdManGetIntrStateFlagFunction);
			
			mm.removeFunction(sceUmdManSetAlarmFunction);
			
			mm.removeFunction(sceUmdManCancelAlarmFunction);
			
			mm.removeFunction(sceUmdMan_driver_D1D4F296Function);
			
			mm.removeFunction(sceUmdManRegisterInsertEjectUMDCallBackFunction);
			
			mm.removeFunction(sceUmdManUnRegisterInsertEjectUMDCallBackFunction);
			
			mm.removeFunction(sceUmdManGetPowerStatFunction);
			
			mm.removeFunction(sceUmdManChangePowerModeFunction);
			
			mm.removeFunction(sceUmdMan_driver_F4AFF62DFunction);
			
			mm.removeFunction(sceUmdManSPKGetMKIFunction);
			
			mm.removeFunction(sceUmdMan_driver_B511F821Function);
			
			mm.removeFunction(sceUmdMan_driver_736AE133Function);
			
			mm.removeFunction(sceUmdMan_driver_BD13A488Function);
			
			mm.removeFunction(sceUmdMan_driver_9814DCF3Function);
			
			mm.removeFunction(sceUmdMan_driver_3DCFAA71Function);
			
			mm.removeFunction(sceUmdManWaitSemaFunction);
			
			mm.removeFunction(sceUmdManPollSemaFunction);
			
			mm.removeFunction(sceUmdManSignalSemaFunction);
			
		}
	}
	
	
	public void sceUmdManInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManInit [0xD27D050E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManTerm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManTerm [0x0D3EA203]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetErrorStatus(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetErrorStatus [0x2C756C37]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManActivate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManActivate [0xCC80CFC6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManStart(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManStart [0x8CFED611]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManStop(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManStop [0xCAD31025]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_F6BE91FC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_F6BE91FC [0xF6BE91FC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetUmdDrive(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetUmdDrive [0x47E2B6D8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManCheckDeviceReady(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManCheckDeviceReady [0xB2368381]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetInquiry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetInquiry [0xE779ECEF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_CEA5C857(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_CEA5C857 [0xCEA5C857]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_8634FFC7(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_8634FFC7 [0x8634FFC7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_39704B6E(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_39704B6E [0x39704B6E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_63ACFD28(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_63ACFD28 [0x63ACFD28]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_84410A8E(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_84410A8E [0x84410A8E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManValidateUMD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManValidateUMD [0xFCFEF5FE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecRead10Cmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecRead10Cmd [0x1B1BF9FD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecPrefetch10Cmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecPrefetch10Cmd [0x18DE1880]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecReadUMDStructureCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecReadUMDStructureCmd [0x3D44BABF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecStartStopUnitCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecStartStopUnitCmd [0xE3F448E0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecInquiryCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecInquiryCmd [0x1B19A313]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecReqSenseCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecReqSenseCmd [0x2CBE959B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecModSenseCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecModSenseCmd [0x2A39569B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecModSelectCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecModSelectCmd [0xCEE55E3E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecMechaStatCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecMechaStatCmd [0xE5B7EDC5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecGetEventStatusCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecGetEventStatusCmd [0x65E1B97E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecReadCapacityCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecReadCapacityCmd [0x5AA96415]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecSeekCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecSeekCmd [0x250E6975]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecPreventAllowMediaCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecPreventAllowMediaCmd [0x2A08FE9A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecAllocateFromReadCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecAllocateFromReadCmd [0x68577709]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecReadMKICmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecReadMKICmd [0xF819E17C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecSetAreaLimitCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecSetAreaLimitCmd [0x61C32A52]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecSetAccessLimitCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecSetAccessLimitCmd [0x7094E3A7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecSetLockLengthCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecSetLockLengthCmd [0xD31DAD7E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecGetMediaInfoCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecGetMediaInfoCmd [0x108B2322]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecReportCacheCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecReportCacheCmd [0x98345381]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecSetCDSpeedCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecSetCDSpeedCmd [0xBF88476F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecSetStreamingCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecSetStreamingCmd [0x485D4925]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecClearCacheInfoCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecClearCacheInfoCmd [0x73E49F8F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecTestCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecTestCmd [0x14D3381C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecAdjustDataCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecAdjustDataCmd [0x92F1CC33]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdExecGetErrorLogCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdExecGetErrorLogCmd [0x61EB07A5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_77E6C03A(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_77E6C03A [0x77E6C03A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_A869CAB3(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_A869CAB3 [0xA869CAB3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManRegisterImposeCallBack(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManRegisterImposeCallBack [0xF65D819F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManUnRegisterImposeCallback(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManUnRegisterImposeCallback [0x2787078E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_1F9AFFF4(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_1F9AFFF4 [0x1F9AFFF4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetDiscInfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetDiscInfo [0x8609D1E4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetDiscInfo4VSH(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetDiscInfo4VSH [0xAAA4ED91]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetUmdDiscInfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetUmdDiscInfo [0xE192C10A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetReadyFlag(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetReadyFlag [0x42D28DD1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetIntrStateFlag(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetIntrStateFlag [0x4FB913A3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManSetAlarm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManSetAlarm [0x7DF2A18D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManCancelAlarm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManCancelAlarm [0xB0A6DC55]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_D1D4F296(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_D1D4F296 [0xD1D4F296]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManRegisterInsertEjectUMDCallBack(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManRegisterInsertEjectUMDCallBack [0xBF8AED79]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManUnRegisterInsertEjectUMDCallBack(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManUnRegisterInsertEjectUMDCallBack [0x4217E7F5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManGetPowerStat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManGetPowerStat [0x4581E306]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManChangePowerMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManChangePowerMode [0xCA68F200]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_F4AFF62D(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_F4AFF62D [0xF4AFF62D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManSPKGetMKI(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManSPKGetMKI [0x7C3D307C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_B511F821(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_B511F821 [0xB511F821]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_736AE133(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_736AE133 [0x736AE133]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_BD13A488(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_BD13A488 [0xBD13A488]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_9814DCF3(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_9814DCF3 [0x9814DCF3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdMan_driver_3DCFAA71(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdMan_driver_3DCFAA71 [0x3DCFAA71]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManWaitSema(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManWaitSema [0x0DC8D26D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManPollSema(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManPollSema [0x9F106F73]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUmdManSignalSema(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUmdManSignalSema [0xB0A43DA7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceUmdManInitFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManInit") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManTermFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManTerm") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManTermFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetErrorStatusFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetErrorStatus") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetErrorStatus(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetErrorStatusFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManActivateFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManActivate") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManActivate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManActivateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManStartFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManStart") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManStart(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManStartFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManStopFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManStop") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManStopFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_F6BE91FCFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_F6BE91FC") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_F6BE91FC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_F6BE91FCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetUmdDriveFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetUmdDrive") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetUmdDrive(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetUmdDriveFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManCheckDeviceReadyFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManCheckDeviceReady") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManCheckDeviceReady(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManCheckDeviceReadyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetInquiryFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetInquiry") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetInquiry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetInquiryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_CEA5C857Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_CEA5C857") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_CEA5C857(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_CEA5C857Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_8634FFC7Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_8634FFC7") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_8634FFC7(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_8634FFC7Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_39704B6EFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_39704B6E") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_39704B6E(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_39704B6EFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_63ACFD28Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_63ACFD28") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_63ACFD28(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_63ACFD28Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_84410A8EFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_84410A8E") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_84410A8E(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_84410A8EFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManValidateUMDFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManValidateUMD") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManValidateUMD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManValidateUMDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecRead10CmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecRead10Cmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecRead10Cmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecRead10CmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecPrefetch10CmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecPrefetch10Cmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecPrefetch10Cmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecPrefetch10CmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecReadUMDStructureCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecReadUMDStructureCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecReadUMDStructureCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecReadUMDStructureCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecStartStopUnitCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecStartStopUnitCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecStartStopUnitCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecStartStopUnitCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecInquiryCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecInquiryCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecInquiryCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecInquiryCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecReqSenseCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecReqSenseCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecReqSenseCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecReqSenseCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecModSenseCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecModSenseCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecModSenseCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecModSenseCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecModSelectCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecModSelectCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecModSelectCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecModSelectCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecMechaStatCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecMechaStatCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecMechaStatCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecMechaStatCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecGetEventStatusCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecGetEventStatusCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecGetEventStatusCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecGetEventStatusCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecReadCapacityCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecReadCapacityCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecReadCapacityCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecReadCapacityCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecSeekCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecSeekCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecSeekCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecSeekCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecPreventAllowMediaCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecPreventAllowMediaCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecPreventAllowMediaCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecPreventAllowMediaCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecAllocateFromReadCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecAllocateFromReadCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecAllocateFromReadCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecAllocateFromReadCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecReadMKICmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecReadMKICmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecReadMKICmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecReadMKICmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecSetAreaLimitCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecSetAreaLimitCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecSetAreaLimitCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecSetAreaLimitCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecSetAccessLimitCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecSetAccessLimitCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecSetAccessLimitCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecSetAccessLimitCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecSetLockLengthCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecSetLockLengthCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecSetLockLengthCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecSetLockLengthCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecGetMediaInfoCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecGetMediaInfoCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecGetMediaInfoCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecGetMediaInfoCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecReportCacheCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecReportCacheCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecReportCacheCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecReportCacheCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecSetCDSpeedCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecSetCDSpeedCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecSetCDSpeedCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecSetCDSpeedCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecSetStreamingCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecSetStreamingCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecSetStreamingCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecSetStreamingCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecClearCacheInfoCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecClearCacheInfoCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecClearCacheInfoCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecClearCacheInfoCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecTestCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecTestCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecTestCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecTestCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecAdjustDataCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecAdjustDataCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecAdjustDataCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecAdjustDataCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdExecGetErrorLogCmdFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdExecGetErrorLogCmd") {
		@Override
		public final void execute(Processor processor) {
			sceUmdExecGetErrorLogCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdExecGetErrorLogCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_77E6C03AFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_77E6C03A") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_77E6C03A(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_77E6C03AFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_A869CAB3Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_A869CAB3") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_A869CAB3(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_A869CAB3Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManRegisterImposeCallBackFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManRegisterImposeCallBack") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManRegisterImposeCallBack(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManRegisterImposeCallBackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManUnRegisterImposeCallbackFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManUnRegisterImposeCallback") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManUnRegisterImposeCallback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManUnRegisterImposeCallbackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_1F9AFFF4Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_1F9AFFF4") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_1F9AFFF4(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_1F9AFFF4Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetDiscInfoFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetDiscInfo") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetDiscInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetDiscInfoFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetDiscInfo4VSHFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetDiscInfo4VSH") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetDiscInfo4VSH(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetDiscInfo4VSHFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetUmdDiscInfoFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetUmdDiscInfo") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetUmdDiscInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetUmdDiscInfoFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetReadyFlagFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetReadyFlag") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetReadyFlag(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetReadyFlagFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetIntrStateFlagFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetIntrStateFlag") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetIntrStateFlag(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetIntrStateFlagFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManSetAlarmFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManSetAlarm") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManSetAlarm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManSetAlarmFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManCancelAlarmFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManCancelAlarm") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManCancelAlarm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManCancelAlarmFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_D1D4F296Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_D1D4F296") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_D1D4F296(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_D1D4F296Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManRegisterInsertEjectUMDCallBackFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManRegisterInsertEjectUMDCallBack") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManRegisterInsertEjectUMDCallBack(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManRegisterInsertEjectUMDCallBackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManUnRegisterInsertEjectUMDCallBackFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManUnRegisterInsertEjectUMDCallBack") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManUnRegisterInsertEjectUMDCallBack(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManUnRegisterInsertEjectUMDCallBackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManGetPowerStatFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManGetPowerStat") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManGetPowerStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManGetPowerStatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManChangePowerModeFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManChangePowerMode") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManChangePowerMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManChangePowerModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_F4AFF62DFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_F4AFF62D") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_F4AFF62D(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_F4AFF62DFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManSPKGetMKIFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManSPKGetMKI") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManSPKGetMKI(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManSPKGetMKIFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_B511F821Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_B511F821") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_B511F821(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_B511F821Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_736AE133Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_736AE133") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_736AE133(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_736AE133Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_BD13A488Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_BD13A488") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_BD13A488(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_BD13A488Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_9814DCF3Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_9814DCF3") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_9814DCF3(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_9814DCF3Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdMan_driver_3DCFAA71Function = new HLEModuleFunction("sceUmdMan_driver", "sceUmdMan_driver_3DCFAA71") {
		@Override
		public final void execute(Processor processor) {
			sceUmdMan_driver_3DCFAA71(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdMan_driver_3DCFAA71Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManWaitSemaFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManWaitSema") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManWaitSema(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManWaitSemaFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManPollSemaFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManPollSema") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManPollSema(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManPollSemaFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdManSignalSemaFunction = new HLEModuleFunction("sceUmdMan_driver", "sceUmdManSignalSema") {
		@Override
		public final void execute(Processor processor) {
			sceUmdManSignalSema(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUmdMan_driver.sceUmdManSignalSemaFunction.execute(processor);";
		}
	};
    
};
