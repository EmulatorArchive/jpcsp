/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceSysEventForKernel implements HLEModule {
	@Override
	public String getName() { return "sceSysEventForKernel"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceKernelIsRegisterSysEventHandlerFunction, 0xAEB300AE);
			
			mm.addFunction(sceKernelRegisterSysEventHandlerFunction, 0xCD9E4BB5);
			
			mm.addFunction(sceKernelUnregisterSysEventHandlerFunction, 0xD7D3FDCD);
			
			mm.addFunction(sceKernelSysEventDispatchFunction, 0x36331294);
			
			mm.addFunction(sceKernelReferSysEventHandlerFunction, 0x68D55505);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceKernelIsRegisterSysEventHandlerFunction);
			
			mm.removeFunction(sceKernelRegisterSysEventHandlerFunction);
			
			mm.removeFunction(sceKernelUnregisterSysEventHandlerFunction);
			
			mm.removeFunction(sceKernelSysEventDispatchFunction);
			
			mm.removeFunction(sceKernelReferSysEventHandlerFunction);
			
		}
	}
	
	
	public void sceKernelIsRegisterSysEventHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelIsRegisterSysEventHandler [0xAEB300AE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterSysEventHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelRegisterSysEventHandler [0xCD9E4BB5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelUnregisterSysEventHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelUnregisterSysEventHandler [0xD7D3FDCD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelSysEventDispatch(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelSysEventDispatch [0x36331294]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelReferSysEventHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelReferSysEventHandler [0x68D55505]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceKernelIsRegisterSysEventHandlerFunction = new HLEModuleFunction("sceSysEventForKernel", "sceKernelIsRegisterSysEventHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelIsRegisterSysEventHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceSysEventForKernel.sceKernelIsRegisterSysEventHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterSysEventHandlerFunction = new HLEModuleFunction("sceSysEventForKernel", "sceKernelRegisterSysEventHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterSysEventHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceSysEventForKernel.sceKernelRegisterSysEventHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelUnregisterSysEventHandlerFunction = new HLEModuleFunction("sceSysEventForKernel", "sceKernelUnregisterSysEventHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelUnregisterSysEventHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceSysEventForKernel.sceKernelUnregisterSysEventHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelSysEventDispatchFunction = new HLEModuleFunction("sceSysEventForKernel", "sceKernelSysEventDispatch") {
		@Override
		public final void execute(Processor processor) {
			sceKernelSysEventDispatch(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceSysEventForKernel.sceKernelSysEventDispatchFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelReferSysEventHandlerFunction = new HLEModuleFunction("sceSysEventForKernel", "sceKernelReferSysEventHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelReferSysEventHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceSysEventForKernel.sceKernelReferSysEventHandlerFunction.execute(processor);";
		}
	};
    
};
