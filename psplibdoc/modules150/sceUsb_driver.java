/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceUsb_driver implements HLEModule {
	@Override
	public String getName() { return "sceUsb_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceUsbStartFunction, 0xAE5DE6AF);
			
			mm.addFunction(sceUsbStopFunction, 0xC2464FA0);
			
			mm.addFunction(sceUsbGetStateFunction, 0xC21645A4);
			
			mm.addFunction(sceUsbGetDrvListFunction, 0x4E537366);
			
			mm.addFunction(sceUsbGetDrvStateFunction, 0x112CC951);
			
			mm.addFunction(sceUsbActivateFunction, 0x586DB82C);
			
			mm.addFunction(sceUsbDeactivateFunction, 0xC572A9C8);
			
			mm.addFunction(sceUsbWaitStateFunction, 0x5BE0E002);
			
			mm.addFunction(sceUsbWaitCancelFunction, 0x1C360735);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceUsbStartFunction);
			
			mm.removeFunction(sceUsbStopFunction);
			
			mm.removeFunction(sceUsbGetStateFunction);
			
			mm.removeFunction(sceUsbGetDrvListFunction);
			
			mm.removeFunction(sceUsbGetDrvStateFunction);
			
			mm.removeFunction(sceUsbActivateFunction);
			
			mm.removeFunction(sceUsbDeactivateFunction);
			
			mm.removeFunction(sceUsbWaitStateFunction);
			
			mm.removeFunction(sceUsbWaitCancelFunction);
			
		}
	}
	
	
	public void sceUsbStart(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbStart [0xAE5DE6AF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbStop(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbStop [0xC2464FA0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbGetState(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbGetState [0xC21645A4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbGetDrvList(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbGetDrvList [0x4E537366]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbGetDrvState(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbGetDrvState [0x112CC951]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbActivate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbActivate [0x586DB82C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbDeactivate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbDeactivate [0xC572A9C8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbWaitState(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbWaitState [0x5BE0E002]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUsbWaitCancel(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUsbWaitCancel [0x1C360735]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceUsbStartFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbStart") {
		@Override
		public final void execute(Processor processor) {
			sceUsbStart(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbStartFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbStopFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbStop") {
		@Override
		public final void execute(Processor processor) {
			sceUsbStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbStopFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbGetStateFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbGetState") {
		@Override
		public final void execute(Processor processor) {
			sceUsbGetState(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbGetStateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbGetDrvListFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbGetDrvList") {
		@Override
		public final void execute(Processor processor) {
			sceUsbGetDrvList(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbGetDrvListFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbGetDrvStateFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbGetDrvState") {
		@Override
		public final void execute(Processor processor) {
			sceUsbGetDrvState(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbGetDrvStateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbActivateFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbActivate") {
		@Override
		public final void execute(Processor processor) {
			sceUsbActivate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbActivateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbDeactivateFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbDeactivate") {
		@Override
		public final void execute(Processor processor) {
			sceUsbDeactivate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbDeactivateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbWaitStateFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbWaitState") {
		@Override
		public final void execute(Processor processor) {
			sceUsbWaitState(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbWaitStateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUsbWaitCancelFunction = new HLEModuleFunction("sceUsb_driver", "sceUsbWaitCancel") {
		@Override
		public final void execute(Processor processor) {
			sceUsbWaitCancel(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceUsb_driver.sceUsbWaitCancelFunction.execute(processor);";
		}
	};
    
};
