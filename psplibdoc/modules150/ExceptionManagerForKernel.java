/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class ExceptionManagerForKernel implements HLEModule {
	@Override
	public String getName() { return "ExceptionManagerForKernel"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceKernelRegisterExceptionHandlerFunction, 0x3FB264FC);
			mm.addFunction(sceKernelRegisterPriorityExceptionHandlerFunction, 0x5A837AD4);
			mm.addFunction(sceKernelRegisterDefaultExceptionHandlerFunction, 0x565C0B0E);
			mm.addFunction(sceKernelReleaseExceptionHandlerFunction, 0x1AA6CFFA);
			mm.addFunction(sceKernelGetActiveDefaultExceptionHandlerFunction, 0xDF83875E);
			mm.addFunction(sceKernelReleaseDefaultExceptionHandlerFunction, 0x291FF031);
			mm.addFunction(sceKernelRegisterNmiHandlerFunction, 0x15ADC862);
			mm.addFunction(sceKernelReleaseNmiHandlerFunction, 0xB15357C9);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceKernelRegisterExceptionHandlerFunction);
			mm.removeFunction(sceKernelRegisterPriorityExceptionHandlerFunction);
			mm.removeFunction(sceKernelRegisterDefaultExceptionHandlerFunction);
			mm.removeFunction(sceKernelReleaseExceptionHandlerFunction);
			mm.removeFunction(sceKernelGetActiveDefaultExceptionHandlerFunction);
			mm.removeFunction(sceKernelReleaseDefaultExceptionHandlerFunction);
			mm.removeFunction(sceKernelRegisterNmiHandlerFunction);
			mm.removeFunction(sceKernelReleaseNmiHandlerFunction);
			
		}
	}
	
	
	public void sceKernelRegisterExceptionHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelRegisterExceptionHandler [0x3FB264FC]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceKernelRegisterPriorityExceptionHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelRegisterPriorityExceptionHandler [0x5A837AD4]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceKernelRegisterDefaultExceptionHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelRegisterDefaultExceptionHandler [0x565C0B0E]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceKernelReleaseExceptionHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelReleaseExceptionHandler [0x1AA6CFFA]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceKernelGetActiveDefaultExceptionHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelGetActiveDefaultExceptionHandler [0xDF83875E]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceKernelReleaseDefaultExceptionHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelReleaseDefaultExceptionHandler [0x291FF031]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceKernelRegisterNmiHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelRegisterNmiHandler [0x15ADC862]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceKernelReleaseNmiHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceKernelReleaseNmiHandler [0xB15357C9]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceKernelRegisterExceptionHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelRegisterExceptionHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterExceptionHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelRegisterExceptionHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterPriorityExceptionHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelRegisterPriorityExceptionHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterPriorityExceptionHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelRegisterPriorityExceptionHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterDefaultExceptionHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelRegisterDefaultExceptionHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterDefaultExceptionHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelRegisterDefaultExceptionHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelReleaseExceptionHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelReleaseExceptionHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelReleaseExceptionHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelReleaseExceptionHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelGetActiveDefaultExceptionHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelGetActiveDefaultExceptionHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelGetActiveDefaultExceptionHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelGetActiveDefaultExceptionHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelReleaseDefaultExceptionHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelReleaseDefaultExceptionHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelReleaseDefaultExceptionHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelReleaseDefaultExceptionHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterNmiHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelRegisterNmiHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterNmiHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelRegisterNmiHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelReleaseNmiHandlerFunction = new HLEModuleFunction("ExceptionManagerForKernel", "sceKernelReleaseNmiHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelReleaseNmiHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.ExceptionManagerForKernelModule.sceKernelReleaseNmiHandler(processor);";
		}
	};
    
};
