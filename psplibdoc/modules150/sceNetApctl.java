/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNetApctl implements HLEModule {
	@Override
	public String getName() { return "sceNetApctl"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceNetApctlInitFunction, 0xE2F91F9B);
			mm.addFunction(sceNetApctlTermFunction, 0xB3EDD0EC);
			mm.addFunction(sceNetApctlGetInfoFunction, 0x2BEFDF23);
			mm.addFunction(sceNetApctlAddHandlerFunction, 0x8ABADD51);
			mm.addFunction(sceNetApctlDelHandlerFunction, 0x5963991B);
			mm.addFunction(sceNetApctlConnectFunction, 0xCFB957C6);
			mm.addFunction(sceNetApctlDisconnectFunction, 0x24FE91A1);
			mm.addFunction(sceNetApctlGetStateFunction, 0x5DEAC81B);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceNetApctlInitFunction);
			mm.removeFunction(sceNetApctlTermFunction);
			mm.removeFunction(sceNetApctlGetInfoFunction);
			mm.removeFunction(sceNetApctlAddHandlerFunction);
			mm.removeFunction(sceNetApctlDelHandlerFunction);
			mm.removeFunction(sceNetApctlConnectFunction);
			mm.removeFunction(sceNetApctlDisconnectFunction);
			mm.removeFunction(sceNetApctlGetStateFunction);
			
		}
	}
	
	
	public void sceNetApctlInit(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlInit [0xE2F91F9B]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceNetApctlTerm(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlTerm [0xB3EDD0EC]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceNetApctlGetInfo(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlGetInfo [0x2BEFDF23]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceNetApctlAddHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlAddHandler [0x8ABADD51]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceNetApctlDelHandler(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlDelHandler [0x5963991B]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceNetApctlConnect(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlConnect [0xCFB957C6]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceNetApctlDisconnect(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlDisconnect [0x24FE91A1]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceNetApctlGetState(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceNetApctlGetState [0x5DEAC81B]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceNetApctlInitFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlInit") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetApctlTermFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlTerm") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlTerm(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetApctlGetInfoFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlGetInfo") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlGetInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlGetInfo(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetApctlAddHandlerFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlAddHandler") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlAddHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlAddHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetApctlDelHandlerFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlDelHandler") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlDelHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlDelHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetApctlConnectFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlConnect") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlConnect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlConnect(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetApctlDisconnectFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlDisconnect") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlDisconnect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlDisconnect(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetApctlGetStateFunction = new HLEModuleFunction("sceNetApctl", "sceNetApctlGetState") {
		@Override
		public final void execute(Processor processor) {
			sceNetApctlGetState(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetApctlModule.sceNetApctlGetState(processor);";
		}
	};
    
};
