/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceSysreg_driver implements HLEModule {
	@Override
	public String getName() { return "sceSysreg_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceSysregInitFunction, 0x9C863542);
			mm.addFunction(sceSysregEndFunction, 0xF2DEAA14);
			mm.addFunction(sceSysreg_driver_E88B77EDFunction, 0xE88B77ED);
			mm.addFunction(sceSysregDoTimerEventFunction, 0xCD0F6715);
			mm.addFunction(sceSysreg_driver_844AF6BDFunction, 0x844AF6BD);
			mm.addFunction(sceSysregGetTachyonVersionFunction, 0xE2A5D1EE);
			mm.addFunction(sceSysregGetFuseIdFunction, 0x4F46EEDE);
			mm.addFunction(sceSysregGetFuseConfigFunction, 0x8F4F4E96);
			mm.addFunction(sceSysregTopResetEnableFunction, 0xC29D614E);
			mm.addFunction(sceSysregScResetEnableFunction, 0xDC6139A4);
			mm.addFunction(sceSysregMeResetEnableFunction, 0xDE59DACB);
			mm.addFunction(sceSysregMeResetDisableFunction, 0x2DB0EB28);
			mm.addFunction(sceSysregAwResetEnableFunction, 0x26283A6F);
			mm.addFunction(sceSysregAwResetDisableFunction, 0xA374195E);
			mm.addFunction(sceSysregVmeResetEnableFunction, 0xD20581EA);
			mm.addFunction(sceSysregVmeResetDisableFunction, 0x7558064A);
			mm.addFunction(sceSysregAvcResetEnableFunction, 0x9BB70D34);
			mm.addFunction(sceSysregAvcResetDisableFunction, 0xFD6C562B);
			mm.addFunction(sceSysregUsbResetEnableFunction, 0xCD4FB614);
			mm.addFunction(sceSysregUsbResetDisableFunction, 0x69EECBE5);
			mm.addFunction(sceSysregAtaResetEnableFunction, 0xF5B80837);
			mm.addFunction(sceSysregAtaResetDisableFunction, 0x8075303F);
			mm.addFunction(sceSysregMsifResetEnableFunction, 0x00C2628E);
			mm.addFunction(sceSysregMsifResetDisableFunction, 0xEC4BF81F);
			mm.addFunction(sceSysregKirkResetEnableFunction, 0x8A7F9EB4);
			mm.addFunction(sceSysregKirkResetDisableFunction, 0xC32F2491);
			mm.addFunction(sceSysregPllGetFrequencyFunction, 0xB21B6CBF);
			mm.addFunction(sceSysregPllUpdateFrequencyFunction, 0xBB3623DF);
			mm.addFunction(sceSysregPllGetBaseFrequencyFunction, 0x53A6838B);
			mm.addFunction(sceSysregPllGetOutSelectFunction, 0xB4560C45);
			mm.addFunction(sceSysregPllSetOutSelectFunction, 0xDCA57573);
			mm.addFunction(sceSysregMeBusClockEnableFunction, 0x44F6CDA7);
			mm.addFunction(sceSysregMeBusClockDisableFunction, 0x158AD4FC);
			mm.addFunction(sceSysregAwRegABusClockEnableFunction, 0x4D4CE2B8);
			mm.addFunction(sceSysregAwRegABusClockDisableFunction, 0x789BD609);
			mm.addFunction(sceSysregAwRegBBusClockEnableFunction, 0x391CE1C0);
			mm.addFunction(sceSysregAwRegBBusClockDisableFunction, 0x82D35024);
			mm.addFunction(sceSysregAwEdramBusClockEnableFunction, 0xAF904657);
			mm.addFunction(sceSysregAwEdramBusClockDisableFunction, 0x438AECE9);
			mm.addFunction(sceSysregDmacplusBusClockEnableFunction, 0x678AD3ED);
			mm.addFunction(sceSysregDmacplusBusClockDisableFunction, 0x168C09B8);
			mm.addFunction(sceSysregDmacBusClockEnableFunction, 0x7E7EBC20);
			mm.addFunction(sceSysregDmacBusClockDisableFunction, 0xA265C719);
			mm.addFunction(sceSysregKirkBusClockEnableFunction, 0x4F5AFBBE);
			mm.addFunction(sceSysregKirkBusClockDisableFunction, 0x845DD1A6);
			mm.addFunction(sceSysregAtaBusClockEnableFunction, 0x16909002);
			mm.addFunction(sceSysregAtaBusClockDisableFunction, 0xB6C10DF0);
			mm.addFunction(sceSysregUsbBusClockEnableFunction, 0x3E216017);
			mm.addFunction(sceSysregUsbBusClockDisableFunction, 0xBFBABB63);
			mm.addFunction(sceSysregMsifBusClockEnableFunction, 0x4716E71E);
			mm.addFunction(sceSysregMsifBusClockDisableFunction, 0x826430C0);
			mm.addFunction(sceSysregEmcddrBusClockEnableFunction, 0x7CC6CBFD);
			mm.addFunction(sceSysregEmcddrBusClockDisableFunction, 0xEE6B9411);
			mm.addFunction(sceSysregEmcsmBusClockEnableFunction, 0xF97D9D73);
			mm.addFunction(sceSysregEmcsmBusClockDisableFunction, 0x2D0F7755);
			mm.addFunction(sceSysregApbBusClockEnableFunction, 0x63B9EB65);
			mm.addFunction(sceSysregApbBusClockDisableFunction, 0xE1AA9788);
			mm.addFunction(sceSysregAudioBusClockEnableFunction, 0xAA63C8BD);
			mm.addFunction(sceSysregAudioBusClockDisableFunction, 0x054AC8C6);
			mm.addFunction(sceSysregAtaClkEnableFunction, 0x6B01D71B);
			mm.addFunction(sceSysregAtaClkDisableFunction, 0xFC186A83);
			mm.addFunction(sceSysregUsbClkEnableFunction, 0x7234EA80);
			mm.addFunction(sceSysregUsbClkDisableFunction, 0x38EC3281);
			mm.addFunction(sceSysregMsifClkEnableFunction, 0x31154490);
			mm.addFunction(sceSysregMsifClkDisableFunction, 0x8E2D835D);
			mm.addFunction(sceSysregSpiClkEnableFunction, 0x8835D1E1);
			mm.addFunction(sceSysregSpiClkDisableFunction, 0x8B90B8B5);
			mm.addFunction(sceSysregUartClkEnableFunction, 0x7725CA08);
			mm.addFunction(sceSysregUartClkDisableFunction, 0xA3E4154C);
			mm.addFunction(sceSysregApbTimerClkEnableFunction, 0xE8533DCA);
			mm.addFunction(sceSysregApbTimerClkDisableFunction, 0xF6D83AD0);
			mm.addFunction(sceSysregAudioClkEnableFunction, 0xA9CD1C1F);
			mm.addFunction(sceSysregAudioClkDisableFunction, 0x2F216F38);
			mm.addFunction(sceSysregLcdcClkEnableFunction, 0xA24C242A);
			mm.addFunction(sceSysregLcdcClkDisableFunction, 0xE89243BE);
			mm.addFunction(sceSysregPwmClkEnableFunction, 0x7DCA8302);
			mm.addFunction(sceSysregPwmClkDisableFunction, 0x45225F8F);
			mm.addFunction(sceSysregKeyClkEnableFunction, 0xD74D3AB6);
			mm.addFunction(sceSysregKeyClkDisableFunction, 0xAD7C4ACB);
			mm.addFunction(sceSysregIicClkEnableFunction, 0xDC68A93F);
			mm.addFunction(sceSysregIicClkDisableFunction, 0x94B0323C);
			mm.addFunction(sceSysregSircsClkEnableFunction, 0x6417CDD6);
			mm.addFunction(sceSysregSircsClkDisableFunction, 0x20388C9E);
			mm.addFunction(sceSysregGpioClkEnableFunction, 0xE3AECFFA);
			mm.addFunction(sceSysregGpioClkDisableFunction, 0x3BBD0C0C);
			mm.addFunction(sceSysregAudioClkoutClkEnableFunction, 0xC1DA05D2);
			mm.addFunction(sceSysregAudioClkoutClkDisableFunction, 0xDE170397);
			mm.addFunction(sceSysregMsifClkSelectFunction, 0x1969E840);
			mm.addFunction(sceSysregMsifDelaySelectFunction, 0x1D382514);
			mm.addFunction(sceSysregAtaClkSelectFunction, 0x833E6FB1);
			mm.addFunction(sceSysregApbTimerClkSelectFunction, 0x03340297);
			mm.addFunction(sceSysregAudioClkSelectFunction, 0x9100B4E5);
			mm.addFunction(sceSysregAudioClkoutClkSelectFunction, 0x0A83FC7B);
			mm.addFunction(sceSysregSpiClkSelectFunction, 0xD6628A48);
			mm.addFunction(sceSysregLcdcClkSelectFunction, 0x1E18EA43);
			mm.addFunction(sceSysregEmcsmIoEnableFunction, 0x9DD1F821);
			mm.addFunction(sceSysregEmcsmIoDisableFunction, 0x1C4C4C7A);
			mm.addFunction(sceSysregUsbIoEnableFunction, 0xBC68D9B6);
			mm.addFunction(sceSysregUsbIoDisableFunction, 0xA3C8E075);
			mm.addFunction(sceSysregAtaIoEnableFunction, 0x79338EA3);
			mm.addFunction(sceSysregAtaIoDisableFunction, 0xCADB92AA);
			mm.addFunction(sceSysregMsifIoEnableFunction, 0xD74F1D48);
			mm.addFunction(sceSysregMsifIoDisableFunction, 0x18172C6A);
			mm.addFunction(sceSysregLcdcIoEnableFunction, 0x63B1AADF);
			mm.addFunction(sceSysregLcdcIoDisableFunction, 0xF74F14E9);
			mm.addFunction(sceSysregAudioIoEnableFunction, 0xBB26CF1F);
			mm.addFunction(sceSysregAudioIoDisableFunction, 0x8E2FB536);
			mm.addFunction(sceSysregIicIoEnableFunction, 0x0436B60F);
			mm.addFunction(sceSysregIicIoDisableFunction, 0x58F47EFD);
			mm.addFunction(sceSysregSircsIoEnableFunction, 0x4C49A8BC);
			mm.addFunction(sceSysregSircsIoDisableFunction, 0x26FA0928);
			mm.addFunction(sceSysregAudioClkoutIoEnableFunction, 0xF844DDF3);
			mm.addFunction(sceSysregAudioClkoutIoDisableFunction, 0x29A119A1);
			mm.addFunction(sceSysregKeyIoEnableFunction, 0x77DED992);
			mm.addFunction(sceSysregKeyIoDisableFunction, 0x6879790B);
			mm.addFunction(sceSysregPwmIoEnableFunction, 0x7A5D2D15);
			mm.addFunction(sceSysregPwmIoDisableFunction, 0x25B0AC52);
			mm.addFunction(sceSysregUartIoEnableFunction, 0x7FD7A631);
			mm.addFunction(sceSysregUartIoDisableFunction, 0xBB823481);
			mm.addFunction(sceSysregSpiIoEnableFunction, 0x8C5C53DE);
			mm.addFunction(sceSysregSpiIoDisableFunction, 0xA16E55F4);
			mm.addFunction(sceSysregGpioIoEnableFunction, 0xB627582E);
			mm.addFunction(sceSysregGpioIoDisableFunction, 0x1E9C3607);
			mm.addFunction(sceSysreg_driver_55B18B84Function, 0x55B18B84);
			mm.addFunction(sceSysreg_driver_2112E686Function, 0x2112E686);
			mm.addFunction(sceSysreg_driver_7B9E9A53Function, 0x7B9E9A53);
			mm.addFunction(sceSysreg_driver_7BDF0556Function, 0x7BDF0556);
			mm.addFunction(sceSysreg_driver_8D0FED1EFunction, 0x8D0FED1E);
			mm.addFunction(sceSysreg_driver_A46E9CA8Function, 0xA46E9CA8);
			mm.addFunction(sceSysregUsbGetConnectStatusFunction, 0x633595F2);
			mm.addFunction(sceSysregUsbQueryIntrFunction, 0x32471457);
			mm.addFunction(sceSysregUsbAcquireIntrFunction, 0x692F31FF);
			mm.addFunction(sceSysregMsifGetConnectStatusFunction, 0xD43E98F6);
			mm.addFunction(sceSysregMsifQueryConnectIntrFunction, 0xBF91FBDA);
			mm.addFunction(sceSysregMsifAcquireConnectIntrFunction, 0x36A75390);
			mm.addFunction(sceSysregIntrInitFunction, 0x25673620);
			mm.addFunction(sceSysregIntrEndFunction, 0x4EE8E2C8);
			mm.addFunction(sceSysregInterruptToOtherFunction, 0x61BFF85F);
			mm.addFunction(sceSysregSemaTryLockFunction, 0x9FC87ED4);
			mm.addFunction(sceSysregSemaUnlockFunction, 0x8BE2D520);
			mm.addFunction(sceSysregEnableIntrFunction, 0x083F56E2);
			mm.addFunction(sceSysregDisableIntrFunction, 0x7C5B543C);
			mm.addFunction(sceSysregRequestIntrFunction, 0x3EA188AD);
			mm.addFunction(sceSysreg_driver_5664F8B5Function, 0x5664F8B5);
			mm.addFunction(sceSysreg_driver_44704E1DFunction, 0x44704E1D);
			mm.addFunction(sceSysreg_driver_584AD989Function, 0x584AD989);
			mm.addFunction(sceSysreg_driver_377F035FFunction, 0x377F035F);
			mm.addFunction(sceSysreg_driver_AB3185FDFunction, 0xAB3185FD);
			mm.addFunction(sceSysreg_driver_0EA487FAFunction, 0x0EA487FA);
			mm.addFunction(sceSysreg_driver_136E8F5AFunction, 0x136E8F5A);
			mm.addFunction(sceSysreg_driver_F4811E00Function, 0xF4811E00);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceSysregInitFunction);
			mm.removeFunction(sceSysregEndFunction);
			mm.removeFunction(sceSysreg_driver_E88B77EDFunction);
			mm.removeFunction(sceSysregDoTimerEventFunction);
			mm.removeFunction(sceSysreg_driver_844AF6BDFunction);
			mm.removeFunction(sceSysregGetTachyonVersionFunction);
			mm.removeFunction(sceSysregGetFuseIdFunction);
			mm.removeFunction(sceSysregGetFuseConfigFunction);
			mm.removeFunction(sceSysregTopResetEnableFunction);
			mm.removeFunction(sceSysregScResetEnableFunction);
			mm.removeFunction(sceSysregMeResetEnableFunction);
			mm.removeFunction(sceSysregMeResetDisableFunction);
			mm.removeFunction(sceSysregAwResetEnableFunction);
			mm.removeFunction(sceSysregAwResetDisableFunction);
			mm.removeFunction(sceSysregVmeResetEnableFunction);
			mm.removeFunction(sceSysregVmeResetDisableFunction);
			mm.removeFunction(sceSysregAvcResetEnableFunction);
			mm.removeFunction(sceSysregAvcResetDisableFunction);
			mm.removeFunction(sceSysregUsbResetEnableFunction);
			mm.removeFunction(sceSysregUsbResetDisableFunction);
			mm.removeFunction(sceSysregAtaResetEnableFunction);
			mm.removeFunction(sceSysregAtaResetDisableFunction);
			mm.removeFunction(sceSysregMsifResetEnableFunction);
			mm.removeFunction(sceSysregMsifResetDisableFunction);
			mm.removeFunction(sceSysregKirkResetEnableFunction);
			mm.removeFunction(sceSysregKirkResetDisableFunction);
			mm.removeFunction(sceSysregPllGetFrequencyFunction);
			mm.removeFunction(sceSysregPllUpdateFrequencyFunction);
			mm.removeFunction(sceSysregPllGetBaseFrequencyFunction);
			mm.removeFunction(sceSysregPllGetOutSelectFunction);
			mm.removeFunction(sceSysregPllSetOutSelectFunction);
			mm.removeFunction(sceSysregMeBusClockEnableFunction);
			mm.removeFunction(sceSysregMeBusClockDisableFunction);
			mm.removeFunction(sceSysregAwRegABusClockEnableFunction);
			mm.removeFunction(sceSysregAwRegABusClockDisableFunction);
			mm.removeFunction(sceSysregAwRegBBusClockEnableFunction);
			mm.removeFunction(sceSysregAwRegBBusClockDisableFunction);
			mm.removeFunction(sceSysregAwEdramBusClockEnableFunction);
			mm.removeFunction(sceSysregAwEdramBusClockDisableFunction);
			mm.removeFunction(sceSysregDmacplusBusClockEnableFunction);
			mm.removeFunction(sceSysregDmacplusBusClockDisableFunction);
			mm.removeFunction(sceSysregDmacBusClockEnableFunction);
			mm.removeFunction(sceSysregDmacBusClockDisableFunction);
			mm.removeFunction(sceSysregKirkBusClockEnableFunction);
			mm.removeFunction(sceSysregKirkBusClockDisableFunction);
			mm.removeFunction(sceSysregAtaBusClockEnableFunction);
			mm.removeFunction(sceSysregAtaBusClockDisableFunction);
			mm.removeFunction(sceSysregUsbBusClockEnableFunction);
			mm.removeFunction(sceSysregUsbBusClockDisableFunction);
			mm.removeFunction(sceSysregMsifBusClockEnableFunction);
			mm.removeFunction(sceSysregMsifBusClockDisableFunction);
			mm.removeFunction(sceSysregEmcddrBusClockEnableFunction);
			mm.removeFunction(sceSysregEmcddrBusClockDisableFunction);
			mm.removeFunction(sceSysregEmcsmBusClockEnableFunction);
			mm.removeFunction(sceSysregEmcsmBusClockDisableFunction);
			mm.removeFunction(sceSysregApbBusClockEnableFunction);
			mm.removeFunction(sceSysregApbBusClockDisableFunction);
			mm.removeFunction(sceSysregAudioBusClockEnableFunction);
			mm.removeFunction(sceSysregAudioBusClockDisableFunction);
			mm.removeFunction(sceSysregAtaClkEnableFunction);
			mm.removeFunction(sceSysregAtaClkDisableFunction);
			mm.removeFunction(sceSysregUsbClkEnableFunction);
			mm.removeFunction(sceSysregUsbClkDisableFunction);
			mm.removeFunction(sceSysregMsifClkEnableFunction);
			mm.removeFunction(sceSysregMsifClkDisableFunction);
			mm.removeFunction(sceSysregSpiClkEnableFunction);
			mm.removeFunction(sceSysregSpiClkDisableFunction);
			mm.removeFunction(sceSysregUartClkEnableFunction);
			mm.removeFunction(sceSysregUartClkDisableFunction);
			mm.removeFunction(sceSysregApbTimerClkEnableFunction);
			mm.removeFunction(sceSysregApbTimerClkDisableFunction);
			mm.removeFunction(sceSysregAudioClkEnableFunction);
			mm.removeFunction(sceSysregAudioClkDisableFunction);
			mm.removeFunction(sceSysregLcdcClkEnableFunction);
			mm.removeFunction(sceSysregLcdcClkDisableFunction);
			mm.removeFunction(sceSysregPwmClkEnableFunction);
			mm.removeFunction(sceSysregPwmClkDisableFunction);
			mm.removeFunction(sceSysregKeyClkEnableFunction);
			mm.removeFunction(sceSysregKeyClkDisableFunction);
			mm.removeFunction(sceSysregIicClkEnableFunction);
			mm.removeFunction(sceSysregIicClkDisableFunction);
			mm.removeFunction(sceSysregSircsClkEnableFunction);
			mm.removeFunction(sceSysregSircsClkDisableFunction);
			mm.removeFunction(sceSysregGpioClkEnableFunction);
			mm.removeFunction(sceSysregGpioClkDisableFunction);
			mm.removeFunction(sceSysregAudioClkoutClkEnableFunction);
			mm.removeFunction(sceSysregAudioClkoutClkDisableFunction);
			mm.removeFunction(sceSysregMsifClkSelectFunction);
			mm.removeFunction(sceSysregMsifDelaySelectFunction);
			mm.removeFunction(sceSysregAtaClkSelectFunction);
			mm.removeFunction(sceSysregApbTimerClkSelectFunction);
			mm.removeFunction(sceSysregAudioClkSelectFunction);
			mm.removeFunction(sceSysregAudioClkoutClkSelectFunction);
			mm.removeFunction(sceSysregSpiClkSelectFunction);
			mm.removeFunction(sceSysregLcdcClkSelectFunction);
			mm.removeFunction(sceSysregEmcsmIoEnableFunction);
			mm.removeFunction(sceSysregEmcsmIoDisableFunction);
			mm.removeFunction(sceSysregUsbIoEnableFunction);
			mm.removeFunction(sceSysregUsbIoDisableFunction);
			mm.removeFunction(sceSysregAtaIoEnableFunction);
			mm.removeFunction(sceSysregAtaIoDisableFunction);
			mm.removeFunction(sceSysregMsifIoEnableFunction);
			mm.removeFunction(sceSysregMsifIoDisableFunction);
			mm.removeFunction(sceSysregLcdcIoEnableFunction);
			mm.removeFunction(sceSysregLcdcIoDisableFunction);
			mm.removeFunction(sceSysregAudioIoEnableFunction);
			mm.removeFunction(sceSysregAudioIoDisableFunction);
			mm.removeFunction(sceSysregIicIoEnableFunction);
			mm.removeFunction(sceSysregIicIoDisableFunction);
			mm.removeFunction(sceSysregSircsIoEnableFunction);
			mm.removeFunction(sceSysregSircsIoDisableFunction);
			mm.removeFunction(sceSysregAudioClkoutIoEnableFunction);
			mm.removeFunction(sceSysregAudioClkoutIoDisableFunction);
			mm.removeFunction(sceSysregKeyIoEnableFunction);
			mm.removeFunction(sceSysregKeyIoDisableFunction);
			mm.removeFunction(sceSysregPwmIoEnableFunction);
			mm.removeFunction(sceSysregPwmIoDisableFunction);
			mm.removeFunction(sceSysregUartIoEnableFunction);
			mm.removeFunction(sceSysregUartIoDisableFunction);
			mm.removeFunction(sceSysregSpiIoEnableFunction);
			mm.removeFunction(sceSysregSpiIoDisableFunction);
			mm.removeFunction(sceSysregGpioIoEnableFunction);
			mm.removeFunction(sceSysregGpioIoDisableFunction);
			mm.removeFunction(sceSysreg_driver_55B18B84Function);
			mm.removeFunction(sceSysreg_driver_2112E686Function);
			mm.removeFunction(sceSysreg_driver_7B9E9A53Function);
			mm.removeFunction(sceSysreg_driver_7BDF0556Function);
			mm.removeFunction(sceSysreg_driver_8D0FED1EFunction);
			mm.removeFunction(sceSysreg_driver_A46E9CA8Function);
			mm.removeFunction(sceSysregUsbGetConnectStatusFunction);
			mm.removeFunction(sceSysregUsbQueryIntrFunction);
			mm.removeFunction(sceSysregUsbAcquireIntrFunction);
			mm.removeFunction(sceSysregMsifGetConnectStatusFunction);
			mm.removeFunction(sceSysregMsifQueryConnectIntrFunction);
			mm.removeFunction(sceSysregMsifAcquireConnectIntrFunction);
			mm.removeFunction(sceSysregIntrInitFunction);
			mm.removeFunction(sceSysregIntrEndFunction);
			mm.removeFunction(sceSysregInterruptToOtherFunction);
			mm.removeFunction(sceSysregSemaTryLockFunction);
			mm.removeFunction(sceSysregSemaUnlockFunction);
			mm.removeFunction(sceSysregEnableIntrFunction);
			mm.removeFunction(sceSysregDisableIntrFunction);
			mm.removeFunction(sceSysregRequestIntrFunction);
			mm.removeFunction(sceSysreg_driver_5664F8B5Function);
			mm.removeFunction(sceSysreg_driver_44704E1DFunction);
			mm.removeFunction(sceSysreg_driver_584AD989Function);
			mm.removeFunction(sceSysreg_driver_377F035FFunction);
			mm.removeFunction(sceSysreg_driver_AB3185FDFunction);
			mm.removeFunction(sceSysreg_driver_0EA487FAFunction);
			mm.removeFunction(sceSysreg_driver_136E8F5AFunction);
			mm.removeFunction(sceSysreg_driver_F4811E00Function);
			
		}
	}
	
	
	public void sceSysregInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregInit [0x9C863542]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEnd [0xF2DEAA14]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_E88B77ED(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_E88B77ED [0xE88B77ED]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregDoTimerEvent(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregDoTimerEvent [0xCD0F6715]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_844AF6BD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_844AF6BD [0x844AF6BD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregGetTachyonVersion(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregGetTachyonVersion [0xE2A5D1EE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregGetFuseId(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregGetFuseId [0x4F46EEDE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregGetFuseConfig(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregGetFuseConfig [0x8F4F4E96]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregTopResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregTopResetEnable [0xC29D614E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregScResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregScResetEnable [0xDC6139A4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMeResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMeResetEnable [0xDE59DACB]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMeResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMeResetDisable [0x2DB0EB28]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwResetEnable [0x26283A6F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwResetDisable [0xA374195E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregVmeResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregVmeResetEnable [0xD20581EA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregVmeResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregVmeResetDisable [0x7558064A]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAvcResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAvcResetEnable [0x9BB70D34]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAvcResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAvcResetDisable [0xFD6C562B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbResetEnable [0xCD4FB614]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbResetDisable [0x69EECBE5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaResetEnable [0xF5B80837]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaResetDisable [0x8075303F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifResetEnable [0x00C2628E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifResetDisable [0xEC4BF81F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKirkResetEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKirkResetEnable [0x8A7F9EB4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKirkResetDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKirkResetDisable [0xC32F2491]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPllGetFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPllGetFrequency [0xB21B6CBF]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPllUpdateFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPllUpdateFrequency [0xBB3623DF]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPllGetBaseFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPllGetBaseFrequency [0x53A6838B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPllGetOutSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPllGetOutSelect [0xB4560C45]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPllSetOutSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPllSetOutSelect [0xDCA57573]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMeBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMeBusClockEnable [0x44F6CDA7]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMeBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMeBusClockDisable [0x158AD4FC]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwRegABusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwRegABusClockEnable [0x4D4CE2B8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwRegABusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwRegABusClockDisable [0x789BD609]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwRegBBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwRegBBusClockEnable [0x391CE1C0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwRegBBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwRegBBusClockDisable [0x82D35024]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwEdramBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwEdramBusClockEnable [0xAF904657]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAwEdramBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAwEdramBusClockDisable [0x438AECE9]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregDmacplusBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregDmacplusBusClockEnable [0x678AD3ED]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregDmacplusBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregDmacplusBusClockDisable [0x168C09B8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregDmacBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregDmacBusClockEnable [0x7E7EBC20]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregDmacBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregDmacBusClockDisable [0xA265C719]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKirkBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKirkBusClockEnable [0x4F5AFBBE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKirkBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKirkBusClockDisable [0x845DD1A6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaBusClockEnable [0x16909002]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaBusClockDisable [0xB6C10DF0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbBusClockEnable [0x3E216017]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbBusClockDisable [0xBFBABB63]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifBusClockEnable [0x4716E71E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifBusClockDisable [0x826430C0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEmcddrBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEmcddrBusClockEnable [0x7CC6CBFD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEmcddrBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEmcddrBusClockDisable [0xEE6B9411]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEmcsmBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEmcsmBusClockEnable [0xF97D9D73]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEmcsmBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEmcsmBusClockDisable [0x2D0F7755]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregApbBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregApbBusClockEnable [0x63B9EB65]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregApbBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregApbBusClockDisable [0xE1AA9788]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioBusClockEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioBusClockEnable [0xAA63C8BD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioBusClockDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioBusClockDisable [0x054AC8C6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaClkEnable [0x6B01D71B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaClkDisable [0xFC186A83]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbClkEnable [0x7234EA80]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbClkDisable [0x38EC3281]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifClkEnable [0x31154490]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifClkDisable [0x8E2D835D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSpiClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSpiClkEnable [0x8835D1E1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSpiClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSpiClkDisable [0x8B90B8B5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUartClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUartClkEnable [0x7725CA08]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUartClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUartClkDisable [0xA3E4154C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregApbTimerClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregApbTimerClkEnable [0xE8533DCA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregApbTimerClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregApbTimerClkDisable [0xF6D83AD0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkEnable [0xA9CD1C1F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkDisable [0x2F216F38]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregLcdcClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregLcdcClkEnable [0xA24C242A]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregLcdcClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregLcdcClkDisable [0xE89243BE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPwmClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPwmClkEnable [0x7DCA8302]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPwmClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPwmClkDisable [0x45225F8F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKeyClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKeyClkEnable [0xD74D3AB6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKeyClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKeyClkDisable [0xAD7C4ACB]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregIicClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregIicClkEnable [0xDC68A93F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregIicClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregIicClkDisable [0x94B0323C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSircsClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSircsClkEnable [0x6417CDD6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSircsClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSircsClkDisable [0x20388C9E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregGpioClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregGpioClkEnable [0xE3AECFFA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregGpioClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregGpioClkDisable [0x3BBD0C0C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkoutClkEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkoutClkEnable [0xC1DA05D2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkoutClkDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkoutClkDisable [0xDE170397]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifClkSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifClkSelect [0x1969E840]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifDelaySelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifDelaySelect [0x1D382514]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaClkSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaClkSelect [0x833E6FB1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregApbTimerClkSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregApbTimerClkSelect [0x03340297]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkSelect [0x9100B4E5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkoutClkSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkoutClkSelect [0x0A83FC7B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSpiClkSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSpiClkSelect [0xD6628A48]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregLcdcClkSelect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregLcdcClkSelect [0x1E18EA43]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEmcsmIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEmcsmIoEnable [0x9DD1F821]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEmcsmIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEmcsmIoDisable [0x1C4C4C7A]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbIoEnable [0xBC68D9B6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbIoDisable [0xA3C8E075]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaIoEnable [0x79338EA3]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAtaIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAtaIoDisable [0xCADB92AA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifIoEnable [0xD74F1D48]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifIoDisable [0x18172C6A]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregLcdcIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregLcdcIoEnable [0x63B1AADF]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregLcdcIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregLcdcIoDisable [0xF74F14E9]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioIoEnable [0xBB26CF1F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioIoDisable [0x8E2FB536]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregIicIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregIicIoEnable [0x0436B60F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregIicIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregIicIoDisable [0x58F47EFD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSircsIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSircsIoEnable [0x4C49A8BC]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSircsIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSircsIoDisable [0x26FA0928]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkoutIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkoutIoEnable [0xF844DDF3]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregAudioClkoutIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregAudioClkoutIoDisable [0x29A119A1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKeyIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKeyIoEnable [0x77DED992]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregKeyIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregKeyIoDisable [0x6879790B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPwmIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPwmIoEnable [0x7A5D2D15]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregPwmIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregPwmIoDisable [0x25B0AC52]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUartIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUartIoEnable [0x7FD7A631]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUartIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUartIoDisable [0xBB823481]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSpiIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSpiIoEnable [0x8C5C53DE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSpiIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSpiIoDisable [0xA16E55F4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregGpioIoEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregGpioIoEnable [0xB627582E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregGpioIoDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregGpioIoDisable [0x1E9C3607]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_55B18B84(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_55B18B84 [0x55B18B84]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_2112E686(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_2112E686 [0x2112E686]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_7B9E9A53(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_7B9E9A53 [0x7B9E9A53]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_7BDF0556(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_7BDF0556 [0x7BDF0556]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_8D0FED1E(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_8D0FED1E [0x8D0FED1E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_A46E9CA8(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_A46E9CA8 [0xA46E9CA8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbGetConnectStatus(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbGetConnectStatus [0x633595F2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbQueryIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbQueryIntr [0x32471457]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregUsbAcquireIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregUsbAcquireIntr [0x692F31FF]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifGetConnectStatus(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifGetConnectStatus [0xD43E98F6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifQueryConnectIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifQueryConnectIntr [0xBF91FBDA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregMsifAcquireConnectIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregMsifAcquireConnectIntr [0x36A75390]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregIntrInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregIntrInit [0x25673620]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregIntrEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregIntrEnd [0x4EE8E2C8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregInterruptToOther(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregInterruptToOther [0x61BFF85F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSemaTryLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSemaTryLock [0x9FC87ED4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregSemaUnlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregSemaUnlock [0x8BE2D520]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregEnableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregEnableIntr [0x083F56E2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregDisableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregDisableIntr [0x7C5B543C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysregRequestIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysregRequestIntr [0x3EA188AD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_5664F8B5(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_5664F8B5 [0x5664F8B5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_44704E1D(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_44704E1D [0x44704E1D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_584AD989(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_584AD989 [0x584AD989]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_377F035F(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_377F035F [0x377F035F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_AB3185FD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_AB3185FD [0xAB3185FD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_0EA487FA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_0EA487FA [0x0EA487FA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_136E8F5A(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_136E8F5A [0x136E8F5A]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceSysreg_driver_F4811E00(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceSysreg_driver_F4811E00 [0xF4811E00]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceSysregInitFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregInit") {
		@Override
		public final void execute(Processor processor) {
			sceSysregInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEndFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEnd") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEnd(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_E88B77EDFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_E88B77ED") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_E88B77ED(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_E88B77ED(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregDoTimerEventFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregDoTimerEvent") {
		@Override
		public final void execute(Processor processor) {
			sceSysregDoTimerEvent(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregDoTimerEvent(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_844AF6BDFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_844AF6BD") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_844AF6BD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_844AF6BD(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregGetTachyonVersionFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregGetTachyonVersion") {
		@Override
		public final void execute(Processor processor) {
			sceSysregGetTachyonVersion(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregGetTachyonVersion(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregGetFuseIdFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregGetFuseId") {
		@Override
		public final void execute(Processor processor) {
			sceSysregGetFuseId(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregGetFuseId(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregGetFuseConfigFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregGetFuseConfig") {
		@Override
		public final void execute(Processor processor) {
			sceSysregGetFuseConfig(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregGetFuseConfig(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregTopResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregTopResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregTopResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregTopResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregScResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregScResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregScResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregScResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMeResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMeResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMeResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMeResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMeResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMeResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMeResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMeResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregVmeResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregVmeResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregVmeResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregVmeResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregVmeResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregVmeResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregVmeResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregVmeResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAvcResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAvcResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAvcResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAvcResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAvcResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAvcResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAvcResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAvcResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKirkResetEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKirkResetEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKirkResetEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKirkResetEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKirkResetDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKirkResetDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKirkResetDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKirkResetDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPllGetFrequencyFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPllGetFrequency") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPllGetFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPllGetFrequency(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPllUpdateFrequencyFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPllUpdateFrequency") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPllUpdateFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPllUpdateFrequency(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPllGetBaseFrequencyFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPllGetBaseFrequency") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPllGetBaseFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPllGetBaseFrequency(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPllGetOutSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPllGetOutSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPllGetOutSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPllGetOutSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPllSetOutSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPllSetOutSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPllSetOutSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPllSetOutSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMeBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMeBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMeBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMeBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMeBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMeBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMeBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMeBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwRegABusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwRegABusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwRegABusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwRegABusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwRegABusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwRegABusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwRegABusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwRegABusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwRegBBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwRegBBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwRegBBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwRegBBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwRegBBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwRegBBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwRegBBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwRegBBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwEdramBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwEdramBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwEdramBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwEdramBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAwEdramBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAwEdramBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAwEdramBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAwEdramBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregDmacplusBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregDmacplusBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregDmacplusBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregDmacplusBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregDmacplusBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregDmacplusBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregDmacplusBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregDmacplusBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregDmacBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregDmacBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregDmacBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregDmacBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregDmacBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregDmacBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregDmacBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregDmacBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKirkBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKirkBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKirkBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKirkBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKirkBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKirkBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKirkBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKirkBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEmcddrBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEmcddrBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEmcddrBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEmcddrBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEmcddrBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEmcddrBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEmcddrBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEmcddrBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEmcsmBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEmcsmBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEmcsmBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEmcsmBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEmcsmBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEmcsmBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEmcsmBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEmcsmBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregApbBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregApbBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregApbBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregApbBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregApbBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregApbBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregApbBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregApbBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioBusClockEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioBusClockEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioBusClockEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioBusClockEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioBusClockDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioBusClockDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioBusClockDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioBusClockDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSpiClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSpiClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSpiClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSpiClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSpiClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSpiClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSpiClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSpiClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUartClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUartClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUartClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUartClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUartClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUartClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUartClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUartClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregApbTimerClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregApbTimerClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregApbTimerClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregApbTimerClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregApbTimerClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregApbTimerClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregApbTimerClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregApbTimerClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregLcdcClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregLcdcClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregLcdcClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregLcdcClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregLcdcClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregLcdcClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregLcdcClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregLcdcClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPwmClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPwmClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPwmClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPwmClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPwmClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPwmClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPwmClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPwmClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKeyClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKeyClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKeyClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKeyClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKeyClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKeyClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKeyClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKeyClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregIicClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregIicClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregIicClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregIicClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregIicClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregIicClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregIicClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregIicClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSircsClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSircsClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSircsClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSircsClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSircsClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSircsClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSircsClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSircsClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregGpioClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregGpioClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregGpioClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregGpioClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregGpioClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregGpioClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregGpioClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregGpioClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkoutClkEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkoutClkEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkoutClkEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkoutClkEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkoutClkDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkoutClkDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkoutClkDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkoutClkDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifClkSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifClkSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifClkSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifClkSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifDelaySelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifDelaySelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifDelaySelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifDelaySelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaClkSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaClkSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaClkSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaClkSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregApbTimerClkSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregApbTimerClkSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregApbTimerClkSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregApbTimerClkSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkoutClkSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkoutClkSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkoutClkSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkoutClkSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSpiClkSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSpiClkSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSpiClkSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSpiClkSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregLcdcClkSelectFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregLcdcClkSelect") {
		@Override
		public final void execute(Processor processor) {
			sceSysregLcdcClkSelect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregLcdcClkSelect(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEmcsmIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEmcsmIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEmcsmIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEmcsmIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEmcsmIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEmcsmIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEmcsmIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEmcsmIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAtaIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAtaIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAtaIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAtaIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregLcdcIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregLcdcIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregLcdcIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregLcdcIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregLcdcIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregLcdcIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregLcdcIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregLcdcIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregIicIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregIicIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregIicIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregIicIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregIicIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregIicIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregIicIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregIicIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSircsIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSircsIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSircsIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSircsIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSircsIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSircsIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSircsIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSircsIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkoutIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkoutIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkoutIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkoutIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregAudioClkoutIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregAudioClkoutIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregAudioClkoutIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregAudioClkoutIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKeyIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKeyIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKeyIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKeyIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregKeyIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregKeyIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregKeyIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregKeyIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPwmIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPwmIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPwmIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPwmIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregPwmIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregPwmIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregPwmIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregPwmIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUartIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUartIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUartIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUartIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUartIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUartIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUartIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUartIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSpiIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSpiIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSpiIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSpiIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSpiIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSpiIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSpiIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSpiIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregGpioIoEnableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregGpioIoEnable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregGpioIoEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregGpioIoEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregGpioIoDisableFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregGpioIoDisable") {
		@Override
		public final void execute(Processor processor) {
			sceSysregGpioIoDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregGpioIoDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_55B18B84Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_55B18B84") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_55B18B84(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_55B18B84(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_2112E686Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_2112E686") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_2112E686(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_2112E686(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_7B9E9A53Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_7B9E9A53") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_7B9E9A53(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_7B9E9A53(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_7BDF0556Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_7BDF0556") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_7BDF0556(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_7BDF0556(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_8D0FED1EFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_8D0FED1E") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_8D0FED1E(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_8D0FED1E(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_A46E9CA8Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_A46E9CA8") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_A46E9CA8(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_A46E9CA8(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbGetConnectStatusFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbGetConnectStatus") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbGetConnectStatus(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbGetConnectStatus(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbQueryIntrFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbQueryIntr") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbQueryIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbQueryIntr(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregUsbAcquireIntrFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregUsbAcquireIntr") {
		@Override
		public final void execute(Processor processor) {
			sceSysregUsbAcquireIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregUsbAcquireIntr(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifGetConnectStatusFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifGetConnectStatus") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifGetConnectStatus(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifGetConnectStatus(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifQueryConnectIntrFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifQueryConnectIntr") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifQueryConnectIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifQueryConnectIntr(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregMsifAcquireConnectIntrFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregMsifAcquireConnectIntr") {
		@Override
		public final void execute(Processor processor) {
			sceSysregMsifAcquireConnectIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregMsifAcquireConnectIntr(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregIntrInitFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregIntrInit") {
		@Override
		public final void execute(Processor processor) {
			sceSysregIntrInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregIntrInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregIntrEndFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregIntrEnd") {
		@Override
		public final void execute(Processor processor) {
			sceSysregIntrEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregIntrEnd(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregInterruptToOtherFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregInterruptToOther") {
		@Override
		public final void execute(Processor processor) {
			sceSysregInterruptToOther(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregInterruptToOther(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSemaTryLockFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSemaTryLock") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSemaTryLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSemaTryLock(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregSemaUnlockFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregSemaUnlock") {
		@Override
		public final void execute(Processor processor) {
			sceSysregSemaUnlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregSemaUnlock(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregEnableIntrFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregEnableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceSysregEnableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregEnableIntr(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregDisableIntrFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregDisableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceSysregDisableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregDisableIntr(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysregRequestIntrFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysregRequestIntr") {
		@Override
		public final void execute(Processor processor) {
			sceSysregRequestIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysregRequestIntr(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_5664F8B5Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_5664F8B5") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_5664F8B5(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_5664F8B5(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_44704E1DFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_44704E1D") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_44704E1D(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_44704E1D(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_584AD989Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_584AD989") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_584AD989(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_584AD989(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_377F035FFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_377F035F") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_377F035F(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_377F035F(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_AB3185FDFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_AB3185FD") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_AB3185FD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_AB3185FD(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_0EA487FAFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_0EA487FA") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_0EA487FA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_0EA487FA(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_136E8F5AFunction = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_136E8F5A") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_136E8F5A(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_136E8F5A(processor);";
		}
	};
    
	public final HLEModuleFunction sceSysreg_driver_F4811E00Function = new HLEModuleFunction("sceSysreg_driver", "sceSysreg_driver_F4811E00") {
		@Override
		public final void execute(Processor processor) {
			sceSysreg_driver_F4811E00(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceSysreg_driverModule.sceSysreg_driver_F4811E00(processor);";
		}
	};
    
};
