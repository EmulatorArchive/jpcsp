/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceReg_driver implements HLEModule {
	@Override
	public String getName() { return "sceReg_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceRegInitFunction, 0x98279CF1);
			
			mm.addFunction(sceRegExitFunction, 0x9B25EDF1);
			
			mm.addFunction(sceRegOpenRegistryFunction, 0x92E41280);
			
			mm.addFunction(sceRegCloseRegistryFunction, 0xFA8A5739);
			
			mm.addFunction(sceRegRemoveRegistryFunction, 0xDEDA92BF);
			
			mm.addFunction(sceRegOpenCategoryFunction, 0x1D8A762E);
			
			mm.addFunction(sceRegCloseCategoryFunction, 0x0CAE832B);
			
			mm.addFunction(sceRegFlushRegistryFunction, 0x39461B4D);
			
			mm.addFunction(sceRegFlushCategoryFunction, 0x0D69BF40);
			
			mm.addFunction(sceRegCreateKeyFunction, 0x57641A81);
			
			mm.addFunction(sceRegSetKeyValueFunction, 0x17768E14);
			
			mm.addFunction(sceRegGetKeyInfoFunction, 0xD4475AA8);
			
			mm.addFunction(sceRegGetKeyValueFunction, 0x28A8E98A);
			
			mm.addFunction(sceRegGetKeysNumFunction, 0x2C0DB9DD);
			
			mm.addFunction(sceRegGetKeysFunction, 0x2D211135);
			
			mm.addFunction(sceRegRemoveCategoryFunction, 0x4CA16893);
			
			mm.addFunction(sceRegRemoveKeyFunction, 0x3615BC87);
			
			mm.addFunction(sceRegGetKeyInfoByNameFunction, 0xC5768D02);
			
			mm.addFunction(sceRegGetKeyValueByNameFunction, 0x30BE0259);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceRegInitFunction);
			
			mm.removeFunction(sceRegExitFunction);
			
			mm.removeFunction(sceRegOpenRegistryFunction);
			
			mm.removeFunction(sceRegCloseRegistryFunction);
			
			mm.removeFunction(sceRegRemoveRegistryFunction);
			
			mm.removeFunction(sceRegOpenCategoryFunction);
			
			mm.removeFunction(sceRegCloseCategoryFunction);
			
			mm.removeFunction(sceRegFlushRegistryFunction);
			
			mm.removeFunction(sceRegFlushCategoryFunction);
			
			mm.removeFunction(sceRegCreateKeyFunction);
			
			mm.removeFunction(sceRegSetKeyValueFunction);
			
			mm.removeFunction(sceRegGetKeyInfoFunction);
			
			mm.removeFunction(sceRegGetKeyValueFunction);
			
			mm.removeFunction(sceRegGetKeysNumFunction);
			
			mm.removeFunction(sceRegGetKeysFunction);
			
			mm.removeFunction(sceRegRemoveCategoryFunction);
			
			mm.removeFunction(sceRegRemoveKeyFunction);
			
			mm.removeFunction(sceRegGetKeyInfoByNameFunction);
			
			mm.removeFunction(sceRegGetKeyValueByNameFunction);
			
		}
	}
	
	
	public void sceRegInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegInit [0x98279CF1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegExit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegExit [0x9B25EDF1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegOpenRegistry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegOpenRegistry [0x92E41280]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegCloseRegistry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegCloseRegistry [0xFA8A5739]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegRemoveRegistry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegRemoveRegistry [0xDEDA92BF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegOpenCategory(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegOpenCategory [0x1D8A762E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegCloseCategory(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegCloseCategory [0x0CAE832B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegFlushRegistry(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegFlushRegistry [0x39461B4D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegFlushCategory(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegFlushCategory [0x0D69BF40]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegCreateKey(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegCreateKey [0x57641A81]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegSetKeyValue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegSetKeyValue [0x17768E14]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegGetKeyInfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegGetKeyInfo [0xD4475AA8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegGetKeyValue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegGetKeyValue [0x28A8E98A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegGetKeysNum(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegGetKeysNum [0x2C0DB9DD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegGetKeys(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegGetKeys [0x2D211135]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegRemoveCategory(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegRemoveCategory [0x4CA16893]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegRemoveKey(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegRemoveKey [0x3615BC87]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegGetKeyInfoByName(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegGetKeyInfoByName [0xC5768D02]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceRegGetKeyValueByName(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceRegGetKeyValueByName [0x30BE0259]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceRegInitFunction = new HLEModuleFunction("sceReg_driver", "sceRegInit") {
		@Override
		public final void execute(Processor processor) {
			sceRegInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegExitFunction = new HLEModuleFunction("sceReg_driver", "sceRegExit") {
		@Override
		public final void execute(Processor processor) {
			sceRegExit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegExitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegOpenRegistryFunction = new HLEModuleFunction("sceReg_driver", "sceRegOpenRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegOpenRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegOpenRegistryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegCloseRegistryFunction = new HLEModuleFunction("sceReg_driver", "sceRegCloseRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegCloseRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegCloseRegistryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegRemoveRegistryFunction = new HLEModuleFunction("sceReg_driver", "sceRegRemoveRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegRemoveRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegRemoveRegistryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegOpenCategoryFunction = new HLEModuleFunction("sceReg_driver", "sceRegOpenCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegOpenCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegOpenCategoryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegCloseCategoryFunction = new HLEModuleFunction("sceReg_driver", "sceRegCloseCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegCloseCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegCloseCategoryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegFlushRegistryFunction = new HLEModuleFunction("sceReg_driver", "sceRegFlushRegistry") {
		@Override
		public final void execute(Processor processor) {
			sceRegFlushRegistry(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegFlushRegistryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegFlushCategoryFunction = new HLEModuleFunction("sceReg_driver", "sceRegFlushCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegFlushCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegFlushCategoryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegCreateKeyFunction = new HLEModuleFunction("sceReg_driver", "sceRegCreateKey") {
		@Override
		public final void execute(Processor processor) {
			sceRegCreateKey(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegCreateKeyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegSetKeyValueFunction = new HLEModuleFunction("sceReg_driver", "sceRegSetKeyValue") {
		@Override
		public final void execute(Processor processor) {
			sceRegSetKeyValue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegSetKeyValueFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyInfoFunction = new HLEModuleFunction("sceReg_driver", "sceRegGetKeyInfo") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegGetKeyInfoFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyValueFunction = new HLEModuleFunction("sceReg_driver", "sceRegGetKeyValue") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyValue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegGetKeyValueFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeysNumFunction = new HLEModuleFunction("sceReg_driver", "sceRegGetKeysNum") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeysNum(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegGetKeysNumFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeysFunction = new HLEModuleFunction("sceReg_driver", "sceRegGetKeys") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeys(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegGetKeysFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegRemoveCategoryFunction = new HLEModuleFunction("sceReg_driver", "sceRegRemoveCategory") {
		@Override
		public final void execute(Processor processor) {
			sceRegRemoveCategory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegRemoveCategoryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegRemoveKeyFunction = new HLEModuleFunction("sceReg_driver", "sceRegRemoveKey") {
		@Override
		public final void execute(Processor processor) {
			sceRegRemoveKey(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegRemoveKeyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyInfoByNameFunction = new HLEModuleFunction("sceReg_driver", "sceRegGetKeyInfoByName") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyInfoByName(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegGetKeyInfoByNameFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceRegGetKeyValueByNameFunction = new HLEModuleFunction("sceReg_driver", "sceRegGetKeyValueByName") {
		@Override
		public final void execute(Processor processor) {
			sceRegGetKeyValueByName(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceReg_driver.sceRegGetKeyValueByNameFunction.execute(processor);";
		}
	};
    
};
