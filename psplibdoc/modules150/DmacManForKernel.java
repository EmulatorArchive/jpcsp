/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class DmacManForKernel implements HLEModule {
	@Override
	public String getName() { return "DmacManForKernel"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceKernelDmaExitFunction, 0x1C46158A);
			
			mm.addFunction(sceKernelDmaChExcludeFunction, 0xD8BC3120);
			
			mm.addFunction(sceKernelDmaChReserveFunction, 0x2E3BC333);
			
			mm.addFunction(sceKernelDmaSoftRequestFunction, 0x7B9634E1);
			
			mm.addFunction(sceKernelDmaOpAllocFunction, 0x59615199);
			
			mm.addFunction(sceKernelDmaOpFreeFunction, 0x745E19EF);
			
			mm.addFunction(sceKernelDmaOpAssignFunction, 0xF64BAB99);
			
			mm.addFunction(sceKernelDmaOpEnQueueFunction, 0x3BDEA96C);
			
			mm.addFunction(sceKernelDmaOpDeQueueFunction, 0x92700CCD);
			
			mm.addFunction(sceKernelDmaOpAllCancelFunction, 0xA84B084B);
			
			mm.addFunction(sceKernelDmaOpSetCallbackFunction, 0xD0358BE9);
			
			mm.addFunction(sceKernelDmaOpSetupMemcpyFunction, 0x3FAD5844);
			
			mm.addFunction(sceKernelDmaOpSetupNormalFunction, 0xCE467D9B);
			
			mm.addFunction(sceKernelDmaOpSetupLinkFunction, 0x7D21A2EF);
			
			mm.addFunction(sceKernelDmaOpSyncFunction, 0xDB286D65);
			
			mm.addFunction(sceKernelDmaOpQuitFunction, 0x5AF32783);
			
			mm.addFunction(DmacManForKernel_E18A93A5Function, 0xE18A93A5);
			
			mm.addFunction(sceKernelDmaOpAssignMultipleFunction, 0x904110FC);
			
			mm.addFunction(sceKernelDmaOnDebugModeFunction, 0xD3F62265);
			
			mm.addFunction(sceKernelDmaOpFreeLinkFunction, 0xA893DA2C);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceKernelDmaExitFunction);
			
			mm.removeFunction(sceKernelDmaChExcludeFunction);
			
			mm.removeFunction(sceKernelDmaChReserveFunction);
			
			mm.removeFunction(sceKernelDmaSoftRequestFunction);
			
			mm.removeFunction(sceKernelDmaOpAllocFunction);
			
			mm.removeFunction(sceKernelDmaOpFreeFunction);
			
			mm.removeFunction(sceKernelDmaOpAssignFunction);
			
			mm.removeFunction(sceKernelDmaOpEnQueueFunction);
			
			mm.removeFunction(sceKernelDmaOpDeQueueFunction);
			
			mm.removeFunction(sceKernelDmaOpAllCancelFunction);
			
			mm.removeFunction(sceKernelDmaOpSetCallbackFunction);
			
			mm.removeFunction(sceKernelDmaOpSetupMemcpyFunction);
			
			mm.removeFunction(sceKernelDmaOpSetupNormalFunction);
			
			mm.removeFunction(sceKernelDmaOpSetupLinkFunction);
			
			mm.removeFunction(sceKernelDmaOpSyncFunction);
			
			mm.removeFunction(sceKernelDmaOpQuitFunction);
			
			mm.removeFunction(DmacManForKernel_E18A93A5Function);
			
			mm.removeFunction(sceKernelDmaOpAssignMultipleFunction);
			
			mm.removeFunction(sceKernelDmaOnDebugModeFunction);
			
			mm.removeFunction(sceKernelDmaOpFreeLinkFunction);
			
		}
	}
	
	
	public void sceKernelDmaExit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaExit [0x1C46158A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaChExclude(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaChExclude [0xD8BC3120]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaChReserve(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaChReserve [0x2E3BC333]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaSoftRequest(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaSoftRequest [0x7B9634E1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpAlloc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpAlloc [0x59615199]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpFree(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpFree [0x745E19EF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpAssign(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpAssign [0xF64BAB99]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpEnQueue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpEnQueue [0x3BDEA96C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpDeQueue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpDeQueue [0x92700CCD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpAllCancel(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpAllCancel [0xA84B084B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpSetCallback(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpSetCallback [0xD0358BE9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpSetupMemcpy(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpSetupMemcpy [0x3FAD5844]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpSetupNormal(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpSetupNormal [0xCE467D9B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpSetupLink(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpSetupLink [0x7D21A2EF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpSync(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpSync [0xDB286D65]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpQuit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpQuit [0x5AF32783]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void DmacManForKernel_E18A93A5(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function DmacManForKernel_E18A93A5 [0xE18A93A5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpAssignMultiple(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpAssignMultiple [0x904110FC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOnDebugMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOnDebugMode [0xD3F62265]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDmaOpFreeLink(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDmaOpFreeLink [0xA893DA2C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceKernelDmaExitFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaExit") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaExit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaExitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaChExcludeFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaChExclude") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaChExclude(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaChExcludeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaChReserveFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaChReserve") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaChReserve(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaChReserveFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaSoftRequestFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaSoftRequest") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaSoftRequest(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaSoftRequestFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpAllocFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpAlloc") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpAlloc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpAllocFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpFreeFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpFree") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpFree(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpFreeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpAssignFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpAssign") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpAssign(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpAssignFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpEnQueueFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpEnQueue") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpEnQueue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpEnQueueFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpDeQueueFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpDeQueue") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpDeQueue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpDeQueueFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpAllCancelFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpAllCancel") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpAllCancel(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpAllCancelFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpSetCallbackFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpSetCallback") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpSetCallback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpSetCallbackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpSetupMemcpyFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpSetupMemcpy") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpSetupMemcpy(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpSetupMemcpyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpSetupNormalFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpSetupNormal") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpSetupNormal(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpSetupNormalFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpSetupLinkFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpSetupLink") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpSetupLink(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpSetupLinkFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpSyncFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpSync") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpSync(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpSyncFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpQuitFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpQuit") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpQuit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpQuitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction DmacManForKernel_E18A93A5Function = new HLEModuleFunction("DmacManForKernel", "DmacManForKernel_E18A93A5") {
		@Override
		public final void execute(Processor processor) {
			DmacManForKernel_E18A93A5(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.DmacManForKernel_E18A93A5Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpAssignMultipleFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpAssignMultiple") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpAssignMultiple(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpAssignMultipleFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOnDebugModeFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOnDebugMode") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOnDebugMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOnDebugModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDmaOpFreeLinkFunction = new HLEModuleFunction("DmacManForKernel", "sceKernelDmaOpFreeLink") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDmaOpFreeLink(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.DmacManForKernel.sceKernelDmaOpFreeLinkFunction.execute(processor);";
		}
	};
    
};
