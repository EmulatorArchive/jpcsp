<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output method="text"/>
	<xsl:template match="/">#!/usr/bin/perl
		<xsl:param name="version" select="PSPLIBDOC/VERSION" />
		<xsl:param name="old_version" select="PSPLIBDOC/OLDVERSION" />
mkdir("modules<xsl:value-of select="$version"/>", 0777);
chdir("modules<xsl:value-of select="$version"/>");
		<xsl:for-each select="PSPLIBDOC/PRXFILES/PRXFILE">
			<xsl:for-each select="LIBRARIES/LIBRARY">
open(OUT,"&gt;<xsl:value-of select="NAME"/>.java") || die "Can't create new file, error = $!\n";
$content = &lt;&lt;ENDOFMULTILINESTRING;
/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */

package jpcsp.HLE.modules<xsl:value-of select="$version"/>;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class <xsl:value-of select="NAME"/><xsl:choose><xsl:when test="$old_version != '-'"><xsl:text> extends </xsl:text><xsl:value-of select="$old_version"/></xsl:when><xsl:otherwise><xsl:text> implements HLEModule</xsl:text></xsl:otherwise></xsl:choose> {
	\@Override
	public String getName() { return "<xsl:value-of select="NAME"/>"; }
	
	\@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= <xsl:value-of select="$version"/>) {
		
			<xsl:for-each select="FUNCTIONS/FUNCTION">mm.addFunction(<xsl:value-of select="NAME"/>Function, <xsl:value-of select="NID"/>);
			</xsl:for-each>
		}
	}
	
	\@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= <xsl:value-of select="$version"/>) {
		
			<xsl:for-each select="FUNCTIONS/FUNCTION">mm.removeFunction(<xsl:value-of select="NAME"/>Function);
			</xsl:for-each>
		}
	}
	
	<xsl:for-each select="FUNCTIONS/FUNCTION">
	public void <xsl:value-of select="NAME"/>(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function <xsl:value-of select="NAME"/> [<xsl:value-of select="NID"/>]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result &amp; 0xffffffff);  cpu.gpr[3] = (int)(result &sup;&sup;&sup; 32); cpu.fpr[0] = result;
	}
    </xsl:for-each>
    
	<xsl:for-each select="FUNCTIONS/FUNCTION">
	public final HLEModuleFunction <xsl:value-of select="NAME"/>Function = new HLEModuleFunction("<xsl:value-of select="../../NAME"/>", "<xsl:value-of select="NAME"/>") {
		\@Override
		public final void execute(Processor processor) {
			<xsl:value-of select="NAME"/>(processor);
		}
		\@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.<xsl:value-of select="../../NAME"/>Module.<xsl:value-of select="NAME"/>(processor);";
		}
	};
    </xsl:for-each>
};
ENDOFMULTILINESTRING
print OUT $content;
close(OUT);
    </xsl:for-each>
</xsl:for-each>
	</xsl:template>
</xsl:stylesheet>
