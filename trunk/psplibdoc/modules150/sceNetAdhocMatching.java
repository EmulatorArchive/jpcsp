/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNetAdhocMatching implements HLEModule {
	@Override
	public String getName() { return "sceNetAdhocMatching"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceNetAdhocMatchingInitFunction, 0x2A2A1E07);
			
			mm.addFunction(sceNetAdhocMatchingTermFunction, 0x7945ECDA);
			
			mm.addFunction(sceNetAdhocMatchingCreateFunction, 0xCA5EDA6F);
			
			mm.addFunction(sceNetAdhocMatchingStartFunction, 0x93EF3843);
			
			mm.addFunction(sceNetAdhocMatchingStopFunction, 0x32B156B3);
			
			mm.addFunction(sceNetAdhocMatchingDeleteFunction, 0xF16EAF4F);
			
			mm.addFunction(sceNetAdhocMatchingSelectTargetFunction, 0x5E3D4B79);
			
			mm.addFunction(sceNetAdhocMatchingCancelTargetFunction, 0xEA3C6108);
			
			mm.addFunction(sceNetAdhocMatchingSetHelloOptFunction, 0xB58E61B7);
			
			mm.addFunction(sceNetAdhocMatchingGetHelloOptFunction, 0xB5D96C2A);
			
			mm.addFunction(sceNetAdhocMatchingGetMembersFunction, 0xC58BCD9E);
			
			mm.addFunction(sceNetAdhocMatchingGetPoolMaxAllocFunction, 0x40F8F435);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceNetAdhocMatchingInitFunction);
			
			mm.removeFunction(sceNetAdhocMatchingTermFunction);
			
			mm.removeFunction(sceNetAdhocMatchingCreateFunction);
			
			mm.removeFunction(sceNetAdhocMatchingStartFunction);
			
			mm.removeFunction(sceNetAdhocMatchingStopFunction);
			
			mm.removeFunction(sceNetAdhocMatchingDeleteFunction);
			
			mm.removeFunction(sceNetAdhocMatchingSelectTargetFunction);
			
			mm.removeFunction(sceNetAdhocMatchingCancelTargetFunction);
			
			mm.removeFunction(sceNetAdhocMatchingSetHelloOptFunction);
			
			mm.removeFunction(sceNetAdhocMatchingGetHelloOptFunction);
			
			mm.removeFunction(sceNetAdhocMatchingGetMembersFunction);
			
			mm.removeFunction(sceNetAdhocMatchingGetPoolMaxAllocFunction);
			
		}
	}
	
	
	public void sceNetAdhocMatchingInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingInit [0x2A2A1E07]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingTerm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingTerm [0x7945ECDA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingCreate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingCreate [0xCA5EDA6F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingStart(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingStart [0x93EF3843]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingStop(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingStop [0x32B156B3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingDelete(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingDelete [0xF16EAF4F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingSelectTarget(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingSelectTarget [0x5E3D4B79]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingCancelTarget(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingCancelTarget [0xEA3C6108]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingSetHelloOpt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingSetHelloOpt [0xB58E61B7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingGetHelloOpt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingGetHelloOpt [0xB5D96C2A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingGetMembers(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingGetMembers [0xC58BCD9E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocMatchingGetPoolMaxAlloc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetAdhocMatchingGetPoolMaxAlloc [0x40F8F435]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNetAdhocMatchingInitFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingInit") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingTermFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingTerm") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingTermFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingCreateFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingCreate") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingCreate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingCreateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingStartFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingStart") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingStart(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingStartFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingStopFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingStop") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingStopFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingDeleteFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingDelete") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingDelete(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingDeleteFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingSelectTargetFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingSelectTarget") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingSelectTarget(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingSelectTargetFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingCancelTargetFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingCancelTarget") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingCancelTarget(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingCancelTargetFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingSetHelloOptFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingSetHelloOpt") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingSetHelloOpt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingSetHelloOptFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingGetHelloOptFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingGetHelloOpt") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingGetHelloOpt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingGetHelloOptFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingGetMembersFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingGetMembers") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingGetMembers(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingGetMembersFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocMatchingGetPoolMaxAllocFunction = new HLEModuleFunction("sceNetAdhocMatching", "sceNetAdhocMatchingGetPoolMaxAlloc") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocMatchingGetPoolMaxAlloc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetAdhocMatching.sceNetAdhocMatchingGetPoolMaxAllocFunction.execute(processor);";
		}
	};
    
};
