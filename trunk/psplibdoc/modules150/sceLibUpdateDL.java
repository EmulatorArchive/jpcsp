/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceLibUpdateDL implements HLEModule {
	@Override
	public String getName() { return "sceLibUpdateDL"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceUpdateDownloadInitFunction, 0xFC1AB540);
			
			mm.addFunction(sceUpdateDownloadInitExFunction, 0xF6690A9A);
			
			mm.addFunction(sceLibUpdateDL_88FF3935Function, 0x88FF3935);
			
			mm.addFunction(sceUpdateDownloadSetServerRegionFunction, 0xB5DB018D);
			
			mm.addFunction(sceLibUpdateDL_F7E66CB4Function, 0xF7E66CB4);
			
			mm.addFunction(sceUpdateDownloadSetVersionFunction, 0xC1AF1076);
			
			mm.addFunction(sceUpdateDownloadEndFunction, 0xD6A09757);
			
			mm.addFunction(sceUpdateDownloadConnectServerFunction, 0xFD675E8D);
			
			mm.addFunction(sceUpdateDownloadReadDataFunction, 0xFA9AA797);
			
			mm.addFunction(sceUpdateDownloadAbortFunction, 0x4F49C9C1);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceUpdateDownloadInitFunction);
			
			mm.removeFunction(sceUpdateDownloadInitExFunction);
			
			mm.removeFunction(sceLibUpdateDL_88FF3935Function);
			
			mm.removeFunction(sceUpdateDownloadSetServerRegionFunction);
			
			mm.removeFunction(sceLibUpdateDL_F7E66CB4Function);
			
			mm.removeFunction(sceUpdateDownloadSetVersionFunction);
			
			mm.removeFunction(sceUpdateDownloadEndFunction);
			
			mm.removeFunction(sceUpdateDownloadConnectServerFunction);
			
			mm.removeFunction(sceUpdateDownloadReadDataFunction);
			
			mm.removeFunction(sceUpdateDownloadAbortFunction);
			
		}
	}
	
	
	public void sceUpdateDownloadInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadInit [0xFC1AB540]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUpdateDownloadInitEx(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadInitEx [0xF6690A9A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceLibUpdateDL_88FF3935(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceLibUpdateDL_88FF3935 [0x88FF3935]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUpdateDownloadSetServerRegion(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadSetServerRegion [0xB5DB018D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceLibUpdateDL_F7E66CB4(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceLibUpdateDL_F7E66CB4 [0xF7E66CB4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUpdateDownloadSetVersion(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadSetVersion [0xC1AF1076]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUpdateDownloadEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadEnd [0xD6A09757]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUpdateDownloadConnectServer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadConnectServer [0xFD675E8D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUpdateDownloadReadData(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadReadData [0xFA9AA797]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceUpdateDownloadAbort(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceUpdateDownloadAbort [0x4F49C9C1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceUpdateDownloadInitFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadInit") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUpdateDownloadInitExFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadInitEx") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadInitEx(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadInitExFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceLibUpdateDL_88FF3935Function = new HLEModuleFunction("sceLibUpdateDL", "sceLibUpdateDL_88FF3935") {
		@Override
		public final void execute(Processor processor) {
			sceLibUpdateDL_88FF3935(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceLibUpdateDL_88FF3935Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUpdateDownloadSetServerRegionFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadSetServerRegion") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadSetServerRegion(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadSetServerRegionFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceLibUpdateDL_F7E66CB4Function = new HLEModuleFunction("sceLibUpdateDL", "sceLibUpdateDL_F7E66CB4") {
		@Override
		public final void execute(Processor processor) {
			sceLibUpdateDL_F7E66CB4(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceLibUpdateDL_F7E66CB4Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUpdateDownloadSetVersionFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadSetVersion") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadSetVersion(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadSetVersionFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUpdateDownloadEndFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadEnd") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUpdateDownloadConnectServerFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadConnectServer") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadConnectServer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadConnectServerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUpdateDownloadReadDataFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadReadData") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadReadData(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadReadDataFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceUpdateDownloadAbortFunction = new HLEModuleFunction("sceLibUpdateDL", "sceUpdateDownloadAbort") {
		@Override
		public final void execute(Processor processor) {
			sceUpdateDownloadAbort(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceLibUpdateDL.sceUpdateDownloadAbortFunction.execute(processor);";
		}
	};
    
};
