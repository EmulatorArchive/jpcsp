/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceMScm_driver implements HLEModule {
	@Override
	public String getName() { return "sceMScm_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceMScmStartModuleFunction, 0x4E923738);
			
			mm.addFunction(sceMScmStopModuleFunction, 0x68C14F25);
			
			mm.addFunction(sceMScmRegisterCLDMFunction, 0x5BAAB238);
			
			mm.addFunction(sceMScmUnRegisterCLDMFunction, 0x9A5CB5CC);
			
			mm.addFunction(sceMScmGetCLDMFunction, 0x54B3A3F1);
			
			mm.addFunction(sceMScm_driver_5AB92658Function, 0x5AB92658);
			
			mm.addFunction(sceMScmRegisterCLDFunction, 0x12BD8FEC);
			
			mm.addFunction(sceMScmUnRegisterCLDFunction, 0x08A1EC6B);
			
			mm.addFunction(sceMScmDetachCLDFunction, 0x4451D813);
			
			mm.addFunction(sceMScm_driver_0D8D6A54Function, 0x0D8D6A54);
			
			mm.addFunction(sceMScm_driver_F0CC24D1Function, 0xF0CC24D1);
			
			mm.addFunction(sceMScm_driver_7B5396BAFunction, 0x7B5396BA);
			
			mm.addFunction(sceMScmReadMSRegFunction, 0x42A40895);
			
			mm.addFunction(sceMScmWriteMSRegFunction, 0x0128147B);
			
			mm.addFunction(sceMScm_driver_CBB2BF6FFunction, 0xCBB2BF6F);
			
			mm.addFunction(sceMScm_driver_6C8AEF0BFunction, 0x6C8AEF0B);
			
			mm.addFunction(sceMScm_driver_F1133DAFFunction, 0xF1133DAF);
			
			mm.addFunction(sceMScmSendTPCFunction, 0x907D7766);
			
			mm.addFunction(sceMScmSendTPCDMAFunction, 0x46AAC4E5);
			
			mm.addFunction(sceMScmWaitHCIntrFunction, 0x2D7C40FA);
			
			mm.addFunction(sceMScmHCLastStatusFunction, 0x0A054CDA);
			
			mm.addFunction(sceMScmWriteDataPIOFunction, 0x21183216);
			
			mm.addFunction(sceMScmReadDataPIOFunction, 0xBE455B5D);
			
			mm.addFunction(sceMScmStartReadDataDMAFunction, 0xDE188BB6);
			
			mm.addFunction(sceMScmStartWriteDataDMAFunction, 0x97290A44);
			
			mm.addFunction(sceMScm_driver_B1D1C718Function, 0xB1D1C718);
			
			mm.addFunction(sceMScm_driver_D6DB3199Function, 0xD6DB3199);
			
			mm.addFunction(sceMScmSetSlotPowerFunction, 0xF1924A06);
			
			mm.addFunction(sceMScmGetSlotPowerFunction, 0xFCD92C74);
			
			mm.addFunction(sceMScmGetSlotStateFunction, 0x2AD0A649);
			
			mm.addFunction(sceMScmResetHCFunction, 0xAA67D87A);
			
			mm.addFunction(sceMScm_driver_36921225Function, 0x36921225);
			
			mm.addFunction(sceMScm_driver_EF42A4A3Function, 0xEF42A4A3);
			
			mm.addFunction(sceMScmTPCGetIntFunction, 0xFF6C50D8);
			
			mm.addFunction(sceMScm_driver_34124B97Function, 0x34124B97);
			
			mm.addFunction(sceMScmTPCSetCmdFunction, 0xF82AF926);
			
			mm.addFunction(sceMScm_driver_3FFE76E5Function, 0x3FFE76E5);
			
			mm.addFunction(sceMScmTPCExSetCmdFunction, 0x4FA42259);
			
			mm.addFunction(sceMScm_driver_494FB570Function, 0x494FB570);
			
			mm.addFunction(sceMScm_driver_C003705DFunction, 0xC003705D);
			
			mm.addFunction(sceMScm_driver_4E4C3099Function, 0x4E4C3099);
			
			mm.addFunction(sceMScm_driver_6F4F7E4CFunction, 0x6F4F7E4C);
			
			mm.addFunction(sceMScm_driver_CFD8F662Function, 0xCFD8F662);
			
			mm.addFunction(sceMScm_driver_E24B5D0CFunction, 0xE24B5D0C);
			
			mm.addFunction(sceMScm_driver_B01C378CFunction, 0xB01C378C);
			
			mm.addFunction(sceMScm_driver_18DD6E90Function, 0x18DD6E90);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceMScmStartModuleFunction);
			
			mm.removeFunction(sceMScmStopModuleFunction);
			
			mm.removeFunction(sceMScmRegisterCLDMFunction);
			
			mm.removeFunction(sceMScmUnRegisterCLDMFunction);
			
			mm.removeFunction(sceMScmGetCLDMFunction);
			
			mm.removeFunction(sceMScm_driver_5AB92658Function);
			
			mm.removeFunction(sceMScmRegisterCLDFunction);
			
			mm.removeFunction(sceMScmUnRegisterCLDFunction);
			
			mm.removeFunction(sceMScmDetachCLDFunction);
			
			mm.removeFunction(sceMScm_driver_0D8D6A54Function);
			
			mm.removeFunction(sceMScm_driver_F0CC24D1Function);
			
			mm.removeFunction(sceMScm_driver_7B5396BAFunction);
			
			mm.removeFunction(sceMScmReadMSRegFunction);
			
			mm.removeFunction(sceMScmWriteMSRegFunction);
			
			mm.removeFunction(sceMScm_driver_CBB2BF6FFunction);
			
			mm.removeFunction(sceMScm_driver_6C8AEF0BFunction);
			
			mm.removeFunction(sceMScm_driver_F1133DAFFunction);
			
			mm.removeFunction(sceMScmSendTPCFunction);
			
			mm.removeFunction(sceMScmSendTPCDMAFunction);
			
			mm.removeFunction(sceMScmWaitHCIntrFunction);
			
			mm.removeFunction(sceMScmHCLastStatusFunction);
			
			mm.removeFunction(sceMScmWriteDataPIOFunction);
			
			mm.removeFunction(sceMScmReadDataPIOFunction);
			
			mm.removeFunction(sceMScmStartReadDataDMAFunction);
			
			mm.removeFunction(sceMScmStartWriteDataDMAFunction);
			
			mm.removeFunction(sceMScm_driver_B1D1C718Function);
			
			mm.removeFunction(sceMScm_driver_D6DB3199Function);
			
			mm.removeFunction(sceMScmSetSlotPowerFunction);
			
			mm.removeFunction(sceMScmGetSlotPowerFunction);
			
			mm.removeFunction(sceMScmGetSlotStateFunction);
			
			mm.removeFunction(sceMScmResetHCFunction);
			
			mm.removeFunction(sceMScm_driver_36921225Function);
			
			mm.removeFunction(sceMScm_driver_EF42A4A3Function);
			
			mm.removeFunction(sceMScmTPCGetIntFunction);
			
			mm.removeFunction(sceMScm_driver_34124B97Function);
			
			mm.removeFunction(sceMScmTPCSetCmdFunction);
			
			mm.removeFunction(sceMScm_driver_3FFE76E5Function);
			
			mm.removeFunction(sceMScmTPCExSetCmdFunction);
			
			mm.removeFunction(sceMScm_driver_494FB570Function);
			
			mm.removeFunction(sceMScm_driver_C003705DFunction);
			
			mm.removeFunction(sceMScm_driver_4E4C3099Function);
			
			mm.removeFunction(sceMScm_driver_6F4F7E4CFunction);
			
			mm.removeFunction(sceMScm_driver_CFD8F662Function);
			
			mm.removeFunction(sceMScm_driver_E24B5D0CFunction);
			
			mm.removeFunction(sceMScm_driver_B01C378CFunction);
			
			mm.removeFunction(sceMScm_driver_18DD6E90Function);
			
		}
	}
	
	
	public void sceMScmStartModule(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmStartModule [0x4E923738]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmStopModule(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmStopModule [0x68C14F25]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmRegisterCLDM(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmRegisterCLDM [0x5BAAB238]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmUnRegisterCLDM(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmUnRegisterCLDM [0x9A5CB5CC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmGetCLDM(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmGetCLDM [0x54B3A3F1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_5AB92658(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_5AB92658 [0x5AB92658]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmRegisterCLD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmRegisterCLD [0x12BD8FEC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmUnRegisterCLD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmUnRegisterCLD [0x08A1EC6B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmDetachCLD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmDetachCLD [0x4451D813]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_0D8D6A54(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_0D8D6A54 [0x0D8D6A54]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_F0CC24D1(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_F0CC24D1 [0xF0CC24D1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_7B5396BA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_7B5396BA [0x7B5396BA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmReadMSReg(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmReadMSReg [0x42A40895]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmWriteMSReg(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmWriteMSReg [0x0128147B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_CBB2BF6F(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_CBB2BF6F [0xCBB2BF6F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_6C8AEF0B(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_6C8AEF0B [0x6C8AEF0B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_F1133DAF(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_F1133DAF [0xF1133DAF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmSendTPC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmSendTPC [0x907D7766]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmSendTPCDMA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmSendTPCDMA [0x46AAC4E5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmWaitHCIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmWaitHCIntr [0x2D7C40FA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmHCLastStatus(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmHCLastStatus [0x0A054CDA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmWriteDataPIO(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmWriteDataPIO [0x21183216]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmReadDataPIO(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmReadDataPIO [0xBE455B5D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmStartReadDataDMA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmStartReadDataDMA [0xDE188BB6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmStartWriteDataDMA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmStartWriteDataDMA [0x97290A44]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_B1D1C718(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_B1D1C718 [0xB1D1C718]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_D6DB3199(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_D6DB3199 [0xD6DB3199]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmSetSlotPower(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmSetSlotPower [0xF1924A06]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmGetSlotPower(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmGetSlotPower [0xFCD92C74]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmGetSlotState(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmGetSlotState [0x2AD0A649]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmResetHC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmResetHC [0xAA67D87A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_36921225(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_36921225 [0x36921225]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_EF42A4A3(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_EF42A4A3 [0xEF42A4A3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmTPCGetInt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmTPCGetInt [0xFF6C50D8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_34124B97(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_34124B97 [0x34124B97]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmTPCSetCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmTPCSetCmd [0xF82AF926]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_3FFE76E5(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_3FFE76E5 [0x3FFE76E5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScmTPCExSetCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScmTPCExSetCmd [0x4FA42259]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_494FB570(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_494FB570 [0x494FB570]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_C003705D(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_C003705D [0xC003705D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_4E4C3099(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_4E4C3099 [0x4E4C3099]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_6F4F7E4C(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_6F4F7E4C [0x6F4F7E4C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_CFD8F662(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_CFD8F662 [0xCFD8F662]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_E24B5D0C(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_E24B5D0C [0xE24B5D0C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_B01C378C(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_B01C378C [0xB01C378C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMScm_driver_18DD6E90(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMScm_driver_18DD6E90 [0x18DD6E90]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceMScmStartModuleFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmStartModule") {
		@Override
		public final void execute(Processor processor) {
			sceMScmStartModule(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmStartModuleFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmStopModuleFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmStopModule") {
		@Override
		public final void execute(Processor processor) {
			sceMScmStopModule(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmStopModuleFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmRegisterCLDMFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmRegisterCLDM") {
		@Override
		public final void execute(Processor processor) {
			sceMScmRegisterCLDM(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmRegisterCLDMFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmUnRegisterCLDMFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmUnRegisterCLDM") {
		@Override
		public final void execute(Processor processor) {
			sceMScmUnRegisterCLDM(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmUnRegisterCLDMFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmGetCLDMFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmGetCLDM") {
		@Override
		public final void execute(Processor processor) {
			sceMScmGetCLDM(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmGetCLDMFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_5AB92658Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_5AB92658") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_5AB92658(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_5AB92658Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmRegisterCLDFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmRegisterCLD") {
		@Override
		public final void execute(Processor processor) {
			sceMScmRegisterCLD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmRegisterCLDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmUnRegisterCLDFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmUnRegisterCLD") {
		@Override
		public final void execute(Processor processor) {
			sceMScmUnRegisterCLD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmUnRegisterCLDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmDetachCLDFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmDetachCLD") {
		@Override
		public final void execute(Processor processor) {
			sceMScmDetachCLD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmDetachCLDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_0D8D6A54Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_0D8D6A54") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_0D8D6A54(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_0D8D6A54Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_F0CC24D1Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_F0CC24D1") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_F0CC24D1(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_F0CC24D1Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_7B5396BAFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_7B5396BA") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_7B5396BA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_7B5396BAFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmReadMSRegFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmReadMSReg") {
		@Override
		public final void execute(Processor processor) {
			sceMScmReadMSReg(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmReadMSRegFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmWriteMSRegFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmWriteMSReg") {
		@Override
		public final void execute(Processor processor) {
			sceMScmWriteMSReg(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmWriteMSRegFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_CBB2BF6FFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_CBB2BF6F") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_CBB2BF6F(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_CBB2BF6FFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_6C8AEF0BFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_6C8AEF0B") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_6C8AEF0B(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_6C8AEF0BFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_F1133DAFFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_F1133DAF") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_F1133DAF(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_F1133DAFFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmSendTPCFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmSendTPC") {
		@Override
		public final void execute(Processor processor) {
			sceMScmSendTPC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmSendTPCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmSendTPCDMAFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmSendTPCDMA") {
		@Override
		public final void execute(Processor processor) {
			sceMScmSendTPCDMA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmSendTPCDMAFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmWaitHCIntrFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmWaitHCIntr") {
		@Override
		public final void execute(Processor processor) {
			sceMScmWaitHCIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmWaitHCIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmHCLastStatusFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmHCLastStatus") {
		@Override
		public final void execute(Processor processor) {
			sceMScmHCLastStatus(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmHCLastStatusFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmWriteDataPIOFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmWriteDataPIO") {
		@Override
		public final void execute(Processor processor) {
			sceMScmWriteDataPIO(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmWriteDataPIOFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmReadDataPIOFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmReadDataPIO") {
		@Override
		public final void execute(Processor processor) {
			sceMScmReadDataPIO(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmReadDataPIOFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmStartReadDataDMAFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmStartReadDataDMA") {
		@Override
		public final void execute(Processor processor) {
			sceMScmStartReadDataDMA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmStartReadDataDMAFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmStartWriteDataDMAFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmStartWriteDataDMA") {
		@Override
		public final void execute(Processor processor) {
			sceMScmStartWriteDataDMA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmStartWriteDataDMAFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_B1D1C718Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_B1D1C718") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_B1D1C718(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_B1D1C718Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_D6DB3199Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_D6DB3199") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_D6DB3199(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_D6DB3199Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmSetSlotPowerFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmSetSlotPower") {
		@Override
		public final void execute(Processor processor) {
			sceMScmSetSlotPower(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmSetSlotPowerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmGetSlotPowerFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmGetSlotPower") {
		@Override
		public final void execute(Processor processor) {
			sceMScmGetSlotPower(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmGetSlotPowerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmGetSlotStateFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmGetSlotState") {
		@Override
		public final void execute(Processor processor) {
			sceMScmGetSlotState(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmGetSlotStateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmResetHCFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmResetHC") {
		@Override
		public final void execute(Processor processor) {
			sceMScmResetHC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmResetHCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_36921225Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_36921225") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_36921225(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_36921225Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_EF42A4A3Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_EF42A4A3") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_EF42A4A3(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_EF42A4A3Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmTPCGetIntFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmTPCGetInt") {
		@Override
		public final void execute(Processor processor) {
			sceMScmTPCGetInt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmTPCGetIntFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_34124B97Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_34124B97") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_34124B97(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_34124B97Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmTPCSetCmdFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmTPCSetCmd") {
		@Override
		public final void execute(Processor processor) {
			sceMScmTPCSetCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmTPCSetCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_3FFE76E5Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_3FFE76E5") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_3FFE76E5(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_3FFE76E5Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScmTPCExSetCmdFunction = new HLEModuleFunction("sceMScm_driver", "sceMScmTPCExSetCmd") {
		@Override
		public final void execute(Processor processor) {
			sceMScmTPCExSetCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScmTPCExSetCmdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_494FB570Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_494FB570") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_494FB570(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_494FB570Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_C003705DFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_C003705D") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_C003705D(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_C003705DFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_4E4C3099Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_4E4C3099") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_4E4C3099(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_4E4C3099Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_6F4F7E4CFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_6F4F7E4C") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_6F4F7E4C(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_6F4F7E4CFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_CFD8F662Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_CFD8F662") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_CFD8F662(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_CFD8F662Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_E24B5D0CFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_E24B5D0C") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_E24B5D0C(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_E24B5D0CFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_B01C378CFunction = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_B01C378C") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_B01C378C(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_B01C378CFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMScm_driver_18DD6E90Function = new HLEModuleFunction("sceMScm_driver", "sceMScm_driver_18DD6E90") {
		@Override
		public final void execute(Processor processor) {
			sceMScm_driver_18DD6E90(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMScm_driver.sceMScm_driver_18DD6E90Function.execute(processor);";
		}
	};
    
};
