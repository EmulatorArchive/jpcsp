/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceMSAudio_driver implements HLEModule {
	@Override
	public String getName() { return "sceMSAudio_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceMSAudioInitFunction, 0x757F4FD3);
			
			mm.addFunction(sceMSAudioEndFunction, 0x3872FBE5);
			
			mm.addFunction(sceMSAudioAuthFunction, 0x107D83D4);
			
			mm.addFunction(sceMSAudio_driver_E8B25D38Function, 0xE8B25D38);
			
			mm.addFunction(sceMSAudioCheckICVFunction, 0x47F7DAFC);
			
			mm.addFunction(sceMSAudioCheckICVnFunction, 0x7B953C1A);
			
			mm.addFunction(sceMSAudio_driver_A18A1DF6Function, 0xA18A1DF6);
			
			mm.addFunction(sceMSAudioDeauthFunction, 0x80BD1592);
			
			mm.addFunction(sceMSAudio_driver_5D1C9867Function, 0x5D1C9867);
			
			mm.addFunction(sceMSAudio_driver_38178F2FFunction, 0x38178F2F);
			
			mm.addFunction(sceMSAudio_driver_67E58C07Function, 0x67E58C07);
			
			mm.addFunction(sceMSAudio_driver_135F2225Function, 0x135F2225);
			
			mm.addFunction(sceMSAudio_driver_22DA9981Function, 0x22DA9981);
			
			mm.addFunction(sceMSAudio_driver_9E37E51DFunction, 0x9E37E51D);
			
			mm.addFunction(sceMSAudioInvalidateICVFunction, 0x86666DA6);
			
			mm.addFunction(sceMSAudioReadMACListFunction, 0xFE7BC654);
			
			mm.addFunction(sceMSAudio_driver_66F19CA3Function, 0x66F19CA3);
			
			mm.addFunction(sceMSAudioGetInitialEKBFunction, 0x383DEC75);
			
			mm.addFunction(sceMSAudioFormatICVFunction, 0xC1B87E96);
			
			mm.addFunction(sceMSAudioGetICVInfoFunction, 0x60577DBD);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceMSAudioInitFunction);
			
			mm.removeFunction(sceMSAudioEndFunction);
			
			mm.removeFunction(sceMSAudioAuthFunction);
			
			mm.removeFunction(sceMSAudio_driver_E8B25D38Function);
			
			mm.removeFunction(sceMSAudioCheckICVFunction);
			
			mm.removeFunction(sceMSAudioCheckICVnFunction);
			
			mm.removeFunction(sceMSAudio_driver_A18A1DF6Function);
			
			mm.removeFunction(sceMSAudioDeauthFunction);
			
			mm.removeFunction(sceMSAudio_driver_5D1C9867Function);
			
			mm.removeFunction(sceMSAudio_driver_38178F2FFunction);
			
			mm.removeFunction(sceMSAudio_driver_67E58C07Function);
			
			mm.removeFunction(sceMSAudio_driver_135F2225Function);
			
			mm.removeFunction(sceMSAudio_driver_22DA9981Function);
			
			mm.removeFunction(sceMSAudio_driver_9E37E51DFunction);
			
			mm.removeFunction(sceMSAudioInvalidateICVFunction);
			
			mm.removeFunction(sceMSAudioReadMACListFunction);
			
			mm.removeFunction(sceMSAudio_driver_66F19CA3Function);
			
			mm.removeFunction(sceMSAudioGetInitialEKBFunction);
			
			mm.removeFunction(sceMSAudioFormatICVFunction);
			
			mm.removeFunction(sceMSAudioGetICVInfoFunction);
			
		}
	}
	
	
	public void sceMSAudioInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioInit [0x757F4FD3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioEnd [0x3872FBE5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioAuth(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioAuth [0x107D83D4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_E8B25D38(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_E8B25D38 [0xE8B25D38]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioCheckICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioCheckICV [0x47F7DAFC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioCheckICVn(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioCheckICVn [0x7B953C1A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_A18A1DF6(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_A18A1DF6 [0xA18A1DF6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioDeauth(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioDeauth [0x80BD1592]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_5D1C9867(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_5D1C9867 [0x5D1C9867]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_38178F2F(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_38178F2F [0x38178F2F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_67E58C07(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_67E58C07 [0x67E58C07]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_135F2225(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_135F2225 [0x135F2225]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_22DA9981(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_22DA9981 [0x22DA9981]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_9E37E51D(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_9E37E51D [0x9E37E51D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioInvalidateICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioInvalidateICV [0x86666DA6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioReadMACList(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioReadMACList [0xFE7BC654]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudio_driver_66F19CA3(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudio_driver_66F19CA3 [0x66F19CA3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioGetInitialEKB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioGetInitialEKB [0x383DEC75]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioFormatICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioFormatICV [0xC1B87E96]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMSAudioGetICVInfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMSAudioGetICVInfo [0x60577DBD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceMSAudioInitFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioInit") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioEndFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioEnd") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioAuthFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioAuth") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioAuth(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioAuthFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_E8B25D38Function = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_E8B25D38") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_E8B25D38(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_E8B25D38Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioCheckICVFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioCheckICV") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioCheckICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioCheckICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioCheckICVnFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioCheckICVn") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioCheckICVn(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioCheckICVnFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_A18A1DF6Function = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_A18A1DF6") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_A18A1DF6(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_A18A1DF6Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioDeauthFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioDeauth") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioDeauth(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioDeauthFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_5D1C9867Function = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_5D1C9867") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_5D1C9867(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_5D1C9867Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_38178F2FFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_38178F2F") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_38178F2F(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_38178F2FFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_67E58C07Function = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_67E58C07") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_67E58C07(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_67E58C07Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_135F2225Function = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_135F2225") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_135F2225(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_135F2225Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_22DA9981Function = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_22DA9981") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_22DA9981(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_22DA9981Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_9E37E51DFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_9E37E51D") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_9E37E51D(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_9E37E51DFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioInvalidateICVFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioInvalidateICV") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioInvalidateICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioInvalidateICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioReadMACListFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioReadMACList") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioReadMACList(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioReadMACListFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudio_driver_66F19CA3Function = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudio_driver_66F19CA3") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudio_driver_66F19CA3(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudio_driver_66F19CA3Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioGetInitialEKBFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioGetInitialEKB") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioGetInitialEKB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioGetInitialEKBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioFormatICVFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioFormatICV") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioFormatICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioFormatICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMSAudioGetICVInfoFunction = new HLEModuleFunction("sceMSAudio_driver", "sceMSAudioGetICVInfo") {
		@Override
		public final void execute(Processor processor) {
			sceMSAudioGetICVInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMSAudio_driver.sceMSAudioGetICVInfoFunction.execute(processor);";
		}
	};
    
};
