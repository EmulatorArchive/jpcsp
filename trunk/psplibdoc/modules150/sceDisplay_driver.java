/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceDisplay_driver implements HLEModule {
	@Override
	public String getName() { return "sceDisplay_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceDisplayInitFunction, 0x206276C2);
			mm.addFunction(sceDisplayEndFunction, 0x7A10289D);
			mm.addFunction(sceDisplaySetModeFunction, 0x0E20F177);
			mm.addFunction(sceDisplayGetModeFunction, 0xDEA197D4);
			mm.addFunction(sceDisplayGetFramePerSecFunction, 0xDBA6C4C4);
			mm.addFunction(sceDisplayEnableFunction, 0x432D133F);
			mm.addFunction(sceDisplayDisableFunction, 0x681EE6A7);
			mm.addFunction(sceDisplaySetHoldModeFunction, 0x7ED59BC4);
			mm.addFunction(sceDisplaySetResumeModeFunction, 0xA544C486);
			mm.addFunction(sceDisplay_driver_63E22A26Function, 0x63E22A26);
			mm.addFunction(sceDisplay_driver_5B5AEFADFunction, 0x5B5AEFAD);
			mm.addFunction(sceDisplaySetFrameBufFunction, 0x289D82FE);
			mm.addFunction(sceDisplayGetFrameBufFunction, 0xEEDA2E54);
			mm.addFunction(sceDisplayIsForegroundFunction, 0xB4F378FA);
			mm.addFunction(sceDisplayGetForegroundLevelFunction, 0xAC14F1FF);
			mm.addFunction(sceDisplaySetBrightnessFunction, 0x9E3C6DC6);
			mm.addFunction(sceDisplayGetBrightnessFunction, 0x31C4BAA8);
			mm.addFunction(sceDisplayGetVcountFunction, 0x9C6EAAD7);
			mm.addFunction(sceDisplayIsVblankFunction, 0x4D4E10EC);
			mm.addFunction(sceDisplayGetVblankRestFunction, 0x69B53541);
			mm.addFunction(sceDisplayWaitVblankFunction, 0x36CDFADE);
			mm.addFunction(sceDisplayWaitVblankCBFunction, 0x8EB9EC49);
			mm.addFunction(sceDisplayWaitVblankStartFunction, 0x984C27E7);
			mm.addFunction(sceDisplayWaitVblankStartCBFunction, 0x46F186C3);
			mm.addFunction(sceDisplayGetCurrentHcountFunction, 0x773DD3A3);
			mm.addFunction(sceDisplayGetAccumulatedHcountFunction, 0x210EAB3A);
			mm.addFunction(sceDisplayAdjustAccumulatedHcountFunction, 0xA83EF139);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceDisplayInitFunction);
			mm.removeFunction(sceDisplayEndFunction);
			mm.removeFunction(sceDisplaySetModeFunction);
			mm.removeFunction(sceDisplayGetModeFunction);
			mm.removeFunction(sceDisplayGetFramePerSecFunction);
			mm.removeFunction(sceDisplayEnableFunction);
			mm.removeFunction(sceDisplayDisableFunction);
			mm.removeFunction(sceDisplaySetHoldModeFunction);
			mm.removeFunction(sceDisplaySetResumeModeFunction);
			mm.removeFunction(sceDisplay_driver_63E22A26Function);
			mm.removeFunction(sceDisplay_driver_5B5AEFADFunction);
			mm.removeFunction(sceDisplaySetFrameBufFunction);
			mm.removeFunction(sceDisplayGetFrameBufFunction);
			mm.removeFunction(sceDisplayIsForegroundFunction);
			mm.removeFunction(sceDisplayGetForegroundLevelFunction);
			mm.removeFunction(sceDisplaySetBrightnessFunction);
			mm.removeFunction(sceDisplayGetBrightnessFunction);
			mm.removeFunction(sceDisplayGetVcountFunction);
			mm.removeFunction(sceDisplayIsVblankFunction);
			mm.removeFunction(sceDisplayGetVblankRestFunction);
			mm.removeFunction(sceDisplayWaitVblankFunction);
			mm.removeFunction(sceDisplayWaitVblankCBFunction);
			mm.removeFunction(sceDisplayWaitVblankStartFunction);
			mm.removeFunction(sceDisplayWaitVblankStartCBFunction);
			mm.removeFunction(sceDisplayGetCurrentHcountFunction);
			mm.removeFunction(sceDisplayGetAccumulatedHcountFunction);
			mm.removeFunction(sceDisplayAdjustAccumulatedHcountFunction);
			
		}
	}
	
	
	public void sceDisplayInit(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayInit [0x206276C2]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayEnd(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayEnd [0x7A10289D]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplaySetMode(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplaySetMode [0x0E20F177]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetMode(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetMode [0xDEA197D4]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetFramePerSec(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetFramePerSec [0xDBA6C4C4]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayEnable(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayEnable [0x432D133F]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayDisable(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayDisable [0x681EE6A7]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplaySetHoldMode(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplaySetHoldMode [0x7ED59BC4]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplaySetResumeMode(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplaySetResumeMode [0xA544C486]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplay_driver_63E22A26(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplay_driver_63E22A26 [0x63E22A26]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplay_driver_5B5AEFAD(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplay_driver_5B5AEFAD [0x5B5AEFAD]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplaySetFrameBuf(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplaySetFrameBuf [0x289D82FE]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetFrameBuf(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetFrameBuf [0xEEDA2E54]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayIsForeground(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayIsForeground [0xB4F378FA]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetForegroundLevel(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetForegroundLevel [0xAC14F1FF]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplaySetBrightness(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplaySetBrightness [0x9E3C6DC6]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetBrightness(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetBrightness [0x31C4BAA8]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetVcount(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetVcount [0x9C6EAAD7]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayIsVblank(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayIsVblank [0x4D4E10EC]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetVblankRest(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetVblankRest [0x69B53541]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayWaitVblank(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayWaitVblank [0x36CDFADE]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayWaitVblankCB(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayWaitVblankCB [0x8EB9EC49]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayWaitVblankStart(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayWaitVblankStart [0x984C27E7]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayWaitVblankStartCB(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayWaitVblankStartCB [0x46F186C3]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetCurrentHcount(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetCurrentHcount [0x773DD3A3]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayGetAccumulatedHcount(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayGetAccumulatedHcount [0x210EAB3A]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDisplayAdjustAccumulatedHcount(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDisplayAdjustAccumulatedHcount [0xA83EF139]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceDisplayInitFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayInit") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayEndFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayEnd") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayEnd(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplaySetModeFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplaySetMode") {
		@Override
		public final void execute(Processor processor) {
			sceDisplaySetMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplaySetMode(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetModeFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetMode") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetMode(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetFramePerSecFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetFramePerSec") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetFramePerSec(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetFramePerSec(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayEnableFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayEnable") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayEnable(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayDisableFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayDisable") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayDisable(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplaySetHoldModeFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplaySetHoldMode") {
		@Override
		public final void execute(Processor processor) {
			sceDisplaySetHoldMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplaySetHoldMode(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplaySetResumeModeFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplaySetResumeMode") {
		@Override
		public final void execute(Processor processor) {
			sceDisplaySetResumeMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplaySetResumeMode(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplay_driver_63E22A26Function = new HLEModuleFunction("sceDisplay_driver", "sceDisplay_driver_63E22A26") {
		@Override
		public final void execute(Processor processor) {
			sceDisplay_driver_63E22A26(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplay_driver_63E22A26(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplay_driver_5B5AEFADFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplay_driver_5B5AEFAD") {
		@Override
		public final void execute(Processor processor) {
			sceDisplay_driver_5B5AEFAD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplay_driver_5B5AEFAD(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplaySetFrameBufFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplaySetFrameBuf") {
		@Override
		public final void execute(Processor processor) {
			sceDisplaySetFrameBuf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplaySetFrameBuf(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetFrameBufFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetFrameBuf") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetFrameBuf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetFrameBuf(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayIsForegroundFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayIsForeground") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayIsForeground(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayIsForeground(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetForegroundLevelFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetForegroundLevel") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetForegroundLevel(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetForegroundLevel(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplaySetBrightnessFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplaySetBrightness") {
		@Override
		public final void execute(Processor processor) {
			sceDisplaySetBrightness(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplaySetBrightness(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetBrightnessFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetBrightness") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetBrightness(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetBrightness(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetVcountFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetVcount") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetVcount(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetVcount(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayIsVblankFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayIsVblank") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayIsVblank(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayIsVblank(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetVblankRestFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetVblankRest") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetVblankRest(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetVblankRest(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayWaitVblankFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayWaitVblank") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayWaitVblank(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayWaitVblank(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayWaitVblankCBFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayWaitVblankCB") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayWaitVblankCB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayWaitVblankCB(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayWaitVblankStartFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayWaitVblankStart") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayWaitVblankStart(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayWaitVblankStart(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayWaitVblankStartCBFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayWaitVblankStartCB") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayWaitVblankStartCB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayWaitVblankStartCB(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetCurrentHcountFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetCurrentHcount") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetCurrentHcount(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetCurrentHcount(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayGetAccumulatedHcountFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayGetAccumulatedHcount") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayGetAccumulatedHcount(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayGetAccumulatedHcount(processor);";
		}
	};
    
	public final HLEModuleFunction sceDisplayAdjustAccumulatedHcountFunction = new HLEModuleFunction("sceDisplay_driver", "sceDisplayAdjustAccumulatedHcount") {
		@Override
		public final void execute(Processor processor) {
			sceDisplayAdjustAccumulatedHcount(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDisplay_driverModule.sceDisplayAdjustAccumulatedHcount(processor);";
		}
	};
    
};
