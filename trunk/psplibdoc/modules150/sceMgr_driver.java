/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceMgr_driver implements HLEModule {
	@Override
	public String getName() { return "sceMgr_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceMgrInitFunction, 0xECBC76EF);
			
			mm.addFunction(sceMgrEndFunction, 0xDB1160A2);
			
			mm.addFunction(sceMgrResetFunction, 0x604EF590);
			
			mm.addFunction(sceMgrLockFunction, 0xBB36AD19);
			
			mm.addFunction(sceMgrPollLockFunction, 0x62BF32DD);
			
			mm.addFunction(sceMgrUnLockFunction, 0xDBEDF631);
			
			mm.addFunction(sceMgrAllocKeyRegFunction, 0xF30E22CF);
			
			mm.addFunction(sceMgrFreeKeyRegFunction, 0x1B8F3192);
			
			mm.addFunction(sceMgrGetLeafIDFunction, 0x896EEE57);
			
			mm.addFunction(sceMgrGetInitialEKBFunction, 0x733917D9);
			
			mm.addFunction(sceMgrGetDefaultEKBFunction, 0x4B166A14);
			
			mm.addFunction(sceMgrInitSeedFunction, 0x782EB996);
			
			mm.addFunction(sceMgrRandomFunction, 0x9ACFEAF6);
			
			mm.addFunction(sceMgrCreateKcFunction, 0x4985A5A8);
			
			mm.addFunction(sceMgrEncryptKcWithKseFunction, 0x62F480BF);
			
			mm.addFunction(sceMgrDecryptKcWithKseFunction, 0xDC515D30);
			
			mm.addFunction(sceMgrDecryptEKBFunction, 0xC3677CF4);
			
			mm.addFunction(sceMgrDecryptLocalEKBFunction, 0x8407D6DC);
			
			mm.addFunction(sceMgr_driver_B434A376Function, 0xB434A376);
			
			mm.addFunction(sceMgrEncryptKcFunction, 0x26EAC6A5);
			
			mm.addFunction(sceMgrDecryptKcFunction, 0x02F7AB01);
			
			mm.addFunction(sceMgrEncryptKicvFunction, 0x5576E156);
			
			mm.addFunction(sceMgrDecryptKicvFunction, 0xE22F96A0);
			
			mm.addFunction(sceMgrGenerateKbFunction, 0xC408E3C0);
			
			mm.addFunction(sceMgrGenerateICVFunction, 0x59894938);
			
			mm.addFunction(sceMgrEncryptWithKbCBCFunction, 0x0846B97A);
			
			mm.addFunction(sceMgrDecryptWithKbCBCFunction, 0x34235E6B);
			
			mm.addFunction(sceMgrGenerateMACWithKbCBCFunction, 0x6B908200);
			
			mm.addFunction(sceMgrGenerateKseFunction, 0x5A260472);
			
			mm.addFunction(sceMgrEncryptWithKseFunction, 0x4AC11456);
			
			mm.addFunction(sceMgrDecryptWithKseFunction, 0x2DA3D191);
			
			mm.addFunction(sceMgrGenerateMACWithKseCBCFunction, 0x2BC130E3);
			
			mm.addFunction(sceMgrGenerateMAC1dFunction, 0xBDE09225);
			
			mm.addFunction(sceMgrStartSessionFunction, 0x54166582);
			
			mm.addFunction(sceMgrDESDecryptFunction, 0xF5DFD97B);
			
			mm.addFunction(sceMgrDESEncryptFunction, 0x2DAD213D);
			
			mm.addFunction(sceMgrDESDecryptBlockFunction, 0x3583068E);
			
			mm.addFunction(sceMgrDESEncryptBlockFunction, 0xC507A285);
			
			mm.addFunction(sceMgrAESDecryptFunction, 0x3054F8F1);
			
			mm.addFunction(sceMgrAESEncryptFunction, 0x8A916574);
			
			mm.addFunction(sceMgrMSInitFunction, 0xD46CF098);
			
			mm.addFunction(sceMgrMSResetFunction, 0x9C886B02);
			
			mm.addFunction(sceMgrMSEndFunction, 0xC9B02F91);
			
			mm.addFunction(sceMgr_driver_C655D92BFunction, 0xC655D92B);
			
			mm.addFunction(sceMgr_driver_F26C410AFunction, 0xF26C410A);
			
			mm.addFunction(sceMgrMSInvalidateICVFunction, 0xA9F72903);
			
			mm.addFunction(sceMgr_driver_6CCA97DBFunction, 0x6CCA97DB);
			
			mm.addFunction(sceMgr_driver_A85906FCFunction, 0xA85906FC);
			
			mm.addFunction(sceMgrMSMountFunction, 0x91C76957);
			
			mm.addFunction(sceMgrMSAuthFunction, 0xC8380898);
			
			mm.addFunction(sceMgrMSDeauthFunction, 0x4F4AE686);
			
			mm.addFunction(sceMgrMSGetMediaTypeFunction, 0x843ECFA2);
			
			mm.addFunction(sceMgrMSGetMediaIDFunction, 0x839F4A67);
			
			mm.addFunction(sceMgrMSCheckICVFunction, 0xAC136724);
			
			mm.addFunction(sceMgrMSCompareICVFunction, 0x656D8FB1);
			
			mm.addFunction(sceMgrMSWriteICVFunction, 0x0ED46FF9);
			
			mm.addFunction(sceMgr_driver_016A843BFunction, 0x016A843B);
			
			mm.addFunction(sceMgr_driver_3EE1140BFunction, 0x3EE1140B);
			
			mm.addFunction(sceMgr_driver_D3A061BEFunction, 0xD3A061BE);
			
			mm.addFunction(sceMgrMSSetLeafIDFunction, 0xB7F69809);
			
			mm.addFunction(sceMgrMSGetLocalEKBFunction, 0xA01FF50C);
			
			mm.addFunction(sceMgrMSSetRdFunction, 0x7D2AC9FE);
			
			mm.addFunction(sceMgr_driver_D1023CC2Function, 0xD1023CC2);
			
			mm.addFunction(sceMgrMSSetMAC2dFunction, 0xFD2D2952);
			
			mm.addFunction(sceMgrMSReadIBDFunction, 0xE1C0DAFE);
			
			mm.addFunction(sceMgrMSWriteIBDFunction, 0x31B4BD28);
			
			mm.addFunction(sceMgrGetHwVersionFunction, 0x194C594A);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceMgrInitFunction);
			
			mm.removeFunction(sceMgrEndFunction);
			
			mm.removeFunction(sceMgrResetFunction);
			
			mm.removeFunction(sceMgrLockFunction);
			
			mm.removeFunction(sceMgrPollLockFunction);
			
			mm.removeFunction(sceMgrUnLockFunction);
			
			mm.removeFunction(sceMgrAllocKeyRegFunction);
			
			mm.removeFunction(sceMgrFreeKeyRegFunction);
			
			mm.removeFunction(sceMgrGetLeafIDFunction);
			
			mm.removeFunction(sceMgrGetInitialEKBFunction);
			
			mm.removeFunction(sceMgrGetDefaultEKBFunction);
			
			mm.removeFunction(sceMgrInitSeedFunction);
			
			mm.removeFunction(sceMgrRandomFunction);
			
			mm.removeFunction(sceMgrCreateKcFunction);
			
			mm.removeFunction(sceMgrEncryptKcWithKseFunction);
			
			mm.removeFunction(sceMgrDecryptKcWithKseFunction);
			
			mm.removeFunction(sceMgrDecryptEKBFunction);
			
			mm.removeFunction(sceMgrDecryptLocalEKBFunction);
			
			mm.removeFunction(sceMgr_driver_B434A376Function);
			
			mm.removeFunction(sceMgrEncryptKcFunction);
			
			mm.removeFunction(sceMgrDecryptKcFunction);
			
			mm.removeFunction(sceMgrEncryptKicvFunction);
			
			mm.removeFunction(sceMgrDecryptKicvFunction);
			
			mm.removeFunction(sceMgrGenerateKbFunction);
			
			mm.removeFunction(sceMgrGenerateICVFunction);
			
			mm.removeFunction(sceMgrEncryptWithKbCBCFunction);
			
			mm.removeFunction(sceMgrDecryptWithKbCBCFunction);
			
			mm.removeFunction(sceMgrGenerateMACWithKbCBCFunction);
			
			mm.removeFunction(sceMgrGenerateKseFunction);
			
			mm.removeFunction(sceMgrEncryptWithKseFunction);
			
			mm.removeFunction(sceMgrDecryptWithKseFunction);
			
			mm.removeFunction(sceMgrGenerateMACWithKseCBCFunction);
			
			mm.removeFunction(sceMgrGenerateMAC1dFunction);
			
			mm.removeFunction(sceMgrStartSessionFunction);
			
			mm.removeFunction(sceMgrDESDecryptFunction);
			
			mm.removeFunction(sceMgrDESEncryptFunction);
			
			mm.removeFunction(sceMgrDESDecryptBlockFunction);
			
			mm.removeFunction(sceMgrDESEncryptBlockFunction);
			
			mm.removeFunction(sceMgrAESDecryptFunction);
			
			mm.removeFunction(sceMgrAESEncryptFunction);
			
			mm.removeFunction(sceMgrMSInitFunction);
			
			mm.removeFunction(sceMgrMSResetFunction);
			
			mm.removeFunction(sceMgrMSEndFunction);
			
			mm.removeFunction(sceMgr_driver_C655D92BFunction);
			
			mm.removeFunction(sceMgr_driver_F26C410AFunction);
			
			mm.removeFunction(sceMgrMSInvalidateICVFunction);
			
			mm.removeFunction(sceMgr_driver_6CCA97DBFunction);
			
			mm.removeFunction(sceMgr_driver_A85906FCFunction);
			
			mm.removeFunction(sceMgrMSMountFunction);
			
			mm.removeFunction(sceMgrMSAuthFunction);
			
			mm.removeFunction(sceMgrMSDeauthFunction);
			
			mm.removeFunction(sceMgrMSGetMediaTypeFunction);
			
			mm.removeFunction(sceMgrMSGetMediaIDFunction);
			
			mm.removeFunction(sceMgrMSCheckICVFunction);
			
			mm.removeFunction(sceMgrMSCompareICVFunction);
			
			mm.removeFunction(sceMgrMSWriteICVFunction);
			
			mm.removeFunction(sceMgr_driver_016A843BFunction);
			
			mm.removeFunction(sceMgr_driver_3EE1140BFunction);
			
			mm.removeFunction(sceMgr_driver_D3A061BEFunction);
			
			mm.removeFunction(sceMgrMSSetLeafIDFunction);
			
			mm.removeFunction(sceMgrMSGetLocalEKBFunction);
			
			mm.removeFunction(sceMgrMSSetRdFunction);
			
			mm.removeFunction(sceMgr_driver_D1023CC2Function);
			
			mm.removeFunction(sceMgrMSSetMAC2dFunction);
			
			mm.removeFunction(sceMgrMSReadIBDFunction);
			
			mm.removeFunction(sceMgrMSWriteIBDFunction);
			
			mm.removeFunction(sceMgrGetHwVersionFunction);
			
		}
	}
	
	
	public void sceMgrInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrInit [0xECBC76EF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrEnd [0xDB1160A2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrReset(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrReset [0x604EF590]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrLock [0xBB36AD19]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrPollLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrPollLock [0x62BF32DD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrUnLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrUnLock [0xDBEDF631]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrAllocKeyReg(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrAllocKeyReg [0xF30E22CF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrFreeKeyReg(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrFreeKeyReg [0x1B8F3192]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGetLeafID(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGetLeafID [0x896EEE57]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGetInitialEKB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGetInitialEKB [0x733917D9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGetDefaultEKB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGetDefaultEKB [0x4B166A14]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrInitSeed(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrInitSeed [0x782EB996]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrRandom(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrRandom [0x9ACFEAF6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrCreateKc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrCreateKc [0x4985A5A8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrEncryptKcWithKse(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrEncryptKcWithKse [0x62F480BF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDecryptKcWithKse(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDecryptKcWithKse [0xDC515D30]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDecryptEKB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDecryptEKB [0xC3677CF4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDecryptLocalEKB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDecryptLocalEKB [0x8407D6DC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_B434A376(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_B434A376 [0xB434A376]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrEncryptKc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrEncryptKc [0x26EAC6A5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDecryptKc(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDecryptKc [0x02F7AB01]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrEncryptKicv(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrEncryptKicv [0x5576E156]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDecryptKicv(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDecryptKicv [0xE22F96A0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGenerateKb(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGenerateKb [0xC408E3C0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGenerateICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGenerateICV [0x59894938]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrEncryptWithKbCBC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrEncryptWithKbCBC [0x0846B97A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDecryptWithKbCBC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDecryptWithKbCBC [0x34235E6B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGenerateMACWithKbCBC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGenerateMACWithKbCBC [0x6B908200]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGenerateKse(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGenerateKse [0x5A260472]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrEncryptWithKse(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrEncryptWithKse [0x4AC11456]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDecryptWithKse(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDecryptWithKse [0x2DA3D191]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGenerateMACWithKseCBC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGenerateMACWithKseCBC [0x2BC130E3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGenerateMAC1d(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGenerateMAC1d [0xBDE09225]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrStartSession(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrStartSession [0x54166582]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDESDecrypt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDESDecrypt [0xF5DFD97B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDESEncrypt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDESEncrypt [0x2DAD213D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDESDecryptBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDESDecryptBlock [0x3583068E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrDESEncryptBlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrDESEncryptBlock [0xC507A285]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrAESDecrypt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrAESDecrypt [0x3054F8F1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrAESEncrypt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrAESEncrypt [0x8A916574]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSInit [0xD46CF098]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSReset(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSReset [0x9C886B02]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSEnd [0xC9B02F91]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_C655D92B(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_C655D92B [0xC655D92B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_F26C410A(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_F26C410A [0xF26C410A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSInvalidateICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSInvalidateICV [0xA9F72903]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_6CCA97DB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_6CCA97DB [0x6CCA97DB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_A85906FC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_A85906FC [0xA85906FC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSMount(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSMount [0x91C76957]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSAuth(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSAuth [0xC8380898]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSDeauth(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSDeauth [0x4F4AE686]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSGetMediaType(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSGetMediaType [0x843ECFA2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSGetMediaID(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSGetMediaID [0x839F4A67]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSCheckICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSCheckICV [0xAC136724]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSCompareICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSCompareICV [0x656D8FB1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSWriteICV(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSWriteICV [0x0ED46FF9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_016A843B(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_016A843B [0x016A843B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_3EE1140B(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_3EE1140B [0x3EE1140B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_D3A061BE(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_D3A061BE [0xD3A061BE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSSetLeafID(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSSetLeafID [0xB7F69809]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSGetLocalEKB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSGetLocalEKB [0xA01FF50C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSSetRd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSSetRd [0x7D2AC9FE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgr_driver_D1023CC2(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgr_driver_D1023CC2 [0xD1023CC2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSSetMAC2d(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSSetMAC2d [0xFD2D2952]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSReadIBD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSReadIBD [0xE1C0DAFE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrMSWriteIBD(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrMSWriteIBD [0x31B4BD28]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceMgrGetHwVersion(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceMgrGetHwVersion [0x194C594A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceMgrInitFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrInit") {
		@Override
		public final void execute(Processor processor) {
			sceMgrInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrEndFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrEnd") {
		@Override
		public final void execute(Processor processor) {
			sceMgrEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrResetFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrReset") {
		@Override
		public final void execute(Processor processor) {
			sceMgrReset(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrResetFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrLockFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrLock") {
		@Override
		public final void execute(Processor processor) {
			sceMgrLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrLockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrPollLockFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrPollLock") {
		@Override
		public final void execute(Processor processor) {
			sceMgrPollLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrPollLockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrUnLockFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrUnLock") {
		@Override
		public final void execute(Processor processor) {
			sceMgrUnLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrUnLockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrAllocKeyRegFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrAllocKeyReg") {
		@Override
		public final void execute(Processor processor) {
			sceMgrAllocKeyReg(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrAllocKeyRegFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrFreeKeyRegFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrFreeKeyReg") {
		@Override
		public final void execute(Processor processor) {
			sceMgrFreeKeyReg(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrFreeKeyRegFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGetLeafIDFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGetLeafID") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGetLeafID(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGetLeafIDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGetInitialEKBFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGetInitialEKB") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGetInitialEKB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGetInitialEKBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGetDefaultEKBFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGetDefaultEKB") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGetDefaultEKB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGetDefaultEKBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrInitSeedFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrInitSeed") {
		@Override
		public final void execute(Processor processor) {
			sceMgrInitSeed(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrInitSeedFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrRandomFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrRandom") {
		@Override
		public final void execute(Processor processor) {
			sceMgrRandom(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrRandomFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrCreateKcFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrCreateKc") {
		@Override
		public final void execute(Processor processor) {
			sceMgrCreateKc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrCreateKcFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrEncryptKcWithKseFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrEncryptKcWithKse") {
		@Override
		public final void execute(Processor processor) {
			sceMgrEncryptKcWithKse(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrEncryptKcWithKseFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDecryptKcWithKseFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDecryptKcWithKse") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDecryptKcWithKse(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDecryptKcWithKseFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDecryptEKBFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDecryptEKB") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDecryptEKB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDecryptEKBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDecryptLocalEKBFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDecryptLocalEKB") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDecryptLocalEKB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDecryptLocalEKBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_B434A376Function = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_B434A376") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_B434A376(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_B434A376Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrEncryptKcFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrEncryptKc") {
		@Override
		public final void execute(Processor processor) {
			sceMgrEncryptKc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrEncryptKcFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDecryptKcFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDecryptKc") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDecryptKc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDecryptKcFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrEncryptKicvFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrEncryptKicv") {
		@Override
		public final void execute(Processor processor) {
			sceMgrEncryptKicv(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrEncryptKicvFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDecryptKicvFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDecryptKicv") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDecryptKicv(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDecryptKicvFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGenerateKbFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGenerateKb") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGenerateKb(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGenerateKbFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGenerateICVFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGenerateICV") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGenerateICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGenerateICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrEncryptWithKbCBCFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrEncryptWithKbCBC") {
		@Override
		public final void execute(Processor processor) {
			sceMgrEncryptWithKbCBC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrEncryptWithKbCBCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDecryptWithKbCBCFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDecryptWithKbCBC") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDecryptWithKbCBC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDecryptWithKbCBCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGenerateMACWithKbCBCFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGenerateMACWithKbCBC") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGenerateMACWithKbCBC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGenerateMACWithKbCBCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGenerateKseFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGenerateKse") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGenerateKse(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGenerateKseFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrEncryptWithKseFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrEncryptWithKse") {
		@Override
		public final void execute(Processor processor) {
			sceMgrEncryptWithKse(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrEncryptWithKseFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDecryptWithKseFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDecryptWithKse") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDecryptWithKse(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDecryptWithKseFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGenerateMACWithKseCBCFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGenerateMACWithKseCBC") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGenerateMACWithKseCBC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGenerateMACWithKseCBCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGenerateMAC1dFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGenerateMAC1d") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGenerateMAC1d(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGenerateMAC1dFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrStartSessionFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrStartSession") {
		@Override
		public final void execute(Processor processor) {
			sceMgrStartSession(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrStartSessionFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDESDecryptFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDESDecrypt") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDESDecrypt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDESDecryptFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDESEncryptFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDESEncrypt") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDESEncrypt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDESEncryptFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDESDecryptBlockFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDESDecryptBlock") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDESDecryptBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDESDecryptBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrDESEncryptBlockFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrDESEncryptBlock") {
		@Override
		public final void execute(Processor processor) {
			sceMgrDESEncryptBlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrDESEncryptBlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrAESDecryptFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrAESDecrypt") {
		@Override
		public final void execute(Processor processor) {
			sceMgrAESDecrypt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrAESDecryptFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrAESEncryptFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrAESEncrypt") {
		@Override
		public final void execute(Processor processor) {
			sceMgrAESEncrypt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrAESEncryptFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSInitFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSInit") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSResetFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSReset") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSReset(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSResetFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSEndFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSEnd") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_C655D92BFunction = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_C655D92B") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_C655D92B(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_C655D92BFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_F26C410AFunction = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_F26C410A") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_F26C410A(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_F26C410AFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSInvalidateICVFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSInvalidateICV") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSInvalidateICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSInvalidateICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_6CCA97DBFunction = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_6CCA97DB") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_6CCA97DB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_6CCA97DBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_A85906FCFunction = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_A85906FC") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_A85906FC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_A85906FCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSMountFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSMount") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSMount(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSMountFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSAuthFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSAuth") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSAuth(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSAuthFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSDeauthFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSDeauth") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSDeauth(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSDeauthFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSGetMediaTypeFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSGetMediaType") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSGetMediaType(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSGetMediaTypeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSGetMediaIDFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSGetMediaID") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSGetMediaID(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSGetMediaIDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSCheckICVFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSCheckICV") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSCheckICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSCheckICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSCompareICVFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSCompareICV") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSCompareICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSCompareICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSWriteICVFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSWriteICV") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSWriteICV(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSWriteICVFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_016A843BFunction = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_016A843B") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_016A843B(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_016A843BFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_3EE1140BFunction = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_3EE1140B") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_3EE1140B(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_3EE1140BFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_D3A061BEFunction = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_D3A061BE") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_D3A061BE(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_D3A061BEFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSSetLeafIDFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSSetLeafID") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSSetLeafID(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSSetLeafIDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSGetLocalEKBFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSGetLocalEKB") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSGetLocalEKB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSGetLocalEKBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSSetRdFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSSetRd") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSSetRd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSSetRdFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgr_driver_D1023CC2Function = new HLEModuleFunction("sceMgr_driver", "sceMgr_driver_D1023CC2") {
		@Override
		public final void execute(Processor processor) {
			sceMgr_driver_D1023CC2(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgr_driver_D1023CC2Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSSetMAC2dFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSSetMAC2d") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSSetMAC2d(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSSetMAC2dFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSReadIBDFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSReadIBD") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSReadIBD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSReadIBDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrMSWriteIBDFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrMSWriteIBD") {
		@Override
		public final void execute(Processor processor) {
			sceMgrMSWriteIBD(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrMSWriteIBDFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceMgrGetHwVersionFunction = new HLEModuleFunction("sceMgr_driver", "sceMgrGetHwVersion") {
		@Override
		public final void execute(Processor processor) {
			sceMgrGetHwVersion(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceMgr_driver.sceMgrGetHwVersionFunction.execute(processor);";
		}
	};
    
};
