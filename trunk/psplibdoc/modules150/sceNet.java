/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNet implements HLEModule {
	@Override
	public String getName() { return "sceNet"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceNetInitFunction, 0x39AF39A6);
			
			mm.addFunction(sceNetTermFunction, 0x281928A9);
			
			mm.addFunction(sceNetFreeThreadinfoFunction, 0x50647530);
			
			mm.addFunction(sceNetThreadAbortFunction, 0xAD6844C6);
			
			mm.addFunction(sceNetEtherNtostrFunction, 0x89360950);
			
			mm.addFunction(sceNetEtherStrtonFunction, 0xD27961C9);
			
			mm.addFunction(sceNetGetLocalEtherAddrFunction, 0x0BF0A3AE);
			
			mm.addFunction(sceNetGetMallocStatFunction, 0xCC393E48);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceNetInitFunction);
			
			mm.removeFunction(sceNetTermFunction);
			
			mm.removeFunction(sceNetFreeThreadinfoFunction);
			
			mm.removeFunction(sceNetThreadAbortFunction);
			
			mm.removeFunction(sceNetEtherNtostrFunction);
			
			mm.removeFunction(sceNetEtherStrtonFunction);
			
			mm.removeFunction(sceNetGetLocalEtherAddrFunction);
			
			mm.removeFunction(sceNetGetMallocStatFunction);
			
		}
	}
	
	
	public void sceNetInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetInit [0x39AF39A6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetTerm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetTerm [0x281928A9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetFreeThreadinfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetFreeThreadinfo [0x50647530]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetThreadAbort(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetThreadAbort [0xAD6844C6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetEtherNtostr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetEtherNtostr [0x89360950]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetEtherStrton(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetEtherStrton [0xD27961C9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetGetLocalEtherAddr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetGetLocalEtherAddr [0x0BF0A3AE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetGetMallocStat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetGetMallocStat [0xCC393E48]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNetInitFunction = new HLEModuleFunction("sceNet", "sceNetInit") {
		@Override
		public final void execute(Processor processor) {
			sceNetInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetTermFunction = new HLEModuleFunction("sceNet", "sceNetTerm") {
		@Override
		public final void execute(Processor processor) {
			sceNetTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetTermFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetFreeThreadinfoFunction = new HLEModuleFunction("sceNet", "sceNetFreeThreadinfo") {
		@Override
		public final void execute(Processor processor) {
			sceNetFreeThreadinfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetFreeThreadinfoFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetThreadAbortFunction = new HLEModuleFunction("sceNet", "sceNetThreadAbort") {
		@Override
		public final void execute(Processor processor) {
			sceNetThreadAbort(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetThreadAbortFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetEtherNtostrFunction = new HLEModuleFunction("sceNet", "sceNetEtherNtostr") {
		@Override
		public final void execute(Processor processor) {
			sceNetEtherNtostr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetEtherNtostrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetEtherStrtonFunction = new HLEModuleFunction("sceNet", "sceNetEtherStrton") {
		@Override
		public final void execute(Processor processor) {
			sceNetEtherStrton(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetEtherStrtonFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetGetLocalEtherAddrFunction = new HLEModuleFunction("sceNet", "sceNetGetLocalEtherAddr") {
		@Override
		public final void execute(Processor processor) {
			sceNetGetLocalEtherAddr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetGetLocalEtherAddrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetGetMallocStatFunction = new HLEModuleFunction("sceNet", "sceNetGetMallocStat") {
		@Override
		public final void execute(Processor processor) {
			sceNetGetMallocStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNet.sceNetGetMallocStatFunction.execute(processor);";
		}
	};
    
};
