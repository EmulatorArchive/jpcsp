/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class KDebugForKernel implements HLEModule {
	@Override
	public String getName() { return "KDebugForKernel"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceKernelRegisterAssertHandlerFunction, 0xE7A3874D);
			mm.addFunction(sceKernelAssertFunction, 0x2FF4E9F9);
			mm.addFunction(sceKernelGetDebugPutcharFunction, 0x9B868276);
			mm.addFunction(sceKernelRegisterDebugPutcharFunction, 0xE146606D);
			mm.addFunction(sceKernelRegisterKprintfHandlerFunction, 0x7CEB2C09);
			mm.addFunction(KprintfFunction, 0x84F370BC);
			mm.addFunction(sceKernelDebugWriteFunction, 0x5CE9838B);
			mm.addFunction(sceKernelRegisterDebugWriteFunction, 0x66253C4E);
			mm.addFunction(sceKernelDebugReadFunction, 0xDBB5597F);
			mm.addFunction(sceKernelRegisterDebugReadFunction, 0xE6554FDA);
			mm.addFunction(sceKernelDebugEchoFunction, 0xB9C643C9);
			mm.addFunction(sceKernelDebugEchoSetFunction, 0x7D1C74F0);
			mm.addFunction(sceKernelDipswFunction, 0x24C32559);
			mm.addFunction(sceKernelDipswAllFunction, 0xD636B827);
			mm.addFunction(sceKernelDipswSetFunction, 0x5282DD5E);
			mm.addFunction(sceKernelDipswClearFunction, 0xEE75658D);
			mm.addFunction(KDebugForKernel_9F8703E4Function, 0x9F8703E4);
			mm.addFunction(KDebugForKernel_333DCEC7Function, 0x333DCEC7);
			mm.addFunction(KDebugForKernel_E892D9A1Function, 0xE892D9A1);
			mm.addFunction(KDebugForKernel_A126F497Function, 0xA126F497);
			mm.addFunction(KDebugForKernel_B7251823Function, 0xB7251823);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceKernelRegisterAssertHandlerFunction);
			mm.removeFunction(sceKernelAssertFunction);
			mm.removeFunction(sceKernelGetDebugPutcharFunction);
			mm.removeFunction(sceKernelRegisterDebugPutcharFunction);
			mm.removeFunction(sceKernelRegisterKprintfHandlerFunction);
			mm.removeFunction(KprintfFunction);
			mm.removeFunction(sceKernelDebugWriteFunction);
			mm.removeFunction(sceKernelRegisterDebugWriteFunction);
			mm.removeFunction(sceKernelDebugReadFunction);
			mm.removeFunction(sceKernelRegisterDebugReadFunction);
			mm.removeFunction(sceKernelDebugEchoFunction);
			mm.removeFunction(sceKernelDebugEchoSetFunction);
			mm.removeFunction(sceKernelDipswFunction);
			mm.removeFunction(sceKernelDipswAllFunction);
			mm.removeFunction(sceKernelDipswSetFunction);
			mm.removeFunction(sceKernelDipswClearFunction);
			mm.removeFunction(KDebugForKernel_9F8703E4Function);
			mm.removeFunction(KDebugForKernel_333DCEC7Function);
			mm.removeFunction(KDebugForKernel_E892D9A1Function);
			mm.removeFunction(KDebugForKernel_A126F497Function);
			mm.removeFunction(KDebugForKernel_B7251823Function);
			
		}
	}
	
	
	public void sceKernelRegisterAssertHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelRegisterAssertHandler [0xE7A3874D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelAssert(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelAssert [0x2FF4E9F9]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelGetDebugPutchar(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelGetDebugPutchar [0x9B868276]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterDebugPutchar(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelRegisterDebugPutchar [0xE146606D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterKprintfHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelRegisterKprintfHandler [0x7CEB2C09]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void Kprintf(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function Kprintf [0x84F370BC]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDebugWrite(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDebugWrite [0x5CE9838B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterDebugWrite(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelRegisterDebugWrite [0x66253C4E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDebugRead(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDebugRead [0xDBB5597F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterDebugRead(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelRegisterDebugRead [0xE6554FDA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDebugEcho(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDebugEcho [0xB9C643C9]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDebugEchoSet(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDebugEchoSet [0x7D1C74F0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDipsw(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDipsw [0x24C32559]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDipswAll(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDipswAll [0xD636B827]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDipswSet(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDipswSet [0x5282DD5E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceKernelDipswClear(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceKernelDipswClear [0xEE75658D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void KDebugForKernel_9F8703E4(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function KDebugForKernel_9F8703E4 [0x9F8703E4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void KDebugForKernel_333DCEC7(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function KDebugForKernel_333DCEC7 [0x333DCEC7]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void KDebugForKernel_E892D9A1(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function KDebugForKernel_E892D9A1 [0xE892D9A1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void KDebugForKernel_A126F497(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function KDebugForKernel_A126F497 [0xA126F497]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void KDebugForKernel_B7251823(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function KDebugForKernel_B7251823 [0xB7251823]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceKernelRegisterAssertHandlerFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelRegisterAssertHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterAssertHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelRegisterAssertHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelAssertFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelAssert") {
		@Override
		public final void execute(Processor processor) {
			sceKernelAssert(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelAssert(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelGetDebugPutcharFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelGetDebugPutchar") {
		@Override
		public final void execute(Processor processor) {
			sceKernelGetDebugPutchar(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelGetDebugPutchar(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterDebugPutcharFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelRegisterDebugPutchar") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterDebugPutchar(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelRegisterDebugPutchar(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterKprintfHandlerFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelRegisterKprintfHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterKprintfHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelRegisterKprintfHandler(processor);";
		}
	};
    
	public final HLEModuleFunction KprintfFunction = new HLEModuleFunction("KDebugForKernel", "Kprintf") {
		@Override
		public final void execute(Processor processor) {
			Kprintf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.Kprintf(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDebugWriteFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDebugWrite") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDebugWrite(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDebugWrite(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterDebugWriteFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelRegisterDebugWrite") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterDebugWrite(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelRegisterDebugWrite(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDebugReadFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDebugRead") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDebugRead(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDebugRead(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterDebugReadFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelRegisterDebugRead") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterDebugRead(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelRegisterDebugRead(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDebugEchoFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDebugEcho") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDebugEcho(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDebugEcho(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDebugEchoSetFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDebugEchoSet") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDebugEchoSet(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDebugEchoSet(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDipswFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDipsw") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDipsw(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDipsw(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDipswAllFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDipswAll") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDipswAll(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDipswAll(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDipswSetFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDipswSet") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDipswSet(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDipswSet(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDipswClearFunction = new HLEModuleFunction("KDebugForKernel", "sceKernelDipswClear") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDipswClear(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.sceKernelDipswClear(processor);";
		}
	};
    
	public final HLEModuleFunction KDebugForKernel_9F8703E4Function = new HLEModuleFunction("KDebugForKernel", "KDebugForKernel_9F8703E4") {
		@Override
		public final void execute(Processor processor) {
			KDebugForKernel_9F8703E4(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.KDebugForKernel_9F8703E4(processor);";
		}
	};
    
	public final HLEModuleFunction KDebugForKernel_333DCEC7Function = new HLEModuleFunction("KDebugForKernel", "KDebugForKernel_333DCEC7") {
		@Override
		public final void execute(Processor processor) {
			KDebugForKernel_333DCEC7(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.KDebugForKernel_333DCEC7(processor);";
		}
	};
    
	public final HLEModuleFunction KDebugForKernel_E892D9A1Function = new HLEModuleFunction("KDebugForKernel", "KDebugForKernel_E892D9A1") {
		@Override
		public final void execute(Processor processor) {
			KDebugForKernel_E892D9A1(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.KDebugForKernel_E892D9A1(processor);";
		}
	};
    
	public final HLEModuleFunction KDebugForKernel_A126F497Function = new HLEModuleFunction("KDebugForKernel", "KDebugForKernel_A126F497") {
		@Override
		public final void execute(Processor processor) {
			KDebugForKernel_A126F497(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.KDebugForKernel_A126F497(processor);";
		}
	};
    
	public final HLEModuleFunction KDebugForKernel_B7251823Function = new HLEModuleFunction("KDebugForKernel", "KDebugForKernel_B7251823") {
		@Override
		public final void execute(Processor processor) {
			KDebugForKernel_B7251823(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.KDebugForKernelModule.KDebugForKernel_B7251823(processor);";
		}
	};
    
};
