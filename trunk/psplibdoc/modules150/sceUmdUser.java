/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceUmdUser implements HLEModule {
	@Override
	public String getName() { return "sceUmdUser"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceUmdCheckMediumFunction, 0x46EBB729);
			mm.addFunction(sceUmdActivateFunction, 0xC6183D47);
			mm.addFunction(sceUmdDeactivateFunction, 0xE83742BA);
			mm.addFunction(sceUmdWaitDriveStatFunction, 0x8EF08FCE);
			mm.addFunction(sceUmdWaitDriveStatWithTimerFunction, 0x56202973);
			mm.addFunction(sceUmdWaitDriveStatCBFunction, 0x4A9E5E29);
			mm.addFunction(sceUmdCancelWaitDriveStatFunction, 0x6AF9B50A);
			mm.addFunction(sceUmdGetDriveStatFunction, 0x6B4A146C);
			mm.addFunction(sceUmdGetErrorStatFunction, 0x20628E6F);
			mm.addFunction(sceUmdGetDiscInfoFunction, 0x340B7686);
			mm.addFunction(sceUmdRegisterUMDCallBackFunction, 0xAEE7404D);
			mm.addFunction(sceUmdUnRegisterUMDCallBackFunction, 0xBD2BDE07);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceUmdCheckMediumFunction);
			mm.removeFunction(sceUmdActivateFunction);
			mm.removeFunction(sceUmdDeactivateFunction);
			mm.removeFunction(sceUmdWaitDriveStatFunction);
			mm.removeFunction(sceUmdWaitDriveStatWithTimerFunction);
			mm.removeFunction(sceUmdWaitDriveStatCBFunction);
			mm.removeFunction(sceUmdCancelWaitDriveStatFunction);
			mm.removeFunction(sceUmdGetDriveStatFunction);
			mm.removeFunction(sceUmdGetErrorStatFunction);
			mm.removeFunction(sceUmdGetDiscInfoFunction);
			mm.removeFunction(sceUmdRegisterUMDCallBackFunction);
			mm.removeFunction(sceUmdUnRegisterUMDCallBackFunction);
			
		}
	}
	
	
	public void sceUmdCheckMedium(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdCheckMedium [0x46EBB729]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdActivate(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdActivate [0xC6183D47]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdDeactivate(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdDeactivate [0xE83742BA]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdWaitDriveStat(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdWaitDriveStat [0x8EF08FCE]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdWaitDriveStatWithTimer(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdWaitDriveStatWithTimer [0x56202973]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdWaitDriveStatCB(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdWaitDriveStatCB [0x4A9E5E29]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdCancelWaitDriveStat(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdCancelWaitDriveStat [0x6AF9B50A]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdGetDriveStat(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdGetDriveStat [0x6B4A146C]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdGetErrorStat(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdGetErrorStat [0x20628E6F]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdGetDiscInfo(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdGetDiscInfo [0x340B7686]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdRegisterUMDCallBack(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdRegisterUMDCallBack [0xAEE7404D]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUmdUnRegisterUMDCallBack(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUmdUnRegisterUMDCallBack [0xBD2BDE07]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceUmdCheckMediumFunction = new HLEModuleFunction("sceUmdUser", "sceUmdCheckMedium") {
		@Override
		public final void execute(Processor processor) {
			sceUmdCheckMedium(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdCheckMedium(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdActivateFunction = new HLEModuleFunction("sceUmdUser", "sceUmdActivate") {
		@Override
		public final void execute(Processor processor) {
			sceUmdActivate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdActivate(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdDeactivateFunction = new HLEModuleFunction("sceUmdUser", "sceUmdDeactivate") {
		@Override
		public final void execute(Processor processor) {
			sceUmdDeactivate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdDeactivate(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdWaitDriveStatFunction = new HLEModuleFunction("sceUmdUser", "sceUmdWaitDriveStat") {
		@Override
		public final void execute(Processor processor) {
			sceUmdWaitDriveStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdWaitDriveStat(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdWaitDriveStatWithTimerFunction = new HLEModuleFunction("sceUmdUser", "sceUmdWaitDriveStatWithTimer") {
		@Override
		public final void execute(Processor processor) {
			sceUmdWaitDriveStatWithTimer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdWaitDriveStatWithTimer(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdWaitDriveStatCBFunction = new HLEModuleFunction("sceUmdUser", "sceUmdWaitDriveStatCB") {
		@Override
		public final void execute(Processor processor) {
			sceUmdWaitDriveStatCB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdWaitDriveStatCB(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdCancelWaitDriveStatFunction = new HLEModuleFunction("sceUmdUser", "sceUmdCancelWaitDriveStat") {
		@Override
		public final void execute(Processor processor) {
			sceUmdCancelWaitDriveStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdCancelWaitDriveStat(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdGetDriveStatFunction = new HLEModuleFunction("sceUmdUser", "sceUmdGetDriveStat") {
		@Override
		public final void execute(Processor processor) {
			sceUmdGetDriveStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdGetDriveStat(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdGetErrorStatFunction = new HLEModuleFunction("sceUmdUser", "sceUmdGetErrorStat") {
		@Override
		public final void execute(Processor processor) {
			sceUmdGetErrorStat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdGetErrorStat(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdGetDiscInfoFunction = new HLEModuleFunction("sceUmdUser", "sceUmdGetDiscInfo") {
		@Override
		public final void execute(Processor processor) {
			sceUmdGetDiscInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdGetDiscInfo(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdRegisterUMDCallBackFunction = new HLEModuleFunction("sceUmdUser", "sceUmdRegisterUMDCallBack") {
		@Override
		public final void execute(Processor processor) {
			sceUmdRegisterUMDCallBack(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdRegisterUMDCallBack(processor);";
		}
	};
    
	public final HLEModuleFunction sceUmdUnRegisterUMDCallBackFunction = new HLEModuleFunction("sceUmdUser", "sceUmdUnRegisterUMDCallBack") {
		@Override
		public final void execute(Processor processor) {
			sceUmdUnRegisterUMDCallBack(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceUmdUserModule.sceUmdUnRegisterUMDCallBack(processor);";
		}
	};
    
};
