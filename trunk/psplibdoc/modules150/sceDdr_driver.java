/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceDdr_driver implements HLEModule {
	@Override
	public String getName() { return "sceDdr_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceDdrInitFunction, 0x17D39E17);
			
			mm.addFunction(sceDdrEndFunction, 0x8698F5DA);
			
			mm.addFunction(sceDdrSuspendFunction, 0x623A233F);
			
			mm.addFunction(sceDdrResumeFunction, 0x92289EC0);
			
			mm.addFunction(sceDdrSetupFunction, 0xD7C6C313);
			
			mm.addFunction(sceDdrChangePllClockFunction, 0x4CE55E76);
			
			mm.addFunction(sceDdrFlushFunction, 0x87D86769);
			
			mm.addFunction(sceDdrSetPowerDownCounterFunction, 0x286E1372);
			
			mm.addFunction(sceDdrGetPowerDownCounterFunction, 0x0DC43DE4);
			
			mm.addFunction(sceDdr_driver_7251F5ABFunction, 0x7251F5AB);
			
			mm.addFunction(sceDdr_driver_5B5831E5Function, 0x5B5831E5);
			
			mm.addFunction(sceDdr_driver_F23B7983Function, 0xF23B7983);
			
			mm.addFunction(sceDdrWriteMaxAllocateFunction, 0x655A9AB0);
			
			mm.addFunction(sceDdr_driver_6955346CFunction, 0x6955346C);
			
			mm.addFunction(sceDdr_driver_6078F911Function, 0x6078F911);
			
			mm.addFunction(sceDdrResetDeviceFunction, 0x91CD8F94);
			
			mm.addFunction(sceDdrExecSeqCmdFunction, 0xB5694ECD);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceDdrInitFunction);
			
			mm.removeFunction(sceDdrEndFunction);
			
			mm.removeFunction(sceDdrSuspendFunction);
			
			mm.removeFunction(sceDdrResumeFunction);
			
			mm.removeFunction(sceDdrSetupFunction);
			
			mm.removeFunction(sceDdrChangePllClockFunction);
			
			mm.removeFunction(sceDdrFlushFunction);
			
			mm.removeFunction(sceDdrSetPowerDownCounterFunction);
			
			mm.removeFunction(sceDdrGetPowerDownCounterFunction);
			
			mm.removeFunction(sceDdr_driver_7251F5ABFunction);
			
			mm.removeFunction(sceDdr_driver_5B5831E5Function);
			
			mm.removeFunction(sceDdr_driver_F23B7983Function);
			
			mm.removeFunction(sceDdrWriteMaxAllocateFunction);
			
			mm.removeFunction(sceDdr_driver_6955346CFunction);
			
			mm.removeFunction(sceDdr_driver_6078F911Function);
			
			mm.removeFunction(sceDdrResetDeviceFunction);
			
			mm.removeFunction(sceDdrExecSeqCmdFunction);
			
		}
	}
	
	
	public void sceDdrInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrInit [0x17D39E17]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrEnd [0x8698F5DA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrSuspend [0x623A233F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrResume [0x92289EC0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrSetup(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrSetup [0xD7C6C313]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrChangePllClock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrChangePllClock [0x4CE55E76]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrFlush(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrFlush [0x87D86769]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrSetPowerDownCounter(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrSetPowerDownCounter [0x286E1372]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrGetPowerDownCounter(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrGetPowerDownCounter [0x0DC43DE4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdr_driver_7251F5AB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdr_driver_7251F5AB [0x7251F5AB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdr_driver_5B5831E5(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdr_driver_5B5831E5 [0x5B5831E5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdr_driver_F23B7983(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdr_driver_F23B7983 [0xF23B7983]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrWriteMaxAllocate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrWriteMaxAllocate [0x655A9AB0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdr_driver_6955346C(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdr_driver_6955346C [0x6955346C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdr_driver_6078F911(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdr_driver_6078F911 [0x6078F911]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrResetDevice(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrResetDevice [0x91CD8F94]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceDdrExecSeqCmd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceDdrExecSeqCmd [0xB5694ECD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceDdrInitFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrInit") {
		@Override
		public final void execute(Processor processor) {
			sceDdrInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrEndFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrEnd") {
		@Override
		public final void execute(Processor processor) {
			sceDdrEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrSuspendFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceDdrSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrResumeFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrResume") {
		@Override
		public final void execute(Processor processor) {
			sceDdrResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrSetupFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrSetup") {
		@Override
		public final void execute(Processor processor) {
			sceDdrSetup(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrSetupFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrChangePllClockFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrChangePllClock") {
		@Override
		public final void execute(Processor processor) {
			sceDdrChangePllClock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrChangePllClockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrFlushFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrFlush") {
		@Override
		public final void execute(Processor processor) {
			sceDdrFlush(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrFlushFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrSetPowerDownCounterFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrSetPowerDownCounter") {
		@Override
		public final void execute(Processor processor) {
			sceDdrSetPowerDownCounter(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrSetPowerDownCounterFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrGetPowerDownCounterFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrGetPowerDownCounter") {
		@Override
		public final void execute(Processor processor) {
			sceDdrGetPowerDownCounter(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrGetPowerDownCounterFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdr_driver_7251F5ABFunction = new HLEModuleFunction("sceDdr_driver", "sceDdr_driver_7251F5AB") {
		@Override
		public final void execute(Processor processor) {
			sceDdr_driver_7251F5AB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdr_driver_7251F5ABFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdr_driver_5B5831E5Function = new HLEModuleFunction("sceDdr_driver", "sceDdr_driver_5B5831E5") {
		@Override
		public final void execute(Processor processor) {
			sceDdr_driver_5B5831E5(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdr_driver_5B5831E5Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdr_driver_F23B7983Function = new HLEModuleFunction("sceDdr_driver", "sceDdr_driver_F23B7983") {
		@Override
		public final void execute(Processor processor) {
			sceDdr_driver_F23B7983(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdr_driver_F23B7983Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrWriteMaxAllocateFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrWriteMaxAllocate") {
		@Override
		public final void execute(Processor processor) {
			sceDdrWriteMaxAllocate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrWriteMaxAllocateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdr_driver_6955346CFunction = new HLEModuleFunction("sceDdr_driver", "sceDdr_driver_6955346C") {
		@Override
		public final void execute(Processor processor) {
			sceDdr_driver_6955346C(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdr_driver_6955346CFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdr_driver_6078F911Function = new HLEModuleFunction("sceDdr_driver", "sceDdr_driver_6078F911") {
		@Override
		public final void execute(Processor processor) {
			sceDdr_driver_6078F911(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdr_driver_6078F911Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrResetDeviceFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrResetDevice") {
		@Override
		public final void execute(Processor processor) {
			sceDdrResetDevice(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrResetDeviceFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceDdrExecSeqCmdFunction = new HLEModuleFunction("sceDdr_driver", "sceDdrExecSeqCmd") {
		@Override
		public final void execute(Processor processor) {
			sceDdrExecSeqCmd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceDdr_driver.sceDdrExecSeqCmdFunction.execute(processor);";
		}
	};
    
};
