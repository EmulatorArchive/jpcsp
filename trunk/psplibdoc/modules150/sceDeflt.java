/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceDeflt implements HLEModule {
	@Override
	public String getName() { return "sceDeflt"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceZlibAdler32Function, 0x2EE39A64);
			mm.addFunction(sceDeflateDecompressFunction, 0x44054E03);
			mm.addFunction(sceGzipDecompressFunction, 0x6DBCF897);
			mm.addFunction(sceGzipGetCommentFunction, 0xB767F9A0);
			mm.addFunction(sceGzipGetCompressedDataFunction, 0x0BA3B9CC);
			mm.addFunction(sceGzipGetInfoFunction, 0x8AA82C92);
			mm.addFunction(sceGzipGetNameFunction, 0x106A3552);
			mm.addFunction(sceGzipIsValidFunction, 0x1B5B82BC);
			mm.addFunction(sceZlibDecompressFunction, 0xA9E4FB28);
			mm.addFunction(sceZlibGetCompressedDataFunction, 0x6A548477);
			mm.addFunction(sceZlibGetInfoFunction, 0xAFE01FD3);
			mm.addFunction(sceZlibIsValidFunction, 0xE46EB986);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceZlibAdler32Function);
			mm.removeFunction(sceDeflateDecompressFunction);
			mm.removeFunction(sceGzipDecompressFunction);
			mm.removeFunction(sceGzipGetCommentFunction);
			mm.removeFunction(sceGzipGetCompressedDataFunction);
			mm.removeFunction(sceGzipGetInfoFunction);
			mm.removeFunction(sceGzipGetNameFunction);
			mm.removeFunction(sceGzipIsValidFunction);
			mm.removeFunction(sceZlibDecompressFunction);
			mm.removeFunction(sceZlibGetCompressedDataFunction);
			mm.removeFunction(sceZlibGetInfoFunction);
			mm.removeFunction(sceZlibIsValidFunction);
			
		}
	}
	
	
	public void sceZlibAdler32(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceZlibAdler32 [0x2EE39A64]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceDeflateDecompress(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceDeflateDecompress [0x44054E03]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceGzipDecompress(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceGzipDecompress [0x6DBCF897]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceGzipGetComment(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceGzipGetComment [0xB767F9A0]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceGzipGetCompressedData(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceGzipGetCompressedData [0x0BA3B9CC]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceGzipGetInfo(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceGzipGetInfo [0x8AA82C92]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceGzipGetName(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceGzipGetName [0x106A3552]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceGzipIsValid(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceGzipIsValid [0x1B5B82BC]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceZlibDecompress(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceZlibDecompress [0xA9E4FB28]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceZlibGetCompressedData(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceZlibGetCompressedData [0x6A548477]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceZlibGetInfo(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceZlibGetInfo [0xAFE01FD3]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceZlibIsValid(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceZlibIsValid [0xE46EB986]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceZlibAdler32Function = new HLEModuleFunction("sceDeflt", "sceZlibAdler32") {
		@Override
		public final void execute(Processor processor) {
			sceZlibAdler32(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceZlibAdler32(processor);";
		}
	};
    
	public final HLEModuleFunction sceDeflateDecompressFunction = new HLEModuleFunction("sceDeflt", "sceDeflateDecompress") {
		@Override
		public final void execute(Processor processor) {
			sceDeflateDecompress(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceDeflateDecompress(processor);";
		}
	};
    
	public final HLEModuleFunction sceGzipDecompressFunction = new HLEModuleFunction("sceDeflt", "sceGzipDecompress") {
		@Override
		public final void execute(Processor processor) {
			sceGzipDecompress(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceGzipDecompress(processor);";
		}
	};
    
	public final HLEModuleFunction sceGzipGetCommentFunction = new HLEModuleFunction("sceDeflt", "sceGzipGetComment") {
		@Override
		public final void execute(Processor processor) {
			sceGzipGetComment(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceGzipGetComment(processor);";
		}
	};
    
	public final HLEModuleFunction sceGzipGetCompressedDataFunction = new HLEModuleFunction("sceDeflt", "sceGzipGetCompressedData") {
		@Override
		public final void execute(Processor processor) {
			sceGzipGetCompressedData(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceGzipGetCompressedData(processor);";
		}
	};
    
	public final HLEModuleFunction sceGzipGetInfoFunction = new HLEModuleFunction("sceDeflt", "sceGzipGetInfo") {
		@Override
		public final void execute(Processor processor) {
			sceGzipGetInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceGzipGetInfo(processor);";
		}
	};
    
	public final HLEModuleFunction sceGzipGetNameFunction = new HLEModuleFunction("sceDeflt", "sceGzipGetName") {
		@Override
		public final void execute(Processor processor) {
			sceGzipGetName(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceGzipGetName(processor);";
		}
	};
    
	public final HLEModuleFunction sceGzipIsValidFunction = new HLEModuleFunction("sceDeflt", "sceGzipIsValid") {
		@Override
		public final void execute(Processor processor) {
			sceGzipIsValid(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceGzipIsValid(processor);";
		}
	};
    
	public final HLEModuleFunction sceZlibDecompressFunction = new HLEModuleFunction("sceDeflt", "sceZlibDecompress") {
		@Override
		public final void execute(Processor processor) {
			sceZlibDecompress(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceZlibDecompress(processor);";
		}
	};
    
	public final HLEModuleFunction sceZlibGetCompressedDataFunction = new HLEModuleFunction("sceDeflt", "sceZlibGetCompressedData") {
		@Override
		public final void execute(Processor processor) {
			sceZlibGetCompressedData(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceZlibGetCompressedData(processor);";
		}
	};
    
	public final HLEModuleFunction sceZlibGetInfoFunction = new HLEModuleFunction("sceDeflt", "sceZlibGetInfo") {
		@Override
		public final void execute(Processor processor) {
			sceZlibGetInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceZlibGetInfo(processor);";
		}
	};
    
	public final HLEModuleFunction sceZlibIsValidFunction = new HLEModuleFunction("sceDeflt", "sceZlibIsValid") {
		@Override
		public final void execute(Processor processor) {
			sceZlibIsValid(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceDefltModule.sceZlibIsValid(processor);";
		}
	};
    
};
