/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNetResolver implements HLEModule {
	@Override
	public String getName() { return "sceNetResolver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceNetResolverInitFunction, 0xF3370E61);
			
			mm.addFunction(sceNetResolverTermFunction, 0x6138194A);
			
			mm.addFunction(sceNetResolverCreateFunction, 0x244172AF);
			
			mm.addFunction(sceNetResolverDeleteFunction, 0x94523E09);
			
			mm.addFunction(sceNetResolverStartNtoAFunction, 0x224C5F44);
			
			mm.addFunction(sceNetResolverStartAtoNFunction, 0x629E2FB7);
			
			mm.addFunction(sceNetResolverStopFunction, 0x808F6063);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceNetResolverInitFunction);
			
			mm.removeFunction(sceNetResolverTermFunction);
			
			mm.removeFunction(sceNetResolverCreateFunction);
			
			mm.removeFunction(sceNetResolverDeleteFunction);
			
			mm.removeFunction(sceNetResolverStartNtoAFunction);
			
			mm.removeFunction(sceNetResolverStartAtoNFunction);
			
			mm.removeFunction(sceNetResolverStopFunction);
			
		}
	}
	
	
	public void sceNetResolverInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetResolverInit [0xF3370E61]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetResolverTerm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetResolverTerm [0x6138194A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetResolverCreate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetResolverCreate [0x244172AF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetResolverDelete(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetResolverDelete [0x94523E09]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetResolverStartNtoA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetResolverStartNtoA [0x224C5F44]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetResolverStartAtoN(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetResolverStartAtoN [0x629E2FB7]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceNetResolverStop(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceNetResolverStop [0x808F6063]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNetResolverInitFunction = new HLEModuleFunction("sceNetResolver", "sceNetResolverInit") {
		@Override
		public final void execute(Processor processor) {
			sceNetResolverInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetResolver.sceNetResolverInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetResolverTermFunction = new HLEModuleFunction("sceNetResolver", "sceNetResolverTerm") {
		@Override
		public final void execute(Processor processor) {
			sceNetResolverTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetResolver.sceNetResolverTermFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetResolverCreateFunction = new HLEModuleFunction("sceNetResolver", "sceNetResolverCreate") {
		@Override
		public final void execute(Processor processor) {
			sceNetResolverCreate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetResolver.sceNetResolverCreateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetResolverDeleteFunction = new HLEModuleFunction("sceNetResolver", "sceNetResolverDelete") {
		@Override
		public final void execute(Processor processor) {
			sceNetResolverDelete(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetResolver.sceNetResolverDeleteFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetResolverStartNtoAFunction = new HLEModuleFunction("sceNetResolver", "sceNetResolverStartNtoA") {
		@Override
		public final void execute(Processor processor) {
			sceNetResolverStartNtoA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetResolver.sceNetResolverStartNtoAFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetResolverStartAtoNFunction = new HLEModuleFunction("sceNetResolver", "sceNetResolverStartAtoN") {
		@Override
		public final void execute(Processor processor) {
			sceNetResolverStartAtoN(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetResolver.sceNetResolverStartAtoNFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetResolverStopFunction = new HLEModuleFunction("sceNetResolver", "sceNetResolverStop") {
		@Override
		public final void execute(Processor processor) {
			sceNetResolverStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceNetResolver.sceNetResolverStopFunction.execute(processor);";
		}
	};
    
};
