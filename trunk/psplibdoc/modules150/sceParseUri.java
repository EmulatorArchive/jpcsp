/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceParseUri implements HLEModule {
	@Override
	public String getName() { return "sceParseUri"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceUriEscapeFunction, 0x49E950EC);
			mm.addFunction(sceUriUnescapeFunction, 0x062BB07E);
			mm.addFunction(sceUriParseFunction, 0x568518C9);
			mm.addFunction(sceUriBuildFunction, 0x7EE318AF);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceUriEscapeFunction);
			mm.removeFunction(sceUriUnescapeFunction);
			mm.removeFunction(sceUriParseFunction);
			mm.removeFunction(sceUriBuildFunction);
			
		}
	}
	
	
	public void sceUriEscape(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUriEscape [0x49E950EC]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUriUnescape(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUriUnescape [0x062BB07E]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUriParse(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUriParse [0x568518C9]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public void sceUriBuild(Processor processor) {
		CpuState cpu = processor.cpu;

		Modules.log.debug("Unimplemented NID function sceUriBuild [0x7EE318AF]");

		cpu.gpr[2] = 0xDEADC0DE;
	}
    
	public final HLEModuleFunction sceUriEscapeFunction = new HLEModuleFunction("sceParseUri", "sceUriEscape") {
		@Override
		public final void execute(Processor processor) {
			sceUriEscape(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceParseUriModule.sceUriEscape(processor);";
		}
	};
    
	public final HLEModuleFunction sceUriUnescapeFunction = new HLEModuleFunction("sceParseUri", "sceUriUnescape") {
		@Override
		public final void execute(Processor processor) {
			sceUriUnescape(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceParseUriModule.sceUriUnescape(processor);";
		}
	};
    
	public final HLEModuleFunction sceUriParseFunction = new HLEModuleFunction("sceParseUri", "sceUriParse") {
		@Override
		public final void execute(Processor processor) {
			sceUriParse(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceParseUriModule.sceUriParse(processor);";
		}
	};
    
	public final HLEModuleFunction sceUriBuildFunction = new HLEModuleFunction("sceParseUri", "sceUriBuild") {
		@Override
		public final void execute(Processor processor) {
			sceUriBuild(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceParseUriModule.sceUriBuild(processor);";
		}
	};
    
};
