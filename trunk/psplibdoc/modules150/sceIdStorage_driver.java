/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceIdStorage_driver implements HLEModule {
	@Override
	public String getName() { return "sceIdStorage_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceIdStorageInitFunction, 0xAB129D20);
			mm.addFunction(sceIdStorageEndFunction, 0x2CE0BE69);
			mm.addFunction(sceIdStorageSuspendFunction, 0xF77565B6);
			mm.addFunction(sceIdStorageResumeFunction, 0xFE51173D);
			mm.addFunction(sceIdStorageGetLeafSizeFunction, 0xEB830733);
			mm.addFunction(sceIdStorageIsFormattedFunction, 0xFEFA40C2);
			mm.addFunction(sceIdStorageIsReadOnlyFunction, 0x2D633688);
			mm.addFunction(sceIdStorageIsDirtyFunction, 0xB9069BAD);
			mm.addFunction(sceIdStorageFormatFunction, 0x958089DB);
			mm.addFunction(sceIdStorageUnformatFunction, 0xF4BCB3EE);
			mm.addFunction(sceIdStorageReadLeafFunction, 0xEB00C509);
			mm.addFunction(sceIdStorageWriteLeafFunction, 0x1FA4D135);
			mm.addFunction(sceIdStorageCreateLeafFunction, 0x08A471A6);
			mm.addFunction(sceIdStorageDeleteLeafFunction, 0x2C97AB36);
			mm.addFunction(sceIdStorageCreateAtomicLeavesFunction, 0x99ACCB71);
			mm.addFunction(sceIdStorageGetFreeLeavesFunction, 0x37833CB8);
			mm.addFunction(sceIdStorageEnumIdFunction, 0x31E08AFB);
			mm.addFunction(sceIdStorageLookupFunction, 0x6FE062D1);
			mm.addFunction(sceIdStorageUpdateFunction, 0x683AAC10);
			mm.addFunction(sceIdStorageFlushFunction, 0x3AD32523);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceIdStorageInitFunction);
			mm.removeFunction(sceIdStorageEndFunction);
			mm.removeFunction(sceIdStorageSuspendFunction);
			mm.removeFunction(sceIdStorageResumeFunction);
			mm.removeFunction(sceIdStorageGetLeafSizeFunction);
			mm.removeFunction(sceIdStorageIsFormattedFunction);
			mm.removeFunction(sceIdStorageIsReadOnlyFunction);
			mm.removeFunction(sceIdStorageIsDirtyFunction);
			mm.removeFunction(sceIdStorageFormatFunction);
			mm.removeFunction(sceIdStorageUnformatFunction);
			mm.removeFunction(sceIdStorageReadLeafFunction);
			mm.removeFunction(sceIdStorageWriteLeafFunction);
			mm.removeFunction(sceIdStorageCreateLeafFunction);
			mm.removeFunction(sceIdStorageDeleteLeafFunction);
			mm.removeFunction(sceIdStorageCreateAtomicLeavesFunction);
			mm.removeFunction(sceIdStorageGetFreeLeavesFunction);
			mm.removeFunction(sceIdStorageEnumIdFunction);
			mm.removeFunction(sceIdStorageLookupFunction);
			mm.removeFunction(sceIdStorageUpdateFunction);
			mm.removeFunction(sceIdStorageFlushFunction);
			
		}
	}
	
	
	public void sceIdStorageInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageInit [0xAB129D20]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageEnd [0x2CE0BE69]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageSuspend [0xF77565B6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageResume [0xFE51173D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageGetLeafSize(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageGetLeafSize [0xEB830733]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageIsFormatted(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageIsFormatted [0xFEFA40C2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageIsReadOnly(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageIsReadOnly [0x2D633688]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageIsDirty(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageIsDirty [0xB9069BAD]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageFormat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageFormat [0x958089DB]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageUnformat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageUnformat [0xF4BCB3EE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageReadLeaf(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageReadLeaf [0xEB00C509]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageWriteLeaf(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageWriteLeaf [0x1FA4D135]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageCreateLeaf(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageCreateLeaf [0x08A471A6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageDeleteLeaf(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageDeleteLeaf [0x2C97AB36]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageCreateAtomicLeaves(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageCreateAtomicLeaves [0x99ACCB71]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageGetFreeLeaves(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageGetFreeLeaves [0x37833CB8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageEnumId(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageEnumId [0x31E08AFB]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageLookup(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageLookup [0x6FE062D1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageUpdate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageUpdate [0x683AAC10]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceIdStorageFlush(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceIdStorageFlush [0x3AD32523]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceIdStorageInitFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageInit") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageEndFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageEnd") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageEnd(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageSuspendFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageSuspend(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageResumeFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageResume") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageResume(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageGetLeafSizeFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageGetLeafSize") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageGetLeafSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageGetLeafSize(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageIsFormattedFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageIsFormatted") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageIsFormatted(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageIsFormatted(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageIsReadOnlyFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageIsReadOnly") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageIsReadOnly(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageIsReadOnly(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageIsDirtyFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageIsDirty") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageIsDirty(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageIsDirty(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageFormatFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageFormat") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageFormat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageFormat(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageUnformatFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageUnformat") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageUnformat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageUnformat(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageReadLeafFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageReadLeaf") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageReadLeaf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageReadLeaf(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageWriteLeafFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageWriteLeaf") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageWriteLeaf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageWriteLeaf(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageCreateLeafFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageCreateLeaf") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageCreateLeaf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageCreateLeaf(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageDeleteLeafFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageDeleteLeaf") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageDeleteLeaf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageDeleteLeaf(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageCreateAtomicLeavesFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageCreateAtomicLeaves") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageCreateAtomicLeaves(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageCreateAtomicLeaves(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageGetFreeLeavesFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageGetFreeLeaves") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageGetFreeLeaves(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageGetFreeLeaves(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageEnumIdFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageEnumId") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageEnumId(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageEnumId(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageLookupFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageLookup") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageLookup(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageLookup(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageUpdateFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageUpdate") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageUpdate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageUpdate(processor);";
		}
	};
    
	public final HLEModuleFunction sceIdStorageFlushFunction = new HLEModuleFunction("sceIdStorage_driver", "sceIdStorageFlush") {
		@Override
		public final void execute(Processor processor) {
			sceIdStorageFlush(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceIdStorage_driverModule.sceIdStorageFlush(processor);";
		}
	};
    
};
