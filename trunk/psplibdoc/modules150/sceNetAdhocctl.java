/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNetAdhocctl implements HLEModule {
	@Override
	public String getName() { return "sceNetAdhocctl"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceNetAdhocctlInitFunction, 0xE26F226E);
			mm.addFunction(sceNetAdhocctlTermFunction, 0x9D689E13);
			mm.addFunction(sceNetAdhocctlConnectFunction, 0x0AD043ED);
			mm.addFunction(sceNetAdhocctlCreateFunction, 0xEC0635C1);
			mm.addFunction(sceNetAdhocctlJoinFunction, 0x5E7F79C9);
			mm.addFunction(sceNetAdhocctlScanFunction, 0x08FFF7A0);
			mm.addFunction(sceNetAdhocctlDisconnectFunction, 0x34401D65);
			mm.addFunction(sceNetAdhocctlAddHandlerFunction, 0x20B317A0);
			mm.addFunction(sceNetAdhocctlDelHandlerFunction, 0x6402490B);
			mm.addFunction(sceNetAdhocctlGetStateFunction, 0x75ECD386);
			mm.addFunction(sceNetAdhocctlGetAdhocIdFunction, 0x362CBE8F);
			mm.addFunction(sceNetAdhocctlGetPeerListFunction, 0xE162CB14);
			mm.addFunction(sceNetAdhocctlGetAddrByNameFunction, 0x99560ABE);
			mm.addFunction(sceNetAdhocctlGetNameByAddrFunction, 0x8916C003);
			mm.addFunction(sceNetAdhocctlGetParameterFunction, 0xDED9D28E);
			mm.addFunction(sceNetAdhocctlGetScanInfoFunction, 0x81AEE1BE);
			mm.addFunction(sceNetAdhocctlCreateEnterGameModeFunction, 0xA5C055CE);
			mm.addFunction(sceNetAdhocctlJoinEnterGameModeFunction, 0x1FF89745);
			mm.addFunction(sceNetAdhocctlExitGameModeFunction, 0xCF8E084D);
			mm.addFunction(sceNetAdhocctlGetGameModeInfoFunction, 0x5A014CE0);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceNetAdhocctlInitFunction);
			mm.removeFunction(sceNetAdhocctlTermFunction);
			mm.removeFunction(sceNetAdhocctlConnectFunction);
			mm.removeFunction(sceNetAdhocctlCreateFunction);
			mm.removeFunction(sceNetAdhocctlJoinFunction);
			mm.removeFunction(sceNetAdhocctlScanFunction);
			mm.removeFunction(sceNetAdhocctlDisconnectFunction);
			mm.removeFunction(sceNetAdhocctlAddHandlerFunction);
			mm.removeFunction(sceNetAdhocctlDelHandlerFunction);
			mm.removeFunction(sceNetAdhocctlGetStateFunction);
			mm.removeFunction(sceNetAdhocctlGetAdhocIdFunction);
			mm.removeFunction(sceNetAdhocctlGetPeerListFunction);
			mm.removeFunction(sceNetAdhocctlGetAddrByNameFunction);
			mm.removeFunction(sceNetAdhocctlGetNameByAddrFunction);
			mm.removeFunction(sceNetAdhocctlGetParameterFunction);
			mm.removeFunction(sceNetAdhocctlGetScanInfoFunction);
			mm.removeFunction(sceNetAdhocctlCreateEnterGameModeFunction);
			mm.removeFunction(sceNetAdhocctlJoinEnterGameModeFunction);
			mm.removeFunction(sceNetAdhocctlExitGameModeFunction);
			mm.removeFunction(sceNetAdhocctlGetGameModeInfoFunction);
			
		}
	}
	
	
	public void sceNetAdhocctlInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlInit [0xE26F226E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlTerm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlTerm [0x9D689E13]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlConnect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlConnect [0x0AD043ED]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlCreate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlCreate [0xEC0635C1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlJoin(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlJoin [0x5E7F79C9]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlScan(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlScan [0x08FFF7A0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlDisconnect(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlDisconnect [0x34401D65]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlAddHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlAddHandler [0x20B317A0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlDelHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlDelHandler [0x6402490B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetState(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetState [0x75ECD386]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetAdhocId(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetAdhocId [0x362CBE8F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetPeerList(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetPeerList [0xE162CB14]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetAddrByName(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetAddrByName [0x99560ABE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetNameByAddr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetNameByAddr [0x8916C003]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetParameter(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetParameter [0xDED9D28E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetScanInfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetScanInfo [0x81AEE1BE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlCreateEnterGameMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlCreateEnterGameMode [0xA5C055CE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlJoinEnterGameMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlJoinEnterGameMode [0x1FF89745]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlExitGameMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlExitGameMode [0xCF8E084D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocctlGetGameModeInfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocctlGetGameModeInfo [0x5A014CE0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNetAdhocctlInitFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlInit") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlTermFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlTerm") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlTerm(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlConnectFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlConnect") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlConnect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlConnect(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlCreateFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlCreate") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlCreate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlCreate(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlJoinFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlJoin") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlJoin(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlJoin(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlScanFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlScan") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlScan(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlScan(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlDisconnectFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlDisconnect") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlDisconnect(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlDisconnect(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlAddHandlerFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlAddHandler") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlAddHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlAddHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlDelHandlerFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlDelHandler") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlDelHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlDelHandler(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetStateFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetState") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetState(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetState(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetAdhocIdFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetAdhocId") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetAdhocId(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetAdhocId(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetPeerListFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetPeerList") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetPeerList(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetPeerList(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetAddrByNameFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetAddrByName") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetAddrByName(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetAddrByName(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetNameByAddrFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetNameByAddr") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetNameByAddr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetNameByAddr(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetParameterFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetParameter") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetParameter(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetParameter(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetScanInfoFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetScanInfo") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetScanInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetScanInfo(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlCreateEnterGameModeFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlCreateEnterGameMode") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlCreateEnterGameMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlCreateEnterGameMode(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlJoinEnterGameModeFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlJoinEnterGameMode") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlJoinEnterGameMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlJoinEnterGameMode(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlExitGameModeFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlExitGameMode") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlExitGameMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlExitGameMode(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocctlGetGameModeInfoFunction = new HLEModuleFunction("sceNetAdhocctl", "sceNetAdhocctlGetGameModeInfo") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocctlGetGameModeInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocctlModule.sceNetAdhocctlGetGameModeInfo(processor);";
		}
	};
    
};
