/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNetAdhocDownload implements HLEModule {
	@Override
	public String getName() { return "sceNetAdhocDownload"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceNetAdhocDownloadInitServerFunction, 0xA21FEF45);
			mm.addFunction(sceNetAdhocDownloadCreateServerFunction, 0x13DAB550);
			mm.addFunction(sceNetAdhocDownloadStartServerFunction, 0x2B6FB0DA);
			mm.addFunction(sceNetAdhocDownloadReplySessionFunction, 0xF8FC359E);
			mm.addFunction(sceNetAdhocDownloadAbortReplySessionFunction, 0xC421875C);
			mm.addFunction(sceNetAdhocDownloadSendFunction, 0xD0189004);
			mm.addFunction(sceNetAdhocDownloadAbortSendFunction, 0xA70FDFBE);
			mm.addFunction(sceNetAdhocDownloadStopServerFunction, 0xF76147B1);
			mm.addFunction(sceNetAdhocDownloadDeleteServerFunction, 0x7A483F9E);
			mm.addFunction(sceNetAdhocDownloadTermServerFunction, 0x117CA01A);
			mm.addFunction(sceNetAdhocDownloadInitClientFunction, 0x3082F4E2);
			mm.addFunction(sceNetAdhocDownloadCreateClientFunction, 0x57A51DD0);
			mm.addFunction(sceNetAdhocDownloadStartClientFunction, 0x314ED31E);
			mm.addFunction(sceNetAdhocDownloadGetServerListFunction, 0x22C2BCC6);
			mm.addFunction(sceNetAdhocDownloadRequestSessionFunction, 0x4E6029F1);
			mm.addFunction(sceNetAdhocDownloadAbortRequestSessionFunction, 0x8A5500E0);
			mm.addFunction(sceNetAdhocDownloadRecvFunction, 0x8846D2B0);
			mm.addFunction(sceNetAdhocDownloadAbortRecvFunction, 0x1AD5CC88);
			mm.addFunction(sceNetAdhocDownloadStopClientFunction, 0x469F6B83);
			mm.addFunction(sceNetAdhocDownloadDeleteClientFunction, 0x378D4311);
			mm.addFunction(sceNetAdhocDownloadTermClientFunction, 0xBF1433F0);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceNetAdhocDownloadInitServerFunction);
			mm.removeFunction(sceNetAdhocDownloadCreateServerFunction);
			mm.removeFunction(sceNetAdhocDownloadStartServerFunction);
			mm.removeFunction(sceNetAdhocDownloadReplySessionFunction);
			mm.removeFunction(sceNetAdhocDownloadAbortReplySessionFunction);
			mm.removeFunction(sceNetAdhocDownloadSendFunction);
			mm.removeFunction(sceNetAdhocDownloadAbortSendFunction);
			mm.removeFunction(sceNetAdhocDownloadStopServerFunction);
			mm.removeFunction(sceNetAdhocDownloadDeleteServerFunction);
			mm.removeFunction(sceNetAdhocDownloadTermServerFunction);
			mm.removeFunction(sceNetAdhocDownloadInitClientFunction);
			mm.removeFunction(sceNetAdhocDownloadCreateClientFunction);
			mm.removeFunction(sceNetAdhocDownloadStartClientFunction);
			mm.removeFunction(sceNetAdhocDownloadGetServerListFunction);
			mm.removeFunction(sceNetAdhocDownloadRequestSessionFunction);
			mm.removeFunction(sceNetAdhocDownloadAbortRequestSessionFunction);
			mm.removeFunction(sceNetAdhocDownloadRecvFunction);
			mm.removeFunction(sceNetAdhocDownloadAbortRecvFunction);
			mm.removeFunction(sceNetAdhocDownloadStopClientFunction);
			mm.removeFunction(sceNetAdhocDownloadDeleteClientFunction);
			mm.removeFunction(sceNetAdhocDownloadTermClientFunction);
			
		}
	}
	
	
	public void sceNetAdhocDownloadInitServer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadInitServer [0xA21FEF45]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadCreateServer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadCreateServer [0x13DAB550]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadStartServer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadStartServer [0x2B6FB0DA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadReplySession(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadReplySession [0xF8FC359E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadAbortReplySession(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadAbortReplySession [0xC421875C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadSend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadSend [0xD0189004]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadAbortSend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadAbortSend [0xA70FDFBE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadStopServer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadStopServer [0xF76147B1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadDeleteServer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadDeleteServer [0x7A483F9E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadTermServer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadTermServer [0x117CA01A]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadInitClient(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadInitClient [0x3082F4E2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadCreateClient(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadCreateClient [0x57A51DD0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadStartClient(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadStartClient [0x314ED31E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadGetServerList(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadGetServerList [0x22C2BCC6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadRequestSession(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadRequestSession [0x4E6029F1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadAbortRequestSession(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadAbortRequestSession [0x8A5500E0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadRecv(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadRecv [0x8846D2B0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadAbortRecv(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadAbortRecv [0x1AD5CC88]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadStopClient(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadStopClient [0x469F6B83]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadDeleteClient(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadDeleteClient [0x378D4311]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAdhocDownloadTermClient(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAdhocDownloadTermClient [0xBF1433F0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNetAdhocDownloadInitServerFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadInitServer") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadInitServer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadInitServer(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadCreateServerFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadCreateServer") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadCreateServer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadCreateServer(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadStartServerFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadStartServer") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadStartServer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadStartServer(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadReplySessionFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadReplySession") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadReplySession(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadReplySession(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadAbortReplySessionFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadAbortReplySession") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadAbortReplySession(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadAbortReplySession(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadSendFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadSend") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadSend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadSend(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadAbortSendFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadAbortSend") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadAbortSend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadAbortSend(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadStopServerFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadStopServer") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadStopServer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadStopServer(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadDeleteServerFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadDeleteServer") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadDeleteServer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadDeleteServer(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadTermServerFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadTermServer") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadTermServer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadTermServer(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadInitClientFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadInitClient") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadInitClient(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadInitClient(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadCreateClientFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadCreateClient") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadCreateClient(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadCreateClient(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadStartClientFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadStartClient") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadStartClient(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadStartClient(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadGetServerListFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadGetServerList") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadGetServerList(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadGetServerList(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadRequestSessionFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadRequestSession") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadRequestSession(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadRequestSession(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadAbortRequestSessionFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadAbortRequestSession") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadAbortRequestSession(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadAbortRequestSession(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadRecvFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadRecv") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadRecv(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadRecv(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadAbortRecvFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadAbortRecv") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadAbortRecv(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadAbortRecv(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadStopClientFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadStopClient") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadStopClient(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadStopClient(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadDeleteClientFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadDeleteClient") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadDeleteClient(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadDeleteClient(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAdhocDownloadTermClientFunction = new HLEModuleFunction("sceNetAdhocDownload", "sceNetAdhocDownloadTermClient") {
		@Override
		public final void execute(Processor processor) {
			sceNetAdhocDownloadTermClient(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetAdhocDownloadModule.sceNetAdhocDownloadTermClient(processor);";
		}
	};
    
};
