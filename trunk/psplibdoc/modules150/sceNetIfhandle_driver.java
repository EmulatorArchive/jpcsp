/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceNetIfhandle_driver implements HLEModule {
	@Override
	public String getName() { return "sceNetIfhandle_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceNetIfhandleInitFunction, 0x30F69334);
			mm.addFunction(sceNetIfhandleTermFunction, 0xB9096E48);
			mm.addFunction(sceNetIfhandleGetAttachEtherFunction, 0xB8188F96);
			mm.addFunction(sceNetIfhandleGetDetachEtherFunction, 0x4FB43BCE);
			mm.addFunction(sceNetIfhandleIfStartFunction, 0xB1F5BB87);
			mm.addFunction(sceNetIfhandleIfUpFunction, 0x8FCB05A1);
			mm.addFunction(sceNetIfhandleIfDownFunction, 0xEAD3A759);
			mm.addFunction(sceNetIfhandleIfIoctlFunction, 0x0296C7D6);
			mm.addFunction(sceNetIfhandleIfDequeueFunction, 0xE440A7D8);
			mm.addFunction(sceNetIfhandleSignalSemaFunction, 0x30602CE9);
			mm.addFunction(sceNetIfhandleWaitSemaFunction, 0xD5DA7B3C);
			mm.addFunction(sceNetIfhandlePollSemaFunction, 0x2162EE67);
			mm.addFunction(sceNetCreateIfhandleEtherFunction, 0x16042084);
			mm.addFunction(sceNetDestroyIfhandleEtherFunction, 0xC9344A59);
			mm.addFunction(sceNetAttachIfhandleEtherFunction, 0xAE81C0CB);
			mm.addFunction(sceNetDetachIfhandleEtherFunction, 0x54D1AEA1);
			mm.addFunction(sceNetSendIfEventFunction, 0xF94BAF52);
			mm.addFunction(sceNetFlagIfEventFunction, 0x263767F6);
			mm.addFunction(sceNetIfDequeueFunction, 0xE2F4F1C9);
			mm.addFunction(sceNetIfEnqueueFunction, 0xC28F6FF2);
			mm.addFunction(sceNetIfPrependFunction, 0x16246B99);
			mm.addFunction(sceNetIfhandle_driver_C6D14282Function, 0xC6D14282);
			mm.addFunction(sceNetIfhandle_driver_D5AD6DEAFunction, 0xD5AD6DEA);
			mm.addFunction(sceNetIfhandle_driver_0C391E9FFunction, 0x0C391E9F);
			mm.addFunction(sceNetIfhandle_driver_29ED84C5Function, 0x29ED84C5);
			mm.addFunction(sceNetMallocInternalFunction, 0x15CFE3C0);
			mm.addFunction(sceNetFreeInternalFunction, 0x76BAD213);
			mm.addFunction(sceNetGetMallocStatInternalFunction, 0x4C2886CB);
			mm.addFunction(sceNetIfhandle_driver_0FB8AE0DFunction, 0x0FB8AE0D);
			mm.addFunction(sceNetIfhandle_driver_5FB31C72Function, 0x5FB31C72);
			mm.addFunction(sceNetIfhandle_driver_62B20015Function, 0x62B20015);
			mm.addFunction(sceNetMAdjFunction, 0xBFF3CEA5);
			mm.addFunction(sceNetMCatFunction, 0x3E8DD3F8);
			mm.addFunction(sceNetMCopybackFunction, 0x1560F143);
			mm.addFunction(sceNetMCopydataFunction, 0x9A6261EC);
			mm.addFunction(sceNetMCopymFunction, 0x456E3146);
			mm.addFunction(sceNetIfhandle_driver_955F2924Function, 0x955F2924);
			mm.addFunction(sceNetMDupFunction, 0x6AB53C27);
			mm.addFunction(sceNetMFreeFunction, 0xF8825DC4);
			mm.addFunction(sceNetMFreemFunction, 0xF56FAC82);
			mm.addFunction(sceNetMGetFunction, 0xA493AA5F);
			mm.addFunction(sceNetMGetclrFunction, 0x59F0D619);
			mm.addFunction(sceNetMGethdrFunction, 0x4CF15C43);
			mm.addFunction(sceNetMPrependFunction, 0xC3325FDC);
			mm.addFunction(sceNetMPulldownFunction, 0xE80F00A4);
			mm.addFunction(sceNetMPullupFunction, 0x49EDBB18);
			mm.addFunction(sceNetIfhandle_driver_0542835FFunction, 0x0542835F);
			mm.addFunction(sceNetIfhandle_driver_773FC77CFunction, 0x773FC77C);
			mm.addFunction(sceNetIfhandle_driver_9CBA24D4Function, 0x9CBA24D4);
			mm.addFunction(sceNetIfhandle_driver_C5623112Function, 0xC5623112);
			mm.addFunction(sceNetGetDropRateFunction, 0xC80181A2);
			mm.addFunction(sceNetSetDropRateFunction, 0xFD8585E1);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceNetIfhandleInitFunction);
			mm.removeFunction(sceNetIfhandleTermFunction);
			mm.removeFunction(sceNetIfhandleGetAttachEtherFunction);
			mm.removeFunction(sceNetIfhandleGetDetachEtherFunction);
			mm.removeFunction(sceNetIfhandleIfStartFunction);
			mm.removeFunction(sceNetIfhandleIfUpFunction);
			mm.removeFunction(sceNetIfhandleIfDownFunction);
			mm.removeFunction(sceNetIfhandleIfIoctlFunction);
			mm.removeFunction(sceNetIfhandleIfDequeueFunction);
			mm.removeFunction(sceNetIfhandleSignalSemaFunction);
			mm.removeFunction(sceNetIfhandleWaitSemaFunction);
			mm.removeFunction(sceNetIfhandlePollSemaFunction);
			mm.removeFunction(sceNetCreateIfhandleEtherFunction);
			mm.removeFunction(sceNetDestroyIfhandleEtherFunction);
			mm.removeFunction(sceNetAttachIfhandleEtherFunction);
			mm.removeFunction(sceNetDetachIfhandleEtherFunction);
			mm.removeFunction(sceNetSendIfEventFunction);
			mm.removeFunction(sceNetFlagIfEventFunction);
			mm.removeFunction(sceNetIfDequeueFunction);
			mm.removeFunction(sceNetIfEnqueueFunction);
			mm.removeFunction(sceNetIfPrependFunction);
			mm.removeFunction(sceNetIfhandle_driver_C6D14282Function);
			mm.removeFunction(sceNetIfhandle_driver_D5AD6DEAFunction);
			mm.removeFunction(sceNetIfhandle_driver_0C391E9FFunction);
			mm.removeFunction(sceNetIfhandle_driver_29ED84C5Function);
			mm.removeFunction(sceNetMallocInternalFunction);
			mm.removeFunction(sceNetFreeInternalFunction);
			mm.removeFunction(sceNetGetMallocStatInternalFunction);
			mm.removeFunction(sceNetIfhandle_driver_0FB8AE0DFunction);
			mm.removeFunction(sceNetIfhandle_driver_5FB31C72Function);
			mm.removeFunction(sceNetIfhandle_driver_62B20015Function);
			mm.removeFunction(sceNetMAdjFunction);
			mm.removeFunction(sceNetMCatFunction);
			mm.removeFunction(sceNetMCopybackFunction);
			mm.removeFunction(sceNetMCopydataFunction);
			mm.removeFunction(sceNetMCopymFunction);
			mm.removeFunction(sceNetIfhandle_driver_955F2924Function);
			mm.removeFunction(sceNetMDupFunction);
			mm.removeFunction(sceNetMFreeFunction);
			mm.removeFunction(sceNetMFreemFunction);
			mm.removeFunction(sceNetMGetFunction);
			mm.removeFunction(sceNetMGetclrFunction);
			mm.removeFunction(sceNetMGethdrFunction);
			mm.removeFunction(sceNetMPrependFunction);
			mm.removeFunction(sceNetMPulldownFunction);
			mm.removeFunction(sceNetMPullupFunction);
			mm.removeFunction(sceNetIfhandle_driver_0542835FFunction);
			mm.removeFunction(sceNetIfhandle_driver_773FC77CFunction);
			mm.removeFunction(sceNetIfhandle_driver_9CBA24D4Function);
			mm.removeFunction(sceNetIfhandle_driver_C5623112Function);
			mm.removeFunction(sceNetGetDropRateFunction);
			mm.removeFunction(sceNetSetDropRateFunction);
			
		}
	}
	
	
	public void sceNetIfhandleInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleInit [0x30F69334]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleTerm(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleTerm [0xB9096E48]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleGetAttachEther(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleGetAttachEther [0xB8188F96]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleGetDetachEther(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleGetDetachEther [0x4FB43BCE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleIfStart(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleIfStart [0xB1F5BB87]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleIfUp(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleIfUp [0x8FCB05A1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleIfDown(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleIfDown [0xEAD3A759]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleIfIoctl(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleIfIoctl [0x0296C7D6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleIfDequeue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleIfDequeue [0xE440A7D8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleSignalSema(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleSignalSema [0x30602CE9]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandleWaitSema(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandleWaitSema [0xD5DA7B3C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandlePollSema(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandlePollSema [0x2162EE67]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetCreateIfhandleEther(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetCreateIfhandleEther [0x16042084]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetDestroyIfhandleEther(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetDestroyIfhandleEther [0xC9344A59]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetAttachIfhandleEther(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetAttachIfhandleEther [0xAE81C0CB]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetDetachIfhandleEther(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetDetachIfhandleEther [0x54D1AEA1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetSendIfEvent(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetSendIfEvent [0xF94BAF52]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetFlagIfEvent(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetFlagIfEvent [0x263767F6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfDequeue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfDequeue [0xE2F4F1C9]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfEnqueue(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfEnqueue [0xC28F6FF2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfPrepend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfPrepend [0x16246B99]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_C6D14282(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_C6D14282 [0xC6D14282]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_D5AD6DEA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_D5AD6DEA [0xD5AD6DEA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_0C391E9F(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_0C391E9F [0x0C391E9F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_29ED84C5(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_29ED84C5 [0x29ED84C5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMallocInternal(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMallocInternal [0x15CFE3C0]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetFreeInternal(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetFreeInternal [0x76BAD213]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetGetMallocStatInternal(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetGetMallocStatInternal [0x4C2886CB]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_0FB8AE0D(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_0FB8AE0D [0x0FB8AE0D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_5FB31C72(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_5FB31C72 [0x5FB31C72]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_62B20015(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_62B20015 [0x62B20015]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMAdj(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMAdj [0xBFF3CEA5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMCat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMCat [0x3E8DD3F8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMCopyback(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMCopyback [0x1560F143]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMCopydata(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMCopydata [0x9A6261EC]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMCopym(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMCopym [0x456E3146]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_955F2924(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_955F2924 [0x955F2924]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMDup(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMDup [0x6AB53C27]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMFree(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMFree [0xF8825DC4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMFreem(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMFreem [0xF56FAC82]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMGet(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMGet [0xA493AA5F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMGetclr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMGetclr [0x59F0D619]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMGethdr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMGethdr [0x4CF15C43]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMPrepend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMPrepend [0xC3325FDC]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMPulldown(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMPulldown [0xE80F00A4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetMPullup(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetMPullup [0x49EDBB18]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_0542835F(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_0542835F [0x0542835F]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_773FC77C(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_773FC77C [0x773FC77C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_9CBA24D4(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_9CBA24D4 [0x9CBA24D4]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetIfhandle_driver_C5623112(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetIfhandle_driver_C5623112 [0xC5623112]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetGetDropRate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetGetDropRate [0xC80181A2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public void sceNetSetDropRate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;
		
		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceNetSetDropRate [0xFD8585E1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceNetIfhandleInitFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleInit") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleInit(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleTermFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleTerm") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleTerm(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleTerm(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleGetAttachEtherFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleGetAttachEther") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleGetAttachEther(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleGetAttachEther(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleGetDetachEtherFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleGetDetachEther") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleGetDetachEther(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleGetDetachEther(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleIfStartFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleIfStart") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleIfStart(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleIfStart(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleIfUpFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleIfUp") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleIfUp(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleIfUp(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleIfDownFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleIfDown") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleIfDown(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleIfDown(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleIfIoctlFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleIfIoctl") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleIfIoctl(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleIfIoctl(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleIfDequeueFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleIfDequeue") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleIfDequeue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleIfDequeue(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleSignalSemaFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleSignalSema") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleSignalSema(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleSignalSema(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandleWaitSemaFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandleWaitSema") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandleWaitSema(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandleWaitSema(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandlePollSemaFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandlePollSema") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandlePollSema(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandlePollSema(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetCreateIfhandleEtherFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetCreateIfhandleEther") {
		@Override
		public final void execute(Processor processor) {
			sceNetCreateIfhandleEther(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetCreateIfhandleEther(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetDestroyIfhandleEtherFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetDestroyIfhandleEther") {
		@Override
		public final void execute(Processor processor) {
			sceNetDestroyIfhandleEther(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetDestroyIfhandleEther(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetAttachIfhandleEtherFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetAttachIfhandleEther") {
		@Override
		public final void execute(Processor processor) {
			sceNetAttachIfhandleEther(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetAttachIfhandleEther(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetDetachIfhandleEtherFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetDetachIfhandleEther") {
		@Override
		public final void execute(Processor processor) {
			sceNetDetachIfhandleEther(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetDetachIfhandleEther(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetSendIfEventFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetSendIfEvent") {
		@Override
		public final void execute(Processor processor) {
			sceNetSendIfEvent(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetSendIfEvent(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetFlagIfEventFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetFlagIfEvent") {
		@Override
		public final void execute(Processor processor) {
			sceNetFlagIfEvent(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetFlagIfEvent(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfDequeueFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfDequeue") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfDequeue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfDequeue(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfEnqueueFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfEnqueue") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfEnqueue(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfEnqueue(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfPrependFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfPrepend") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfPrepend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfPrepend(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_C6D14282Function = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_C6D14282") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_C6D14282(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_C6D14282(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_D5AD6DEAFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_D5AD6DEA") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_D5AD6DEA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_D5AD6DEA(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_0C391E9FFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_0C391E9F") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_0C391E9F(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_0C391E9F(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_29ED84C5Function = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_29ED84C5") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_29ED84C5(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_29ED84C5(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMallocInternalFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMallocInternal") {
		@Override
		public final void execute(Processor processor) {
			sceNetMallocInternal(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMallocInternal(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetFreeInternalFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetFreeInternal") {
		@Override
		public final void execute(Processor processor) {
			sceNetFreeInternal(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetFreeInternal(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetGetMallocStatInternalFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetGetMallocStatInternal") {
		@Override
		public final void execute(Processor processor) {
			sceNetGetMallocStatInternal(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetGetMallocStatInternal(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_0FB8AE0DFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_0FB8AE0D") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_0FB8AE0D(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_0FB8AE0D(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_5FB31C72Function = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_5FB31C72") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_5FB31C72(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_5FB31C72(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_62B20015Function = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_62B20015") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_62B20015(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_62B20015(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMAdjFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMAdj") {
		@Override
		public final void execute(Processor processor) {
			sceNetMAdj(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMAdj(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMCatFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMCat") {
		@Override
		public final void execute(Processor processor) {
			sceNetMCat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMCat(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMCopybackFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMCopyback") {
		@Override
		public final void execute(Processor processor) {
			sceNetMCopyback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMCopyback(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMCopydataFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMCopydata") {
		@Override
		public final void execute(Processor processor) {
			sceNetMCopydata(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMCopydata(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMCopymFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMCopym") {
		@Override
		public final void execute(Processor processor) {
			sceNetMCopym(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMCopym(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_955F2924Function = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_955F2924") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_955F2924(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_955F2924(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMDupFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMDup") {
		@Override
		public final void execute(Processor processor) {
			sceNetMDup(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMDup(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMFreeFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMFree") {
		@Override
		public final void execute(Processor processor) {
			sceNetMFree(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMFree(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMFreemFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMFreem") {
		@Override
		public final void execute(Processor processor) {
			sceNetMFreem(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMFreem(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMGetFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMGet") {
		@Override
		public final void execute(Processor processor) {
			sceNetMGet(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMGet(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMGetclrFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMGetclr") {
		@Override
		public final void execute(Processor processor) {
			sceNetMGetclr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMGetclr(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMGethdrFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMGethdr") {
		@Override
		public final void execute(Processor processor) {
			sceNetMGethdr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMGethdr(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMPrependFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMPrepend") {
		@Override
		public final void execute(Processor processor) {
			sceNetMPrepend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMPrepend(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMPulldownFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMPulldown") {
		@Override
		public final void execute(Processor processor) {
			sceNetMPulldown(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMPulldown(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetMPullupFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetMPullup") {
		@Override
		public final void execute(Processor processor) {
			sceNetMPullup(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetMPullup(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_0542835FFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_0542835F") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_0542835F(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_0542835F(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_773FC77CFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_773FC77C") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_773FC77C(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_773FC77C(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_9CBA24D4Function = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_9CBA24D4") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_9CBA24D4(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_9CBA24D4(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetIfhandle_driver_C5623112Function = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetIfhandle_driver_C5623112") {
		@Override
		public final void execute(Processor processor) {
			sceNetIfhandle_driver_C5623112(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetIfhandle_driver_C5623112(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetGetDropRateFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetGetDropRate") {
		@Override
		public final void execute(Processor processor) {
			sceNetGetDropRate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetGetDropRate(processor);";
		}
	};
    
	public final HLEModuleFunction sceNetSetDropRateFunction = new HLEModuleFunction("sceNetIfhandle_driver", "sceNetSetDropRate") {
		@Override
		public final void execute(Processor processor) {
			sceNetSetDropRate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceNetIfhandle_driverModule.sceNetSetDropRate(processor);";
		}
	};
    
};
