/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceGpio_driver implements HLEModule {
	@Override
	public String getName() { return "sceGpio_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceGpioInitFunction, 0xEABDB328);
			
			mm.addFunction(sceGpioEndFunction, 0x4A992B24);
			
			mm.addFunction(sceGpioSuspendFunction, 0x17DAA8C2);
			
			mm.addFunction(sceGpioResumeFunction, 0x64CD4536);
			
			mm.addFunction(sceGpioPortReadFunction, 0x4250D44A);
			
			mm.addFunction(sceGpioPortSetFunction, 0x310F0CCF);
			
			mm.addFunction(sceGpioPortClearFunction, 0x103C3EB2);
			
			mm.addFunction(sceGpio_driver_95135905Function, 0x95135905);
			
			mm.addFunction(sceGpioSetPortModeFunction, 0x317D9D2C);
			
			mm.addFunction(sceGpioGetPortModeFunction, 0xCA8BE2EA);
			
			mm.addFunction(sceGpioSetIntrModeFunction, 0x37C8DADC);
			
			mm.addFunction(sceGpioGetIntrModeFunction, 0xF856CE46);
			
			mm.addFunction(sceGpioEnableIntrFunction, 0x785206CD);
			
			mm.addFunction(sceGpioDisableIntrFunction, 0x95D7F3B8);
			
			mm.addFunction(sceGpioQueryIntrFunction, 0x31F34AE6);
			
			mm.addFunction(sceGpioAcquireIntrFunction, 0xBE77D1D0);
			
			mm.addFunction(sceGpio_driver_C6928224Function, 0xC6928224);
			
			mm.addFunction(sceGpio_driver_6B38B826Function, 0x6B38B826);
			
			mm.addFunction(sceGpio_driver_5691CEFAFunction, 0x5691CEFA);
			
			mm.addFunction(sceGpio_driver_2CDC8EDCFunction, 0x2CDC8EDC);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceGpioInitFunction);
			
			mm.removeFunction(sceGpioEndFunction);
			
			mm.removeFunction(sceGpioSuspendFunction);
			
			mm.removeFunction(sceGpioResumeFunction);
			
			mm.removeFunction(sceGpioPortReadFunction);
			
			mm.removeFunction(sceGpioPortSetFunction);
			
			mm.removeFunction(sceGpioPortClearFunction);
			
			mm.removeFunction(sceGpio_driver_95135905Function);
			
			mm.removeFunction(sceGpioSetPortModeFunction);
			
			mm.removeFunction(sceGpioGetPortModeFunction);
			
			mm.removeFunction(sceGpioSetIntrModeFunction);
			
			mm.removeFunction(sceGpioGetIntrModeFunction);
			
			mm.removeFunction(sceGpioEnableIntrFunction);
			
			mm.removeFunction(sceGpioDisableIntrFunction);
			
			mm.removeFunction(sceGpioQueryIntrFunction);
			
			mm.removeFunction(sceGpioAcquireIntrFunction);
			
			mm.removeFunction(sceGpio_driver_C6928224Function);
			
			mm.removeFunction(sceGpio_driver_6B38B826Function);
			
			mm.removeFunction(sceGpio_driver_5691CEFAFunction);
			
			mm.removeFunction(sceGpio_driver_2CDC8EDCFunction);
			
		}
	}
	
	
	public void sceGpioInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioInit [0xEABDB328]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioEnd [0x4A992B24]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioSuspend [0x17DAA8C2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioResume(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioResume [0x64CD4536]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioPortRead(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioPortRead [0x4250D44A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioPortSet(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioPortSet [0x310F0CCF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioPortClear(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioPortClear [0x103C3EB2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpio_driver_95135905(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpio_driver_95135905 [0x95135905]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioSetPortMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioSetPortMode [0x317D9D2C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioGetPortMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioGetPortMode [0xCA8BE2EA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioSetIntrMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioSetIntrMode [0x37C8DADC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioGetIntrMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioGetIntrMode [0xF856CE46]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioEnableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioEnableIntr [0x785206CD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioDisableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioDisableIntr [0x95D7F3B8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioQueryIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioQueryIntr [0x31F34AE6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpioAcquireIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpioAcquireIntr [0xBE77D1D0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpio_driver_C6928224(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpio_driver_C6928224 [0xC6928224]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpio_driver_6B38B826(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpio_driver_6B38B826 [0x6B38B826]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpio_driver_5691CEFA(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpio_driver_5691CEFA [0x5691CEFA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceGpio_driver_2CDC8EDC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceGpio_driver_2CDC8EDC [0x2CDC8EDC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceGpioInitFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioInit") {
		@Override
		public final void execute(Processor processor) {
			sceGpioInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioEndFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioEnd") {
		@Override
		public final void execute(Processor processor) {
			sceGpioEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioSuspendFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioSuspend") {
		@Override
		public final void execute(Processor processor) {
			sceGpioSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioResumeFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioResume") {
		@Override
		public final void execute(Processor processor) {
			sceGpioResume(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioResumeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioPortReadFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioPortRead") {
		@Override
		public final void execute(Processor processor) {
			sceGpioPortRead(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioPortReadFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioPortSetFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioPortSet") {
		@Override
		public final void execute(Processor processor) {
			sceGpioPortSet(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioPortSetFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioPortClearFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioPortClear") {
		@Override
		public final void execute(Processor processor) {
			sceGpioPortClear(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioPortClearFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpio_driver_95135905Function = new HLEModuleFunction("sceGpio_driver", "sceGpio_driver_95135905") {
		@Override
		public final void execute(Processor processor) {
			sceGpio_driver_95135905(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpio_driver_95135905Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioSetPortModeFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioSetPortMode") {
		@Override
		public final void execute(Processor processor) {
			sceGpioSetPortMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioSetPortModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioGetPortModeFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioGetPortMode") {
		@Override
		public final void execute(Processor processor) {
			sceGpioGetPortMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioGetPortModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioSetIntrModeFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioSetIntrMode") {
		@Override
		public final void execute(Processor processor) {
			sceGpioSetIntrMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioSetIntrModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioGetIntrModeFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioGetIntrMode") {
		@Override
		public final void execute(Processor processor) {
			sceGpioGetIntrMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioGetIntrModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioEnableIntrFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioEnableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceGpioEnableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioEnableIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioDisableIntrFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioDisableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceGpioDisableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioDisableIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioQueryIntrFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioQueryIntr") {
		@Override
		public final void execute(Processor processor) {
			sceGpioQueryIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioQueryIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpioAcquireIntrFunction = new HLEModuleFunction("sceGpio_driver", "sceGpioAcquireIntr") {
		@Override
		public final void execute(Processor processor) {
			sceGpioAcquireIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpioAcquireIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpio_driver_C6928224Function = new HLEModuleFunction("sceGpio_driver", "sceGpio_driver_C6928224") {
		@Override
		public final void execute(Processor processor) {
			sceGpio_driver_C6928224(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpio_driver_C6928224Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpio_driver_6B38B826Function = new HLEModuleFunction("sceGpio_driver", "sceGpio_driver_6B38B826") {
		@Override
		public final void execute(Processor processor) {
			sceGpio_driver_6B38B826(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpio_driver_6B38B826Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpio_driver_5691CEFAFunction = new HLEModuleFunction("sceGpio_driver", "sceGpio_driver_5691CEFA") {
		@Override
		public final void execute(Processor processor) {
			sceGpio_driver_5691CEFA(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpio_driver_5691CEFAFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceGpio_driver_2CDC8EDCFunction = new HLEModuleFunction("sceGpio_driver", "sceGpio_driver_2CDC8EDC") {
		@Override
		public final void execute(Processor processor) {
			sceGpio_driver_2CDC8EDC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceGpio_driver.sceGpio_driver_2CDC8EDCFunction.execute(processor);";
		}
	};
    
};
