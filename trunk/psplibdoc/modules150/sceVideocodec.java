/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceVideocodec implements HLEModule {
	@Override
	public String getName() { return "sceVideocodec"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceVideocodecGetEDRAMFunction, 0x2D31F5B1);
			
			mm.addFunction(sceVideocodecReleaseEDRAMFunction, 0x4F160BF4);
			
			mm.addFunction(sceVideocodecOpenFunction, 0xC01EC829);
			
			mm.addFunction(sceVideocodecInitFunction, 0x17099F0A);
			
			mm.addFunction(sceVideocodecDecodeFunction, 0xDBA273FA);
			
			mm.addFunction(sceVideocodecStopFunction, 0xA2F0564E);
			
			mm.addFunction(sceVideocodecDeleteFunction, 0x307E6E1C);
			
			mm.addFunction(sceVideocodecSetMemoryFunction, 0x745A7B7A);
			
			mm.addFunction(sceVideocodecScanHeaderFunction, 0x2F385E7F);
			
			mm.addFunction(sceVideocodecGetVersionFunction, 0x26927D19);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceVideocodecGetEDRAMFunction);
			
			mm.removeFunction(sceVideocodecReleaseEDRAMFunction);
			
			mm.removeFunction(sceVideocodecOpenFunction);
			
			mm.removeFunction(sceVideocodecInitFunction);
			
			mm.removeFunction(sceVideocodecDecodeFunction);
			
			mm.removeFunction(sceVideocodecStopFunction);
			
			mm.removeFunction(sceVideocodecDeleteFunction);
			
			mm.removeFunction(sceVideocodecSetMemoryFunction);
			
			mm.removeFunction(sceVideocodecScanHeaderFunction);
			
			mm.removeFunction(sceVideocodecGetVersionFunction);
			
		}
	}
	
	
	public void sceVideocodecGetEDRAM(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecGetEDRAM [0x2D31F5B1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecReleaseEDRAM(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecReleaseEDRAM [0x4F160BF4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecOpen(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecOpen [0xC01EC829]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecInit [0x17099F0A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecDecode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecDecode [0xDBA273FA]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecStop(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecStop [0xA2F0564E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecDelete(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecDelete [0x307E6E1C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecSetMemory(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecSetMemory [0x745A7B7A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecScanHeader(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecScanHeader [0x2F385E7F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceVideocodecGetVersion(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceVideocodecGetVersion [0x26927D19]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceVideocodecGetEDRAMFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecGetEDRAM") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecGetEDRAM(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecGetEDRAMFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecReleaseEDRAMFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecReleaseEDRAM") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecReleaseEDRAM(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecReleaseEDRAMFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecOpenFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecOpen") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecOpen(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecOpenFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecInitFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecInit") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecDecodeFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecDecode") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecDecode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecDecodeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecStopFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecStop") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecStopFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecDeleteFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecDelete") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecDelete(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecDeleteFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecSetMemoryFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecSetMemory") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecSetMemory(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecSetMemoryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecScanHeaderFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecScanHeader") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecScanHeader(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecScanHeaderFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceVideocodecGetVersionFunction = new HLEModuleFunction("sceVideocodec", "sceVideocodecGetVersion") {
		@Override
		public final void execute(Processor processor) {
			sceVideocodecGetVersion(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.sceVideocodec.sceVideocodecGetVersionFunction.execute(processor);";
		}
	};
    
};
