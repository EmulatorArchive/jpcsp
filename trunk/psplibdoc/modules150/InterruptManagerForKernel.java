/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class InterruptManagerForKernel implements HLEModule {
	@Override
	public String getName() { return "InterruptManagerForKernel"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(sceKernelCpuSuspendIntrFunction, 0x092968F4);
			
			mm.addFunction(sceKernelCpuResumeIntrFunction, 0x5F10D406);
			
			mm.addFunction(sceKernelCpuResumeIntrWithSyncFunction, 0x3B84732D);
			
			mm.addFunction(sceKernelIsIntrContextFunction, 0xFE28C6D9);
			
			mm.addFunction(InterruptManagerForKernel_53991063Function, 0x53991063);
			
			mm.addFunction(sceKernelGetInterruptExitCountFunction, 0x468BC716);
			
			mm.addFunction(ReturnToThreadFunction, 0x43CD40EF);
			
			mm.addFunction(SaveThreadContextFunction, 0x85F7766D);
			
			mm.addFunction(sceKernelCpuEnableIntrFunction, 0x02314986);
			
			mm.addFunction(QueryInterruptManCBFunction, 0x00B6B0F3);
			
			mm.addFunction(sceKernelRegisterIntrHandlerFunction, 0x58DD8978);
			
			mm.addFunction(InterruptManagerForKernel_15894D0BFunction, 0x15894D0B);
			
			mm.addFunction(sceKernelReleaseIntrHandlerFunction, 0xF987B1F0);
			
			mm.addFunction(sceKernelSetIntrLevelFunction, 0xB5A15B30);
			
			mm.addFunction(InterruptManagerForKernel_43A7BBDCFunction, 0x43A7BBDC);
			
			mm.addFunction(sceKernelIsInterruptOccurredFunction, 0x02475AAF);
			
			mm.addFunction(sceKernelEnableIntrFunction, 0x4D6E7305);
			
			mm.addFunction(sceKernelSuspendIntrFunction, 0x750E2507);
			
			mm.addFunction(sceKernelDisableIntrFunction, 0xD774BA45);
			
			mm.addFunction(sceKernelResumeIntrFunction, 0x494D6D2B);
			
			mm.addFunction(RegisterContextHooksFunction, 0x2CD783A1);
			
			mm.addFunction(ReleaseContextHooksFunction, 0x55242A8B);
			
			mm.addFunction(UnSupportIntrFunction, 0x27BC9A45);
			
			mm.addFunction(SupportIntrFunction, 0x0E224D66);
			
			mm.addFunction(sceKernelRegisterDebuggerIntrHandlerFunction, 0x272766F8);
			
			mm.addFunction(sceKernelReleaseDebuggerIntrHandlerFunction, 0xB386A459);
			
			mm.addFunction(sceKernelCallSubIntrHandlerFunction, 0xCDC86B64);
			
			mm.addFunction(sceKernelGetUserIntrStackFunction, 0xD6878EB6);
			
			mm.addFunction(sceKernelCallUserIntrHandlerFunction, 0xF4454E44);
			
			mm.addFunction(sceKernelRegisterSubIntrHandlerFunction, 0xCA04A2B9);
			
			mm.addFunction(sceKernelReleaseSubIntrHandlerFunction, 0xD61E6961);
			
			mm.addFunction(sceKernelEnableSubIntrFunction, 0xFB8E22EC);
			
			mm.addFunction(sceKernelDisableSubIntrFunction, 0x8A389411);
			
			mm.addFunction(sceKernelSuspendSubIntrFunction, 0x5CB5A78B);
			
			mm.addFunction(sceKernelResumeSubIntrFunction, 0x7860E0DC);
			
			mm.addFunction(sceKernelIsSubInterruptOccurredFunction, 0xFC4374B8);
			
			mm.addFunction(InterruptManagerForKernel_D2E8363FFunction, 0xD2E8363F);
			
			mm.addFunction(sceKernelGetCpuClockCounterFunction, 0x30C08374);
			
			mm.addFunction(sceKernelGetCpuClockCounterWideFunction, 0x35634A64);
			
			mm.addFunction(_sceKernelGetCpuClockCounterLowFunction, 0x2DC9709B);
			
			mm.addFunction(_sceKernelGetCpuClockCounterHighFunction, 0xE9E652A9);
			
			mm.addFunction(sceKernelSetPrimarySyscallHandlerFunction, 0x0FC68A56);
			
			mm.addFunction(sceKernelRegisterSystemCallTableFunction, 0xF4D443F3);
			
			mm.addFunction(sceKernelQuerySystemCallFunction, 0x8B61808B);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(sceKernelCpuSuspendIntrFunction);
			
			mm.removeFunction(sceKernelCpuResumeIntrFunction);
			
			mm.removeFunction(sceKernelCpuResumeIntrWithSyncFunction);
			
			mm.removeFunction(sceKernelIsIntrContextFunction);
			
			mm.removeFunction(InterruptManagerForKernel_53991063Function);
			
			mm.removeFunction(sceKernelGetInterruptExitCountFunction);
			
			mm.removeFunction(ReturnToThreadFunction);
			
			mm.removeFunction(SaveThreadContextFunction);
			
			mm.removeFunction(sceKernelCpuEnableIntrFunction);
			
			mm.removeFunction(QueryInterruptManCBFunction);
			
			mm.removeFunction(sceKernelRegisterIntrHandlerFunction);
			
			mm.removeFunction(InterruptManagerForKernel_15894D0BFunction);
			
			mm.removeFunction(sceKernelReleaseIntrHandlerFunction);
			
			mm.removeFunction(sceKernelSetIntrLevelFunction);
			
			mm.removeFunction(InterruptManagerForKernel_43A7BBDCFunction);
			
			mm.removeFunction(sceKernelIsInterruptOccurredFunction);
			
			mm.removeFunction(sceKernelEnableIntrFunction);
			
			mm.removeFunction(sceKernelSuspendIntrFunction);
			
			mm.removeFunction(sceKernelDisableIntrFunction);
			
			mm.removeFunction(sceKernelResumeIntrFunction);
			
			mm.removeFunction(RegisterContextHooksFunction);
			
			mm.removeFunction(ReleaseContextHooksFunction);
			
			mm.removeFunction(UnSupportIntrFunction);
			
			mm.removeFunction(SupportIntrFunction);
			
			mm.removeFunction(sceKernelRegisterDebuggerIntrHandlerFunction);
			
			mm.removeFunction(sceKernelReleaseDebuggerIntrHandlerFunction);
			
			mm.removeFunction(sceKernelCallSubIntrHandlerFunction);
			
			mm.removeFunction(sceKernelGetUserIntrStackFunction);
			
			mm.removeFunction(sceKernelCallUserIntrHandlerFunction);
			
			mm.removeFunction(sceKernelRegisterSubIntrHandlerFunction);
			
			mm.removeFunction(sceKernelReleaseSubIntrHandlerFunction);
			
			mm.removeFunction(sceKernelEnableSubIntrFunction);
			
			mm.removeFunction(sceKernelDisableSubIntrFunction);
			
			mm.removeFunction(sceKernelSuspendSubIntrFunction);
			
			mm.removeFunction(sceKernelResumeSubIntrFunction);
			
			mm.removeFunction(sceKernelIsSubInterruptOccurredFunction);
			
			mm.removeFunction(InterruptManagerForKernel_D2E8363FFunction);
			
			mm.removeFunction(sceKernelGetCpuClockCounterFunction);
			
			mm.removeFunction(sceKernelGetCpuClockCounterWideFunction);
			
			mm.removeFunction(_sceKernelGetCpuClockCounterLowFunction);
			
			mm.removeFunction(_sceKernelGetCpuClockCounterHighFunction);
			
			mm.removeFunction(sceKernelSetPrimarySyscallHandlerFunction);
			
			mm.removeFunction(sceKernelRegisterSystemCallTableFunction);
			
			mm.removeFunction(sceKernelQuerySystemCallFunction);
			
		}
	}
	
	
	public void sceKernelCpuSuspendIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelCpuSuspendIntr [0x092968F4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelCpuResumeIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelCpuResumeIntr [0x5F10D406]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelCpuResumeIntrWithSync(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelCpuResumeIntrWithSync [0x3B84732D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelIsIntrContext(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelIsIntrContext [0xFE28C6D9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void InterruptManagerForKernel_53991063(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function InterruptManagerForKernel_53991063 [0x53991063]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelGetInterruptExitCount(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelGetInterruptExitCount [0x468BC716]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void ReturnToThread(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function ReturnToThread [0x43CD40EF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void SaveThreadContext(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function SaveThreadContext [0x85F7766D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelCpuEnableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelCpuEnableIntr [0x02314986]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void QueryInterruptManCB(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function QueryInterruptManCB [0x00B6B0F3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelRegisterIntrHandler [0x58DD8978]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void InterruptManagerForKernel_15894D0B(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function InterruptManagerForKernel_15894D0B [0x15894D0B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelReleaseIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelReleaseIntrHandler [0xF987B1F0]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelSetIntrLevel(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelSetIntrLevel [0xB5A15B30]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void InterruptManagerForKernel_43A7BBDC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function InterruptManagerForKernel_43A7BBDC [0x43A7BBDC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelIsInterruptOccurred(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelIsInterruptOccurred [0x02475AAF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelEnableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelEnableIntr [0x4D6E7305]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelSuspendIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelSuspendIntr [0x750E2507]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDisableIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDisableIntr [0xD774BA45]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelResumeIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelResumeIntr [0x494D6D2B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void RegisterContextHooks(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function RegisterContextHooks [0x2CD783A1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void ReleaseContextHooks(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function ReleaseContextHooks [0x55242A8B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void UnSupportIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function UnSupportIntr [0x27BC9A45]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void SupportIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function SupportIntr [0x0E224D66]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterDebuggerIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelRegisterDebuggerIntrHandler [0x272766F8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelReleaseDebuggerIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelReleaseDebuggerIntrHandler [0xB386A459]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelCallSubIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelCallSubIntrHandler [0xCDC86B64]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelGetUserIntrStack(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelGetUserIntrStack [0xD6878EB6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelCallUserIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelCallUserIntrHandler [0xF4454E44]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterSubIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelRegisterSubIntrHandler [0xCA04A2B9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelReleaseSubIntrHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelReleaseSubIntrHandler [0xD61E6961]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelEnableSubIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelEnableSubIntr [0xFB8E22EC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelDisableSubIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelDisableSubIntr [0x8A389411]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelSuspendSubIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelSuspendSubIntr [0x5CB5A78B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelResumeSubIntr(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelResumeSubIntr [0x7860E0DC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelIsSubInterruptOccurred(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelIsSubInterruptOccurred [0xFC4374B8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void InterruptManagerForKernel_D2E8363F(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function InterruptManagerForKernel_D2E8363F [0xD2E8363F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelGetCpuClockCounter(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelGetCpuClockCounter [0x30C08374]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelGetCpuClockCounterWide(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelGetCpuClockCounterWide [0x35634A64]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void _sceKernelGetCpuClockCounterLow(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function _sceKernelGetCpuClockCounterLow [0x2DC9709B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void _sceKernelGetCpuClockCounterHigh(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function _sceKernelGetCpuClockCounterHigh [0xE9E652A9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelSetPrimarySyscallHandler(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelSetPrimarySyscallHandler [0x0FC68A56]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelRegisterSystemCallTable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelRegisterSystemCallTable [0xF4D443F3]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void sceKernelQuerySystemCall(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function sceKernelQuerySystemCall [0x8B61808B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction sceKernelCpuSuspendIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuSuspendIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelCpuSuspendIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelCpuSuspendIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelCpuResumeIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuResumeIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelCpuResumeIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelCpuResumeIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelCpuResumeIntrWithSyncFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuResumeIntrWithSync") {
		@Override
		public final void execute(Processor processor) {
			sceKernelCpuResumeIntrWithSync(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelCpuResumeIntrWithSyncFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelIsIntrContextFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelIsIntrContext") {
		@Override
		public final void execute(Processor processor) {
			sceKernelIsIntrContext(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelIsIntrContextFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction InterruptManagerForKernel_53991063Function = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_53991063") {
		@Override
		public final void execute(Processor processor) {
			InterruptManagerForKernel_53991063(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.InterruptManagerForKernel_53991063Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelGetInterruptExitCountFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetInterruptExitCount") {
		@Override
		public final void execute(Processor processor) {
			sceKernelGetInterruptExitCount(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelGetInterruptExitCountFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction ReturnToThreadFunction = new HLEModuleFunction("InterruptManagerForKernel", "ReturnToThread") {
		@Override
		public final void execute(Processor processor) {
			ReturnToThread(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.ReturnToThreadFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction SaveThreadContextFunction = new HLEModuleFunction("InterruptManagerForKernel", "SaveThreadContext") {
		@Override
		public final void execute(Processor processor) {
			SaveThreadContext(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.SaveThreadContextFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelCpuEnableIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuEnableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelCpuEnableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelCpuEnableIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction QueryInterruptManCBFunction = new HLEModuleFunction("InterruptManagerForKernel", "QueryInterruptManCB") {
		@Override
		public final void execute(Processor processor) {
			QueryInterruptManCB(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.QueryInterruptManCBFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelRegisterIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction InterruptManagerForKernel_15894D0BFunction = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_15894D0B") {
		@Override
		public final void execute(Processor processor) {
			InterruptManagerForKernel_15894D0B(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.InterruptManagerForKernel_15894D0BFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelReleaseIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelReleaseIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelReleaseIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelReleaseIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelSetIntrLevelFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSetIntrLevel") {
		@Override
		public final void execute(Processor processor) {
			sceKernelSetIntrLevel(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelSetIntrLevelFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction InterruptManagerForKernel_43A7BBDCFunction = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_43A7BBDC") {
		@Override
		public final void execute(Processor processor) {
			InterruptManagerForKernel_43A7BBDC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.InterruptManagerForKernel_43A7BBDCFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelIsInterruptOccurredFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelIsInterruptOccurred") {
		@Override
		public final void execute(Processor processor) {
			sceKernelIsInterruptOccurred(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelIsInterruptOccurredFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelEnableIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelEnableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelEnableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelEnableIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelSuspendIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSuspendIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelSuspendIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelSuspendIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDisableIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelDisableIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDisableIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelDisableIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelResumeIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelResumeIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelResumeIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelResumeIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction RegisterContextHooksFunction = new HLEModuleFunction("InterruptManagerForKernel", "RegisterContextHooks") {
		@Override
		public final void execute(Processor processor) {
			RegisterContextHooks(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.RegisterContextHooksFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction ReleaseContextHooksFunction = new HLEModuleFunction("InterruptManagerForKernel", "ReleaseContextHooks") {
		@Override
		public final void execute(Processor processor) {
			ReleaseContextHooks(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.ReleaseContextHooksFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction UnSupportIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "UnSupportIntr") {
		@Override
		public final void execute(Processor processor) {
			UnSupportIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.UnSupportIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction SupportIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "SupportIntr") {
		@Override
		public final void execute(Processor processor) {
			SupportIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.SupportIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterDebuggerIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterDebuggerIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterDebuggerIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelRegisterDebuggerIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelReleaseDebuggerIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelReleaseDebuggerIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelReleaseDebuggerIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelReleaseDebuggerIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelCallSubIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCallSubIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelCallSubIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelCallSubIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelGetUserIntrStackFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetUserIntrStack") {
		@Override
		public final void execute(Processor processor) {
			sceKernelGetUserIntrStack(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelGetUserIntrStackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelCallUserIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCallUserIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelCallUserIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelCallUserIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterSubIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterSubIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterSubIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelRegisterSubIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelReleaseSubIntrHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelReleaseSubIntrHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelReleaseSubIntrHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelReleaseSubIntrHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelEnableSubIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelEnableSubIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelEnableSubIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelEnableSubIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelDisableSubIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelDisableSubIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelDisableSubIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelDisableSubIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelSuspendSubIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSuspendSubIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelSuspendSubIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelSuspendSubIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelResumeSubIntrFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelResumeSubIntr") {
		@Override
		public final void execute(Processor processor) {
			sceKernelResumeSubIntr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelResumeSubIntrFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelIsSubInterruptOccurredFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelIsSubInterruptOccurred") {
		@Override
		public final void execute(Processor processor) {
			sceKernelIsSubInterruptOccurred(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelIsSubInterruptOccurredFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction InterruptManagerForKernel_D2E8363FFunction = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_D2E8363F") {
		@Override
		public final void execute(Processor processor) {
			InterruptManagerForKernel_D2E8363F(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.InterruptManagerForKernel_D2E8363FFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelGetCpuClockCounterFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetCpuClockCounter") {
		@Override
		public final void execute(Processor processor) {
			sceKernelGetCpuClockCounter(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelGetCpuClockCounterFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelGetCpuClockCounterWideFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetCpuClockCounterWide") {
		@Override
		public final void execute(Processor processor) {
			sceKernelGetCpuClockCounterWide(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelGetCpuClockCounterWideFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction _sceKernelGetCpuClockCounterLowFunction = new HLEModuleFunction("InterruptManagerForKernel", "_sceKernelGetCpuClockCounterLow") {
		@Override
		public final void execute(Processor processor) {
			_sceKernelGetCpuClockCounterLow(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel._sceKernelGetCpuClockCounterLowFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction _sceKernelGetCpuClockCounterHighFunction = new HLEModuleFunction("InterruptManagerForKernel", "_sceKernelGetCpuClockCounterHigh") {
		@Override
		public final void execute(Processor processor) {
			_sceKernelGetCpuClockCounterHigh(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel._sceKernelGetCpuClockCounterHighFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelSetPrimarySyscallHandlerFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSetPrimarySyscallHandler") {
		@Override
		public final void execute(Processor processor) {
			sceKernelSetPrimarySyscallHandler(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelSetPrimarySyscallHandlerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterSystemCallTableFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterSystemCallTable") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterSystemCallTable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelRegisterSystemCallTableFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelQuerySystemCallFunction = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelQuerySystemCall") {
		@Override
		public final void execute(Processor processor) {
			sceKernelQuerySystemCall(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.InterruptManagerForKernel.sceKernelQuerySystemCallFunction.execute(processor);";
		}
	};
    
};
