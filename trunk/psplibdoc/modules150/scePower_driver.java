/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class scePower_driver implements HLEModule {
	@Override
	public String getName() { return "scePower_driver"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.addFunction(scePowerInitFunction, 0x9CE06934);
			
			mm.addFunction(scePowerEndFunction, 0xAD5BB433);
			
			mm.addFunction(scePowerWlanActivateFunction, 0x6D2CA84B);
			
			mm.addFunction(scePowerWlanDeactivateFunction, 0x23BB0A60);
			
			mm.addFunction(scePower_driver_D7B9C925Function, 0xD7B9C925);
			
			mm.addFunction(scePower_driver_2B51FE2FFunction, 0x2B51FE2F);
			
			mm.addFunction(scePower_driver_442BFBACFunction, 0x442BFBAC);
			
			mm.addFunction(scePower_driver_E8685403Function, 0xE8685403);
			
			mm.addFunction(scePowerTickFunction, 0xEFD3C963);
			
			mm.addFunction(scePowerGetIdleTimerFunction, 0xEDC13FE5);
			
			mm.addFunction(scePowerSetIdleCallbackFunction, 0x1BA2FCAE);
			
			mm.addFunction(scePowerIdleTimerEnableFunction, 0x7F30B3B1);
			
			mm.addFunction(scePowerIdleTimerDisableFunction, 0x972CE941);
			
			mm.addFunction(scePowerBatteryUpdateInfoFunction, 0x27F3292C);
			
			mm.addFunction(scePower_driver_E8E4E204Function, 0xE8E4E204);
			
			mm.addFunction(scePowerGetLowBatteryCapacityFunction, 0xB999184C);
			
			mm.addFunction(scePowerBatteryForbidChargingFunction, 0x166922EC);
			
			mm.addFunction(scePowerBatteryPermitChargingFunction, 0xDD3D4DAC);
			
			mm.addFunction(scePowerIsPowerOnlineFunction, 0x87440F5E);
			
			mm.addFunction(scePowerIsBatteryExistFunction, 0x0AFD0D8B);
			
			mm.addFunction(scePowerIsBatteryChargingFunction, 0x1E490401);
			
			mm.addFunction(scePowerGetBatteryChargingStatusFunction, 0xB4432BC8);
			
			mm.addFunction(scePowerIsLowBatteryFunction, 0xD3075926);
			
			mm.addFunction(scePower_driver_78A1A796Function, 0x78A1A796);
			
			mm.addFunction(scePowerGetBatteryRemainCapacityFunction, 0x94F5A53F);
			
			mm.addFunction(scePowerGetBatteryFullCapacityFunction, 0xFD18A0FF);
			
			mm.addFunction(scePowerGetBatteryLifePercentFunction, 0x2085D15D);
			
			mm.addFunction(scePowerGetBatteryLifeTimeFunction, 0x8EFB3FA2);
			
			mm.addFunction(scePowerGetBatteryTempFunction, 0x28E12023);
			
			mm.addFunction(scePowerGetBatteryElecFunction, 0x862AE1A6);
			
			mm.addFunction(scePowerGetBatteryVoltFunction, 0x483CE86B);
			
			mm.addFunction(scePower_driver_23436A4AFunction, 0x23436A4A);
			
			mm.addFunction(scePowerSetPowerSwModeFunction, 0x0CD21B1F);
			
			mm.addFunction(scePowerGetPowerSwModeFunction, 0x165CE085);
			
			mm.addFunction(scePowerVolatileMemLockFunction, 0x23C31FFE);
			
			mm.addFunction(scePowerVolatileMemTryLockFunction, 0xFA97A599);
			
			mm.addFunction(scePowerVolatileMemUnlockFunction, 0xB3EDD801);
			
			mm.addFunction(scePowerLockFunction, 0xD6D016EF);
			
			mm.addFunction(scePowerUnlockFunction, 0xCA3D34C1);
			
			mm.addFunction(scePowerRebootStartFunction, 0x79DB9421);
			
			mm.addFunction(scePowerCancelRequestFunction, 0xDB62C9CF);
			
			mm.addFunction(scePowerIsRequestFunction, 0x7FA406DD);
			
			mm.addFunction(scePowerRequestStandbyFunction, 0x2B7C7CF4);
			
			mm.addFunction(scePowerRequestSuspendFunction, 0xAC32C9CC);
			
			mm.addFunction(scePower_driver_2875994BFunction, 0x2875994B);
			
			mm.addFunction(scePowerWaitRequestCompletionFunction, 0x3951AF53);
			
			mm.addFunction(scePowerGetResumeCountFunction, 0x0074EF9B);
			
			mm.addFunction(scePower_driver_F535D928Function, 0xF535D928);
			
			mm.addFunction(scePowerRegisterCallbackFunction, 0x04B7766E);
			
			mm.addFunction(scePowerUnregisterCallbackFunction, 0xDFA8BAF8);
			
			mm.addFunction(scePowerUnregitserCallbackFunction, 0xDB9D28DD);
			
			mm.addFunction(scePowerGetTachyonVoltageFunction, 0x55D2D789);
			
			mm.addFunction(scePowerSetTachyonVoltageFunction, 0xDD27F119);
			
			mm.addFunction(scePowerLimitScCpuClockFunction, 0xD24E6BEB);
			
			mm.addFunction(scePowerLimitScBusClockFunction, 0x35B7662E);
			
			mm.addFunction(scePowerLimitPllClockFunction, 0xF9B4DEA1);
			
			mm.addFunction(scePowerSetCpuClockFrequencyFunction, 0x843FBF43);
			
			mm.addFunction(scePowerSetBusClockFrequencyFunction, 0xB8D7B3FB);
			
			mm.addFunction(scePowerGetCpuClockFrequencyFunction, 0xFEE03A2F);
			
			mm.addFunction(scePowerGetBusClockFrequencyFunction, 0x478FE6F5);
			
			mm.addFunction(scePowerGetCpuClockFrequencyIntFunction, 0xFDB5BFE9);
			
			mm.addFunction(scePowerGetBusClockFrequencyIntFunction, 0xBD681969);
			
			mm.addFunction(scePowerGetPllClockFrequencyIntFunction, 0x34F9C463);
			
			mm.addFunction(scePowerGetCpuClockFrequencyFloatFunction, 0xB1A52C83);
			
			mm.addFunction(scePowerGetBusClockFrequencyFloatFunction, 0x9BADB3EB);
			
			mm.addFunction(scePowerGetPllClockFrequencyFloatFunction, 0xEA382A27);
			
			mm.addFunction(scePowerSetClockFrequencyFunction, 0x737486F2);
			
			mm.addFunction(scePower_driver_E0B7A95DFunction, 0xE0B7A95D);
			
			mm.addFunction(scePower_driver_C23AC778Function, 0xC23AC778);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
			
			mm.removeFunction(scePowerInitFunction);
			
			mm.removeFunction(scePowerEndFunction);
			
			mm.removeFunction(scePowerWlanActivateFunction);
			
			mm.removeFunction(scePowerWlanDeactivateFunction);
			
			mm.removeFunction(scePower_driver_D7B9C925Function);
			
			mm.removeFunction(scePower_driver_2B51FE2FFunction);
			
			mm.removeFunction(scePower_driver_442BFBACFunction);
			
			mm.removeFunction(scePower_driver_E8685403Function);
			
			mm.removeFunction(scePowerTickFunction);
			
			mm.removeFunction(scePowerGetIdleTimerFunction);
			
			mm.removeFunction(scePowerSetIdleCallbackFunction);
			
			mm.removeFunction(scePowerIdleTimerEnableFunction);
			
			mm.removeFunction(scePowerIdleTimerDisableFunction);
			
			mm.removeFunction(scePowerBatteryUpdateInfoFunction);
			
			mm.removeFunction(scePower_driver_E8E4E204Function);
			
			mm.removeFunction(scePowerGetLowBatteryCapacityFunction);
			
			mm.removeFunction(scePowerBatteryForbidChargingFunction);
			
			mm.removeFunction(scePowerBatteryPermitChargingFunction);
			
			mm.removeFunction(scePowerIsPowerOnlineFunction);
			
			mm.removeFunction(scePowerIsBatteryExistFunction);
			
			mm.removeFunction(scePowerIsBatteryChargingFunction);
			
			mm.removeFunction(scePowerGetBatteryChargingStatusFunction);
			
			mm.removeFunction(scePowerIsLowBatteryFunction);
			
			mm.removeFunction(scePower_driver_78A1A796Function);
			
			mm.removeFunction(scePowerGetBatteryRemainCapacityFunction);
			
			mm.removeFunction(scePowerGetBatteryFullCapacityFunction);
			
			mm.removeFunction(scePowerGetBatteryLifePercentFunction);
			
			mm.removeFunction(scePowerGetBatteryLifeTimeFunction);
			
			mm.removeFunction(scePowerGetBatteryTempFunction);
			
			mm.removeFunction(scePowerGetBatteryElecFunction);
			
			mm.removeFunction(scePowerGetBatteryVoltFunction);
			
			mm.removeFunction(scePower_driver_23436A4AFunction);
			
			mm.removeFunction(scePowerSetPowerSwModeFunction);
			
			mm.removeFunction(scePowerGetPowerSwModeFunction);
			
			mm.removeFunction(scePowerVolatileMemLockFunction);
			
			mm.removeFunction(scePowerVolatileMemTryLockFunction);
			
			mm.removeFunction(scePowerVolatileMemUnlockFunction);
			
			mm.removeFunction(scePowerLockFunction);
			
			mm.removeFunction(scePowerUnlockFunction);
			
			mm.removeFunction(scePowerRebootStartFunction);
			
			mm.removeFunction(scePowerCancelRequestFunction);
			
			mm.removeFunction(scePowerIsRequestFunction);
			
			mm.removeFunction(scePowerRequestStandbyFunction);
			
			mm.removeFunction(scePowerRequestSuspendFunction);
			
			mm.removeFunction(scePower_driver_2875994BFunction);
			
			mm.removeFunction(scePowerWaitRequestCompletionFunction);
			
			mm.removeFunction(scePowerGetResumeCountFunction);
			
			mm.removeFunction(scePower_driver_F535D928Function);
			
			mm.removeFunction(scePowerRegisterCallbackFunction);
			
			mm.removeFunction(scePowerUnregisterCallbackFunction);
			
			mm.removeFunction(scePowerUnregitserCallbackFunction);
			
			mm.removeFunction(scePowerGetTachyonVoltageFunction);
			
			mm.removeFunction(scePowerSetTachyonVoltageFunction);
			
			mm.removeFunction(scePowerLimitScCpuClockFunction);
			
			mm.removeFunction(scePowerLimitScBusClockFunction);
			
			mm.removeFunction(scePowerLimitPllClockFunction);
			
			mm.removeFunction(scePowerSetCpuClockFrequencyFunction);
			
			mm.removeFunction(scePowerSetBusClockFrequencyFunction);
			
			mm.removeFunction(scePowerGetCpuClockFrequencyFunction);
			
			mm.removeFunction(scePowerGetBusClockFrequencyFunction);
			
			mm.removeFunction(scePowerGetCpuClockFrequencyIntFunction);
			
			mm.removeFunction(scePowerGetBusClockFrequencyIntFunction);
			
			mm.removeFunction(scePowerGetPllClockFrequencyIntFunction);
			
			mm.removeFunction(scePowerGetCpuClockFrequencyFloatFunction);
			
			mm.removeFunction(scePowerGetBusClockFrequencyFloatFunction);
			
			mm.removeFunction(scePowerGetPllClockFrequencyFloatFunction);
			
			mm.removeFunction(scePowerSetClockFrequencyFunction);
			
			mm.removeFunction(scePower_driver_E0B7A95DFunction);
			
			mm.removeFunction(scePower_driver_C23AC778Function);
			
		}
	}
	
	
	public void scePowerInit(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerInit [0x9CE06934]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerEnd(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerEnd [0xAD5BB433]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerWlanActivate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerWlanActivate [0x6D2CA84B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerWlanDeactivate(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerWlanDeactivate [0x23BB0A60]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_D7B9C925(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_D7B9C925 [0xD7B9C925]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_2B51FE2F(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_2B51FE2F [0x2B51FE2F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_442BFBAC(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_442BFBAC [0x442BFBAC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_E8685403(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_E8685403 [0xE8685403]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerTick(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerTick [0xEFD3C963]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetIdleTimer(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetIdleTimer [0xEDC13FE5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerSetIdleCallback(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerSetIdleCallback [0x1BA2FCAE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerIdleTimerEnable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerIdleTimerEnable [0x7F30B3B1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerIdleTimerDisable(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerIdleTimerDisable [0x972CE941]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerBatteryUpdateInfo(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerBatteryUpdateInfo [0x27F3292C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_E8E4E204(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_E8E4E204 [0xE8E4E204]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetLowBatteryCapacity(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetLowBatteryCapacity [0xB999184C]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerBatteryForbidCharging(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerBatteryForbidCharging [0x166922EC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerBatteryPermitCharging(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerBatteryPermitCharging [0xDD3D4DAC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerIsPowerOnline(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerIsPowerOnline [0x87440F5E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerIsBatteryExist(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerIsBatteryExist [0x0AFD0D8B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerIsBatteryCharging(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerIsBatteryCharging [0x1E490401]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryChargingStatus(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryChargingStatus [0xB4432BC8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerIsLowBattery(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerIsLowBattery [0xD3075926]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_78A1A796(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_78A1A796 [0x78A1A796]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryRemainCapacity(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryRemainCapacity [0x94F5A53F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryFullCapacity(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryFullCapacity [0xFD18A0FF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryLifePercent(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryLifePercent [0x2085D15D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryLifeTime(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryLifeTime [0x8EFB3FA2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryTemp(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryTemp [0x28E12023]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryElec(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryElec [0x862AE1A6]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBatteryVolt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBatteryVolt [0x483CE86B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_23436A4A(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_23436A4A [0x23436A4A]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerSetPowerSwMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerSetPowerSwMode [0x0CD21B1F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetPowerSwMode(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetPowerSwMode [0x165CE085]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerVolatileMemLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerVolatileMemLock [0x23C31FFE]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerVolatileMemTryLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerVolatileMemTryLock [0xFA97A599]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerVolatileMemUnlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerVolatileMemUnlock [0xB3EDD801]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerLock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerLock [0xD6D016EF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerUnlock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerUnlock [0xCA3D34C1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerRebootStart(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerRebootStart [0x79DB9421]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerCancelRequest(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerCancelRequest [0xDB62C9CF]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerIsRequest(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerIsRequest [0x7FA406DD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerRequestStandby(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerRequestStandby [0x2B7C7CF4]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerRequestSuspend(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerRequestSuspend [0xAC32C9CC]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_2875994B(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_2875994B [0x2875994B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerWaitRequestCompletion(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerWaitRequestCompletion [0x3951AF53]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetResumeCount(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetResumeCount [0x0074EF9B]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_F535D928(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_F535D928 [0xF535D928]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerRegisterCallback(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerRegisterCallback [0x04B7766E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerUnregisterCallback(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerUnregisterCallback [0xDFA8BAF8]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerUnregitserCallback(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerUnregitserCallback [0xDB9D28DD]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetTachyonVoltage(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetTachyonVoltage [0x55D2D789]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerSetTachyonVoltage(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerSetTachyonVoltage [0xDD27F119]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerLimitScCpuClock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerLimitScCpuClock [0xD24E6BEB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerLimitScBusClock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerLimitScBusClock [0x35B7662E]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerLimitPllClock(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerLimitPllClock [0xF9B4DEA1]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerSetCpuClockFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerSetCpuClockFrequency [0x843FBF43]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerSetBusClockFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerSetBusClockFrequency [0xB8D7B3FB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetCpuClockFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetCpuClockFrequency [0xFEE03A2F]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBusClockFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBusClockFrequency [0x478FE6F5]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetCpuClockFrequencyInt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetCpuClockFrequencyInt [0xFDB5BFE9]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBusClockFrequencyInt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBusClockFrequencyInt [0xBD681969]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetPllClockFrequencyInt(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetPllClockFrequencyInt [0x34F9C463]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetCpuClockFrequencyFloat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetCpuClockFrequencyFloat [0xB1A52C83]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetBusClockFrequencyFloat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetBusClockFrequencyFloat [0x9BADB3EB]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerGetPllClockFrequencyFloat(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerGetPllClockFrequencyFloat [0xEA382A27]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePowerSetClockFrequency(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePowerSetClockFrequency [0x737486F2]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_E0B7A95D(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_E0B7A95D [0xE0B7A95D]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public void scePower_driver_C23AC778(Processor processor) {
		// CpuState cpu = processor.cpu; // New-Style Processor
		Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;		
		/* put your own code here instead */
		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  int a2 = cpu.gpr[6];  int a3 = cpu.gpr[7];  int t0 = cpu.gpr[8];  int t1 = cpu.gpr[9];  int t2 = cpu.gpr[10];  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  float f14 = cpu.fpr[14];  float f15 = cpu.fpr[15];  float f16 = cpu.fpr[16];  float f17 = cpu.fpr[17];  float f18 = cpu.fpr[18]; float f19 = cpu.fpr[19];
		System.out.println("Unimplemented NID function scePower_driver_C23AC778 [0xC23AC778]");
		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32);
		// cpu.fpr[0] = result;
	}
    
	public final HLEModuleFunction scePowerInitFunction = new HLEModuleFunction("scePower_driver", "scePowerInit") {
		@Override
		public final void execute(Processor processor) {
			scePowerInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerInitFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerEndFunction = new HLEModuleFunction("scePower_driver", "scePowerEnd") {
		@Override
		public final void execute(Processor processor) {
			scePowerEnd(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerEndFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerWlanActivateFunction = new HLEModuleFunction("scePower_driver", "scePowerWlanActivate") {
		@Override
		public final void execute(Processor processor) {
			scePowerWlanActivate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerWlanActivateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerWlanDeactivateFunction = new HLEModuleFunction("scePower_driver", "scePowerWlanDeactivate") {
		@Override
		public final void execute(Processor processor) {
			scePowerWlanDeactivate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerWlanDeactivateFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_D7B9C925Function = new HLEModuleFunction("scePower_driver", "scePower_driver_D7B9C925") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_D7B9C925(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_D7B9C925Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_2B51FE2FFunction = new HLEModuleFunction("scePower_driver", "scePower_driver_2B51FE2F") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_2B51FE2F(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_2B51FE2FFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_442BFBACFunction = new HLEModuleFunction("scePower_driver", "scePower_driver_442BFBAC") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_442BFBAC(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_442BFBACFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_E8685403Function = new HLEModuleFunction("scePower_driver", "scePower_driver_E8685403") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_E8685403(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_E8685403Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerTickFunction = new HLEModuleFunction("scePower_driver", "scePowerTick") {
		@Override
		public final void execute(Processor processor) {
			scePowerTick(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerTickFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetIdleTimerFunction = new HLEModuleFunction("scePower_driver", "scePowerGetIdleTimer") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetIdleTimer(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetIdleTimerFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerSetIdleCallbackFunction = new HLEModuleFunction("scePower_driver", "scePowerSetIdleCallback") {
		@Override
		public final void execute(Processor processor) {
			scePowerSetIdleCallback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerSetIdleCallbackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerIdleTimerEnableFunction = new HLEModuleFunction("scePower_driver", "scePowerIdleTimerEnable") {
		@Override
		public final void execute(Processor processor) {
			scePowerIdleTimerEnable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerIdleTimerEnableFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerIdleTimerDisableFunction = new HLEModuleFunction("scePower_driver", "scePowerIdleTimerDisable") {
		@Override
		public final void execute(Processor processor) {
			scePowerIdleTimerDisable(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerIdleTimerDisableFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerBatteryUpdateInfoFunction = new HLEModuleFunction("scePower_driver", "scePowerBatteryUpdateInfo") {
		@Override
		public final void execute(Processor processor) {
			scePowerBatteryUpdateInfo(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerBatteryUpdateInfoFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_E8E4E204Function = new HLEModuleFunction("scePower_driver", "scePower_driver_E8E4E204") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_E8E4E204(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_E8E4E204Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetLowBatteryCapacityFunction = new HLEModuleFunction("scePower_driver", "scePowerGetLowBatteryCapacity") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetLowBatteryCapacity(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetLowBatteryCapacityFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerBatteryForbidChargingFunction = new HLEModuleFunction("scePower_driver", "scePowerBatteryForbidCharging") {
		@Override
		public final void execute(Processor processor) {
			scePowerBatteryForbidCharging(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerBatteryForbidChargingFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerBatteryPermitChargingFunction = new HLEModuleFunction("scePower_driver", "scePowerBatteryPermitCharging") {
		@Override
		public final void execute(Processor processor) {
			scePowerBatteryPermitCharging(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerBatteryPermitChargingFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerIsPowerOnlineFunction = new HLEModuleFunction("scePower_driver", "scePowerIsPowerOnline") {
		@Override
		public final void execute(Processor processor) {
			scePowerIsPowerOnline(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerIsPowerOnlineFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerIsBatteryExistFunction = new HLEModuleFunction("scePower_driver", "scePowerIsBatteryExist") {
		@Override
		public final void execute(Processor processor) {
			scePowerIsBatteryExist(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerIsBatteryExistFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerIsBatteryChargingFunction = new HLEModuleFunction("scePower_driver", "scePowerIsBatteryCharging") {
		@Override
		public final void execute(Processor processor) {
			scePowerIsBatteryCharging(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerIsBatteryChargingFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryChargingStatusFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryChargingStatus") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryChargingStatus(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryChargingStatusFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerIsLowBatteryFunction = new HLEModuleFunction("scePower_driver", "scePowerIsLowBattery") {
		@Override
		public final void execute(Processor processor) {
			scePowerIsLowBattery(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerIsLowBatteryFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_78A1A796Function = new HLEModuleFunction("scePower_driver", "scePower_driver_78A1A796") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_78A1A796(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_78A1A796Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryRemainCapacityFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryRemainCapacity") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryRemainCapacity(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryRemainCapacityFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryFullCapacityFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryFullCapacity") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryFullCapacity(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryFullCapacityFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryLifePercentFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryLifePercent") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryLifePercent(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryLifePercentFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryLifeTimeFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryLifeTime") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryLifeTime(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryLifeTimeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryTempFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryTemp") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryTemp(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryTempFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryElecFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryElec") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryElec(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryElecFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBatteryVoltFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryVolt") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBatteryVolt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBatteryVoltFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_23436A4AFunction = new HLEModuleFunction("scePower_driver", "scePower_driver_23436A4A") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_23436A4A(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_23436A4AFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerSetPowerSwModeFunction = new HLEModuleFunction("scePower_driver", "scePowerSetPowerSwMode") {
		@Override
		public final void execute(Processor processor) {
			scePowerSetPowerSwMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerSetPowerSwModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetPowerSwModeFunction = new HLEModuleFunction("scePower_driver", "scePowerGetPowerSwMode") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetPowerSwMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetPowerSwModeFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerVolatileMemLockFunction = new HLEModuleFunction("scePower_driver", "scePowerVolatileMemLock") {
		@Override
		public final void execute(Processor processor) {
			scePowerVolatileMemLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerVolatileMemLockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerVolatileMemTryLockFunction = new HLEModuleFunction("scePower_driver", "scePowerVolatileMemTryLock") {
		@Override
		public final void execute(Processor processor) {
			scePowerVolatileMemTryLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerVolatileMemTryLockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerVolatileMemUnlockFunction = new HLEModuleFunction("scePower_driver", "scePowerVolatileMemUnlock") {
		@Override
		public final void execute(Processor processor) {
			scePowerVolatileMemUnlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerVolatileMemUnlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerLockFunction = new HLEModuleFunction("scePower_driver", "scePowerLock") {
		@Override
		public final void execute(Processor processor) {
			scePowerLock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerLockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerUnlockFunction = new HLEModuleFunction("scePower_driver", "scePowerUnlock") {
		@Override
		public final void execute(Processor processor) {
			scePowerUnlock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerUnlockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerRebootStartFunction = new HLEModuleFunction("scePower_driver", "scePowerRebootStart") {
		@Override
		public final void execute(Processor processor) {
			scePowerRebootStart(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerRebootStartFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerCancelRequestFunction = new HLEModuleFunction("scePower_driver", "scePowerCancelRequest") {
		@Override
		public final void execute(Processor processor) {
			scePowerCancelRequest(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerCancelRequestFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerIsRequestFunction = new HLEModuleFunction("scePower_driver", "scePowerIsRequest") {
		@Override
		public final void execute(Processor processor) {
			scePowerIsRequest(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerIsRequestFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerRequestStandbyFunction = new HLEModuleFunction("scePower_driver", "scePowerRequestStandby") {
		@Override
		public final void execute(Processor processor) {
			scePowerRequestStandby(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerRequestStandbyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerRequestSuspendFunction = new HLEModuleFunction("scePower_driver", "scePowerRequestSuspend") {
		@Override
		public final void execute(Processor processor) {
			scePowerRequestSuspend(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerRequestSuspendFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_2875994BFunction = new HLEModuleFunction("scePower_driver", "scePower_driver_2875994B") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_2875994B(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_2875994BFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerWaitRequestCompletionFunction = new HLEModuleFunction("scePower_driver", "scePowerWaitRequestCompletion") {
		@Override
		public final void execute(Processor processor) {
			scePowerWaitRequestCompletion(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerWaitRequestCompletionFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetResumeCountFunction = new HLEModuleFunction("scePower_driver", "scePowerGetResumeCount") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetResumeCount(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetResumeCountFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_F535D928Function = new HLEModuleFunction("scePower_driver", "scePower_driver_F535D928") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_F535D928(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_F535D928Function.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerRegisterCallbackFunction = new HLEModuleFunction("scePower_driver", "scePowerRegisterCallback") {
		@Override
		public final void execute(Processor processor) {
			scePowerRegisterCallback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerRegisterCallbackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerUnregisterCallbackFunction = new HLEModuleFunction("scePower_driver", "scePowerUnregisterCallback") {
		@Override
		public final void execute(Processor processor) {
			scePowerUnregisterCallback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerUnregisterCallbackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerUnregitserCallbackFunction = new HLEModuleFunction("scePower_driver", "scePowerUnregitserCallback") {
		@Override
		public final void execute(Processor processor) {
			scePowerUnregitserCallback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerUnregitserCallbackFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetTachyonVoltageFunction = new HLEModuleFunction("scePower_driver", "scePowerGetTachyonVoltage") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetTachyonVoltage(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetTachyonVoltageFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerSetTachyonVoltageFunction = new HLEModuleFunction("scePower_driver", "scePowerSetTachyonVoltage") {
		@Override
		public final void execute(Processor processor) {
			scePowerSetTachyonVoltage(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerSetTachyonVoltageFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerLimitScCpuClockFunction = new HLEModuleFunction("scePower_driver", "scePowerLimitScCpuClock") {
		@Override
		public final void execute(Processor processor) {
			scePowerLimitScCpuClock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerLimitScCpuClockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerLimitScBusClockFunction = new HLEModuleFunction("scePower_driver", "scePowerLimitScBusClock") {
		@Override
		public final void execute(Processor processor) {
			scePowerLimitScBusClock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerLimitScBusClockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerLimitPllClockFunction = new HLEModuleFunction("scePower_driver", "scePowerLimitPllClock") {
		@Override
		public final void execute(Processor processor) {
			scePowerLimitPllClock(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerLimitPllClockFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerSetCpuClockFrequencyFunction = new HLEModuleFunction("scePower_driver", "scePowerSetCpuClockFrequency") {
		@Override
		public final void execute(Processor processor) {
			scePowerSetCpuClockFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerSetCpuClockFrequencyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerSetBusClockFrequencyFunction = new HLEModuleFunction("scePower_driver", "scePowerSetBusClockFrequency") {
		@Override
		public final void execute(Processor processor) {
			scePowerSetBusClockFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerSetBusClockFrequencyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetCpuClockFrequencyFunction = new HLEModuleFunction("scePower_driver", "scePowerGetCpuClockFrequency") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetCpuClockFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetCpuClockFrequencyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBusClockFrequencyFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBusClockFrequency") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBusClockFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBusClockFrequencyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetCpuClockFrequencyIntFunction = new HLEModuleFunction("scePower_driver", "scePowerGetCpuClockFrequencyInt") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetCpuClockFrequencyInt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetCpuClockFrequencyIntFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBusClockFrequencyIntFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBusClockFrequencyInt") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBusClockFrequencyInt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBusClockFrequencyIntFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetPllClockFrequencyIntFunction = new HLEModuleFunction("scePower_driver", "scePowerGetPllClockFrequencyInt") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetPllClockFrequencyInt(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetPllClockFrequencyIntFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetCpuClockFrequencyFloatFunction = new HLEModuleFunction("scePower_driver", "scePowerGetCpuClockFrequencyFloat") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetCpuClockFrequencyFloat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetCpuClockFrequencyFloatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetBusClockFrequencyFloatFunction = new HLEModuleFunction("scePower_driver", "scePowerGetBusClockFrequencyFloat") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetBusClockFrequencyFloat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetBusClockFrequencyFloatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerGetPllClockFrequencyFloatFunction = new HLEModuleFunction("scePower_driver", "scePowerGetPllClockFrequencyFloat") {
		@Override
		public final void execute(Processor processor) {
			scePowerGetPllClockFrequencyFloat(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerGetPllClockFrequencyFloatFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePowerSetClockFrequencyFunction = new HLEModuleFunction("scePower_driver", "scePowerSetClockFrequency") {
		@Override
		public final void execute(Processor processor) {
			scePowerSetClockFrequency(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePowerSetClockFrequencyFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_E0B7A95DFunction = new HLEModuleFunction("scePower_driver", "scePower_driver_E0B7A95D") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_E0B7A95D(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_E0B7A95DFunction.execute(processor);";
		}
	};
    
	public final HLEModuleFunction scePower_driver_C23AC778Function = new HLEModuleFunction("scePower_driver", "scePower_driver_C23AC778") {
		@Override
		public final void execute(Processor processor) {
			scePower_driver_C23AC778(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.modules150.scePower_driver.scePower_driver_C23AC778Function.execute(processor);";
		}
	};
    
};
