/* This autogenerated file is part of jpcsp. */

package jpcsp.HLE.modules;

import jpcsp.HLE.pspSysMem;
import jpcsp.Memory;
import jpcsp.Processor;

public class sceCtrl implements HLEModule {
	@Override
	public final String getName() { return "sceCtrl"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		
		mm.add(sceCtrlSetSamplingCycle, 0x6A2774F3);
        
		mm.add(sceCtrlGetSamplingCycle, 0x02BAAD91);
        
		mm.add(sceCtrlSetSamplingMode, 0x1F4011E6);
        
		mm.add(sceCtrlGetSamplingMode, 0xDA6B76A1);
        
		mm.add(sceCtrlPeekBufferPositive, 0x3A622550);
        
		mm.add(sceCtrlPeekBufferNegative, 0xC152080A);
        
		mm.add(sceCtrlReadBufferPositive, 0x1F803938);
        
		mm.add(sceCtrlReadBufferNegative, 0x60B81F86);
        
		mm.add(sceCtrlPeekLatch, 0xB1D0E5CD);
        
		mm.add(sceCtrlReadLatch, 0x0B588501);
        
		mm.add(sceCtrlSetIdleCancelThreshold, 0xA7144800);
        
		mm.add(sceCtrlGetIdleCancelThreshold, 0x687660FA);
        
		mm.add(sceCtrl_348D99D4, 0x348D99D4);
        
		mm.add(sceCtrl_AF5960F3, 0xAF5960F3);
        
		mm.add(sceCtrlClearRapidFire, 0xA68FD260);
        
		mm.add(sceCtrlSetRapidFire, 0x6841BE1A);
        
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		
		mm.remove(sceCtrlSetSamplingCycle);
        
		mm.remove(sceCtrlGetSamplingCycle);
        
		mm.remove(sceCtrlSetSamplingMode);
        
		mm.remove(sceCtrlGetSamplingMode);
        
		mm.remove(sceCtrlPeekBufferPositive);
        
		mm.remove(sceCtrlPeekBufferNegative);
        
		mm.remove(sceCtrlReadBufferPositive);
        
		mm.remove(sceCtrlReadBufferNegative);
        
		mm.remove(sceCtrlPeekLatch);
        
		mm.remove(sceCtrlReadLatch);
        
		mm.remove(sceCtrlSetIdleCancelThreshold);
        
		mm.remove(sceCtrlGetIdleCancelThreshold);
        
		mm.remove(sceCtrl_348D99D4);
        
		mm.remove(sceCtrl_AF5960F3);
        
		mm.remove(sceCtrlClearRapidFire);
        
		mm.remove(sceCtrlSetRapidFire);
        
	}
	
	
	public static final HLEModuleFunction sceCtrlSetSamplingCycle = new HLEModuleFunction("sceCtrl", "sceCtrlSetSamplingCycle") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlSetSamplingCycle [0x6A2774F3]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlGetSamplingCycle = new HLEModuleFunction("sceCtrl", "sceCtrlGetSamplingCycle") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlGetSamplingCycle [0x02BAAD91]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlSetSamplingMode = new HLEModuleFunction("sceCtrl", "sceCtrlSetSamplingMode") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlSetSamplingMode [0x1F4011E6]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlGetSamplingMode = new HLEModuleFunction("sceCtrl", "sceCtrlGetSamplingMode") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlGetSamplingMode [0xDA6B76A1]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlPeekBufferPositive = new HLEModuleFunction("sceCtrl", "sceCtrlPeekBufferPositive") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlPeekBufferPositive [0x3A622550]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlPeekBufferNegative = new HLEModuleFunction("sceCtrl", "sceCtrlPeekBufferNegative") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlPeekBufferNegative [0xC152080A]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlReadBufferPositive = new HLEModuleFunction("sceCtrl", "sceCtrlReadBufferPositive") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlReadBufferPositive [0x1F803938]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlReadBufferNegative = new HLEModuleFunction("sceCtrl", "sceCtrlReadBufferNegative") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlReadBufferNegative [0x60B81F86]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlPeekLatch = new HLEModuleFunction("sceCtrl", "sceCtrlPeekLatch") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlPeekLatch [0xB1D0E5CD]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlReadLatch = new HLEModuleFunction("sceCtrl", "sceCtrlReadLatch") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlReadLatch [0x0B588501]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlSetIdleCancelThreshold = new HLEModuleFunction("sceCtrl", "sceCtrlSetIdleCancelThreshold") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlSetIdleCancelThreshold [0xA7144800]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlGetIdleCancelThreshold = new HLEModuleFunction("sceCtrl", "sceCtrlGetIdleCancelThreshold") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlGetIdleCancelThreshold [0x687660FA]");
		}
	};
    
	public static final HLEModuleFunction sceCtrl_348D99D4 = new HLEModuleFunction("sceCtrl", "sceCtrl_348D99D4") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrl_348D99D4 [0x348D99D4]");
		}
	};
    
	public static final HLEModuleFunction sceCtrl_AF5960F3 = new HLEModuleFunction("sceCtrl", "sceCtrl_AF5960F3") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrl_AF5960F3 [0xAF5960F3]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlClearRapidFire = new HLEModuleFunction("sceCtrl", "sceCtrlClearRapidFire") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlClearRapidFire [0xA68FD260]");
		}
	};
    
	public static final HLEModuleFunction sceCtrlSetRapidFire = new HLEModuleFunction("sceCtrl", "sceCtrlSetRapidFire") {
		@Override
		public void execute(Processor cpu, Memory mem) {
			System.out.println("Unimplement function sceCtrlSetRapidFire [0x6841BE1A]");
		}
	};
    
};
