/* This autogenerated file is part of jpcsp. */
package jpcsp.HLE.modules;

import jpcsp.HLE.pspSysMem;
import jpcsp.Memory;
import jpcsp.Processor;

public class scePower_driver implements HLEModule {

    @Override
    public final String getName() {
        return "scePower_driver";
    }

    @Override
    public void installModule(HLEModuleManager mm, int version) {

        mm.add(scePowerInit, 0x9CE06934);

        mm.add(scePowerEnd, 0xAD5BB433);

        mm.add(scePowerWlanActivate, 0x6D2CA84B);

        mm.add(scePowerWlanDeactivate, 0x23BB0A60);

        mm.add(scePower_driver_D7B9C925, 0xD7B9C925);

        mm.add(scePower_driver_2B51FE2F, 0x2B51FE2F);

        mm.add(scePower_driver_442BFBAC, 0x442BFBAC);

        mm.add(scePower_driver_E8685403, 0xE8685403);

        mm.add(scePowerTick, 0xEFD3C963);

        mm.add(scePowerGetIdleTimer, 0xEDC13FE5);

        mm.add(scePowerSetIdleCallback, 0x1BA2FCAE);

        mm.add(scePowerIdleTimerEnable, 0x7F30B3B1);

        mm.add(scePowerIdleTimerDisable, 0x972CE941);

        mm.add(scePowerBatteryUpdateInfo, 0x27F3292C);

        mm.add(scePower_driver_E8E4E204, 0xE8E4E204);

        mm.add(scePowerGetLowBatteryCapacity, 0xB999184C);

        mm.add(scePowerBatteryForbidCharging, 0x166922EC);

        mm.add(scePowerBatteryPermitCharging, 0xDD3D4DAC);

        mm.add(scePowerIsPowerOnline, 0x87440F5E);

        mm.add(scePowerIsBatteryExist, 0x0AFD0D8B);

        mm.add(scePowerIsBatteryCharging, 0x1E490401);

        mm.add(scePowerGetBatteryChargingStatus, 0xB4432BC8);

        mm.add(scePowerIsLowBattery, 0xD3075926);

        mm.add(scePower_driver_78A1A796, 0x78A1A796);

        mm.add(scePowerGetBatteryRemainCapacity, 0x94F5A53F);

        mm.add(scePowerGetBatteryFullCapacity, 0xFD18A0FF);

        mm.add(scePowerGetBatteryLifePercent, 0x2085D15D);

        mm.add(scePowerGetBatteryLifeTime, 0x8EFB3FA2);

        mm.add(scePowerGetBatteryTemp, 0x28E12023);

        mm.add(scePowerGetBatteryElec, 0x862AE1A6);

        mm.add(scePowerGetBatteryVolt, 0x483CE86B);

        mm.add(scePower_driver_23436A4A, 0x23436A4A);

        mm.add(scePowerSetPowerSwMode, 0x0CD21B1F);

        mm.add(scePowerGetPowerSwMode, 0x165CE085);

        mm.add(scePowerVolatileMemLock, 0x23C31FFE);

        mm.add(scePowerVolatileMemTryLock, 0xFA97A599);

        mm.add(scePowerVolatileMemUnlock, 0xB3EDD801);

        mm.add(scePowerLock, 0xD6D016EF);

        mm.add(scePowerUnlock, 0xCA3D34C1);

        mm.add(scePowerRebootStart, 0x79DB9421);

        mm.add(scePowerCancelRequest, 0xDB62C9CF);

        mm.add(scePowerIsRequest, 0x7FA406DD);

        mm.add(scePowerRequestStandby, 0x2B7C7CF4);

        mm.add(scePowerRequestSuspend, 0xAC32C9CC);

        mm.add(scePower_driver_2875994B, 0x2875994B);

        mm.add(scePowerWaitRequestCompletion, 0x3951AF53);

        mm.add(scePowerGetResumeCount, 0x0074EF9B);

        mm.add(scePower_driver_F535D928, 0xF535D928);

        mm.add(scePowerRegisterCallback, 0x04B7766E);

        mm.add(scePowerUnregisterCallback, 0xDFA8BAF8);

        mm.add(scePowerUnregitserCallback, 0xDB9D28DD);

        mm.add(scePowerGetTachyonVoltage, 0x55D2D789);

        mm.add(scePowerSetTachyonVoltage, 0xDD27F119);

        mm.add(scePowerLimitScCpuClock, 0xD24E6BEB);

        mm.add(scePowerLimitScBusClock, 0x35B7662E);

        mm.add(scePowerLimitPllClock, 0xF9B4DEA1);

        mm.add(scePowerSetCpuClockFrequency, 0x843FBF43);

        mm.add(scePowerSetBusClockFrequency, 0xB8D7B3FB);

        mm.add(scePowerGetCpuClockFrequency, 0xFEE03A2F);

        mm.add(scePowerGetBusClockFrequency, 0x478FE6F5);

        mm.add(scePowerGetCpuClockFrequencyInt, 0xFDB5BFE9);

        mm.add(scePowerGetBusClockFrequencyInt, 0xBD681969);

        mm.add(scePowerGetPllClockFrequencyInt, 0x34F9C463);

        mm.add(scePowerGetCpuClockFrequencyFloat, 0xB1A52C83);

        mm.add(scePowerGetBusClockFrequencyFloat, 0x9BADB3EB);

        mm.add(scePowerGetPllClockFrequencyFloat, 0xEA382A27);

        mm.add(scePowerSetClockFrequency, 0x737486F2);

        mm.add(scePower_driver_E0B7A95D, 0xE0B7A95D);

        mm.add(scePower_driver_C23AC778, 0xC23AC778);

    }

    @Override
    public void uninstallModule(HLEModuleManager mm, int version) {

        mm.remove(scePowerInit);

        mm.remove(scePowerEnd);

        mm.remove(scePowerWlanActivate);

        mm.remove(scePowerWlanDeactivate);

        mm.remove(scePower_driver_D7B9C925);

        mm.remove(scePower_driver_2B51FE2F);

        mm.remove(scePower_driver_442BFBAC);

        mm.remove(scePower_driver_E8685403);

        mm.remove(scePowerTick);

        mm.remove(scePowerGetIdleTimer);

        mm.remove(scePowerSetIdleCallback);

        mm.remove(scePowerIdleTimerEnable);

        mm.remove(scePowerIdleTimerDisable);

        mm.remove(scePowerBatteryUpdateInfo);

        mm.remove(scePower_driver_E8E4E204);

        mm.remove(scePowerGetLowBatteryCapacity);

        mm.remove(scePowerBatteryForbidCharging);

        mm.remove(scePowerBatteryPermitCharging);

        mm.remove(scePowerIsPowerOnline);

        mm.remove(scePowerIsBatteryExist);

        mm.remove(scePowerIsBatteryCharging);

        mm.remove(scePowerGetBatteryChargingStatus);

        mm.remove(scePowerIsLowBattery);

        mm.remove(scePower_driver_78A1A796);

        mm.remove(scePowerGetBatteryRemainCapacity);

        mm.remove(scePowerGetBatteryFullCapacity);

        mm.remove(scePowerGetBatteryLifePercent);

        mm.remove(scePowerGetBatteryLifeTime);

        mm.remove(scePowerGetBatteryTemp);

        mm.remove(scePowerGetBatteryElec);

        mm.remove(scePowerGetBatteryVolt);

        mm.remove(scePower_driver_23436A4A);

        mm.remove(scePowerSetPowerSwMode);

        mm.remove(scePowerGetPowerSwMode);

        mm.remove(scePowerVolatileMemLock);

        mm.remove(scePowerVolatileMemTryLock);

        mm.remove(scePowerVolatileMemUnlock);

        mm.remove(scePowerLock);

        mm.remove(scePowerUnlock);

        mm.remove(scePowerRebootStart);

        mm.remove(scePowerCancelRequest);

        mm.remove(scePowerIsRequest);

        mm.remove(scePowerRequestStandby);

        mm.remove(scePowerRequestSuspend);

        mm.remove(scePower_driver_2875994B);

        mm.remove(scePowerWaitRequestCompletion);

        mm.remove(scePowerGetResumeCount);

        mm.remove(scePower_driver_F535D928);

        mm.remove(scePowerRegisterCallback);

        mm.remove(scePowerUnregisterCallback);

        mm.remove(scePowerUnregitserCallback);

        mm.remove(scePowerGetTachyonVoltage);

        mm.remove(scePowerSetTachyonVoltage);

        mm.remove(scePowerLimitScCpuClock);

        mm.remove(scePowerLimitScBusClock);

        mm.remove(scePowerLimitPllClock);

        mm.remove(scePowerSetCpuClockFrequency);

        mm.remove(scePowerSetBusClockFrequency);

        mm.remove(scePowerGetCpuClockFrequency);

        mm.remove(scePowerGetBusClockFrequency);

        mm.remove(scePowerGetCpuClockFrequencyInt);

        mm.remove(scePowerGetBusClockFrequencyInt);

        mm.remove(scePowerGetPllClockFrequencyInt);

        mm.remove(scePowerGetCpuClockFrequencyFloat);

        mm.remove(scePowerGetBusClockFrequencyFloat);

        mm.remove(scePowerGetPllClockFrequencyFloat);

        mm.remove(scePowerSetClockFrequency);

        mm.remove(scePower_driver_E0B7A95D);

        mm.remove(scePower_driver_C23AC778);

    }
    public static final HLEModuleFunction scePowerInit = new HLEModuleFunction("scePower_driver", "scePowerInit") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerInit [0x9CE06934]");
        }
    };
    public static final HLEModuleFunction scePowerEnd = new HLEModuleFunction("scePower_driver", "scePowerEnd") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerEnd [0xAD5BB433]");
        }
    };
    public static final HLEModuleFunction scePowerWlanActivate = new HLEModuleFunction("scePower_driver", "scePowerWlanActivate") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerWlanActivate [0x6D2CA84B]");
        }
    };
    public static final HLEModuleFunction scePowerWlanDeactivate = new HLEModuleFunction("scePower_driver", "scePowerWlanDeactivate") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerWlanDeactivate [0x23BB0A60]");
        }
    };
    public static final HLEModuleFunction scePower_driver_D7B9C925 = new HLEModuleFunction("scePower_driver", "scePower_driver_D7B9C925") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_D7B9C925 [0xD7B9C925]");
        }
    };
    public static final HLEModuleFunction scePower_driver_2B51FE2F = new HLEModuleFunction("scePower_driver", "scePower_driver_2B51FE2F") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_2B51FE2F [0x2B51FE2F]");
        }
    };
    public static final HLEModuleFunction scePower_driver_442BFBAC = new HLEModuleFunction("scePower_driver", "scePower_driver_442BFBAC") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_442BFBAC [0x442BFBAC]");
        }
    };
    public static final HLEModuleFunction scePower_driver_E8685403 = new HLEModuleFunction("scePower_driver", "scePower_driver_E8685403") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_E8685403 [0xE8685403]");
        }
    };
    public static final HLEModuleFunction scePowerTick = new HLEModuleFunction("scePower_driver", "scePowerTick") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerTick [0xEFD3C963]");
        }
    };
    public static final HLEModuleFunction scePowerGetIdleTimer = new HLEModuleFunction("scePower_driver", "scePowerGetIdleTimer") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetIdleTimer [0xEDC13FE5]");
        }
    };
    public static final HLEModuleFunction scePowerSetIdleCallback = new HLEModuleFunction("scePower_driver", "scePowerSetIdleCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerSetIdleCallback [0x1BA2FCAE]");
        }
    };
    public static final HLEModuleFunction scePowerIdleTimerEnable = new HLEModuleFunction("scePower_driver", "scePowerIdleTimerEnable") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerIdleTimerEnable [0x7F30B3B1]");
        }
    };
    public static final HLEModuleFunction scePowerIdleTimerDisable = new HLEModuleFunction("scePower_driver", "scePowerIdleTimerDisable") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerIdleTimerDisable [0x972CE941]");
        }
    };
    public static final HLEModuleFunction scePowerBatteryUpdateInfo = new HLEModuleFunction("scePower_driver", "scePowerBatteryUpdateInfo") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerBatteryUpdateInfo [0x27F3292C]");
        }
    };
    public static final HLEModuleFunction scePower_driver_E8E4E204 = new HLEModuleFunction("scePower_driver", "scePower_driver_E8E4E204") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_E8E4E204 [0xE8E4E204]");
        }
    };
    public static final HLEModuleFunction scePowerGetLowBatteryCapacity = new HLEModuleFunction("scePower_driver", "scePowerGetLowBatteryCapacity") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetLowBatteryCapacity [0xB999184C]");
        }
    };
    public static final HLEModuleFunction scePowerBatteryForbidCharging = new HLEModuleFunction("scePower_driver", "scePowerBatteryForbidCharging") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerBatteryForbidCharging [0x166922EC]");
        }
    };
    public static final HLEModuleFunction scePowerBatteryPermitCharging = new HLEModuleFunction("scePower_driver", "scePowerBatteryPermitCharging") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerBatteryPermitCharging [0xDD3D4DAC]");
        }
    };
    public static final HLEModuleFunction scePowerIsPowerOnline = new HLEModuleFunction("scePower_driver", "scePowerIsPowerOnline") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerIsPowerOnline [0x87440F5E]");
        }
    };
    public static final HLEModuleFunction scePowerIsBatteryExist = new HLEModuleFunction("scePower_driver", "scePowerIsBatteryExist") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerIsBatteryExist [0x0AFD0D8B]");
        }
    };
    public static final HLEModuleFunction scePowerIsBatteryCharging = new HLEModuleFunction("scePower_driver", "scePowerIsBatteryCharging") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerIsBatteryCharging [0x1E490401]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryChargingStatus = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryChargingStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryChargingStatus [0xB4432BC8]");
        }
    };
    public static final HLEModuleFunction scePowerIsLowBattery = new HLEModuleFunction("scePower_driver", "scePowerIsLowBattery") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerIsLowBattery [0xD3075926]");
        }
    };
    public static final HLEModuleFunction scePower_driver_78A1A796 = new HLEModuleFunction("scePower_driver", "scePower_driver_78A1A796") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_78A1A796 [0x78A1A796]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryRemainCapacity = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryRemainCapacity") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryRemainCapacity [0x94F5A53F]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryFullCapacity = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryFullCapacity") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryFullCapacity [0xFD18A0FF]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryLifePercent = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryLifePercent") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryLifePercent [0x2085D15D]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryLifeTime = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryLifeTime") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryLifeTime [0x8EFB3FA2]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryTemp = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryTemp") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryTemp [0x28E12023]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryElec = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryElec") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryElec [0x862AE1A6]");
        }
    };
    public static final HLEModuleFunction scePowerGetBatteryVolt = new HLEModuleFunction("scePower_driver", "scePowerGetBatteryVolt") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBatteryVolt [0x483CE86B]");
        }
    };
    public static final HLEModuleFunction scePower_driver_23436A4A = new HLEModuleFunction("scePower_driver", "scePower_driver_23436A4A") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_23436A4A [0x23436A4A]");
        }
    };
    public static final HLEModuleFunction scePowerSetPowerSwMode = new HLEModuleFunction("scePower_driver", "scePowerSetPowerSwMode") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerSetPowerSwMode [0x0CD21B1F]");
        }
    };
    public static final HLEModuleFunction scePowerGetPowerSwMode = new HLEModuleFunction("scePower_driver", "scePowerGetPowerSwMode") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetPowerSwMode [0x165CE085]");
        }
    };
    public static final HLEModuleFunction scePowerVolatileMemLock = new HLEModuleFunction("scePower_driver", "scePowerVolatileMemLock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerVolatileMemLock [0x23C31FFE]");
        }
    };
    public static final HLEModuleFunction scePowerVolatileMemTryLock = new HLEModuleFunction("scePower_driver", "scePowerVolatileMemTryLock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerVolatileMemTryLock [0xFA97A599]");
        }
    };
    public static final HLEModuleFunction scePowerVolatileMemUnlock = new HLEModuleFunction("scePower_driver", "scePowerVolatileMemUnlock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerVolatileMemUnlock [0xB3EDD801]");
        }
    };
    public static final HLEModuleFunction scePowerLock = new HLEModuleFunction("scePower_driver", "scePowerLock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerLock [0xD6D016EF]");
        }
    };
    public static final HLEModuleFunction scePowerUnlock = new HLEModuleFunction("scePower_driver", "scePowerUnlock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerUnlock [0xCA3D34C1]");
        }
    };
    public static final HLEModuleFunction scePowerRebootStart = new HLEModuleFunction("scePower_driver", "scePowerRebootStart") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerRebootStart [0x79DB9421]");
        }
    };
    public static final HLEModuleFunction scePowerCancelRequest = new HLEModuleFunction("scePower_driver", "scePowerCancelRequest") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerCancelRequest [0xDB62C9CF]");
        }
    };
    public static final HLEModuleFunction scePowerIsRequest = new HLEModuleFunction("scePower_driver", "scePowerIsRequest") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerIsRequest [0x7FA406DD]");
        }
    };
    public static final HLEModuleFunction scePowerRequestStandby = new HLEModuleFunction("scePower_driver", "scePowerRequestStandby") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerRequestStandby [0x2B7C7CF4]");
        }
    };
    public static final HLEModuleFunction scePowerRequestSuspend = new HLEModuleFunction("scePower_driver", "scePowerRequestSuspend") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerRequestSuspend [0xAC32C9CC]");
        }
    };
    public static final HLEModuleFunction scePower_driver_2875994B = new HLEModuleFunction("scePower_driver", "scePower_driver_2875994B") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_2875994B [0x2875994B]");
        }
    };
    public static final HLEModuleFunction scePowerWaitRequestCompletion = new HLEModuleFunction("scePower_driver", "scePowerWaitRequestCompletion") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerWaitRequestCompletion [0x3951AF53]");
        }
    };
    public static final HLEModuleFunction scePowerGetResumeCount = new HLEModuleFunction("scePower_driver", "scePowerGetResumeCount") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetResumeCount [0x0074EF9B]");
        }
    };
    public static final HLEModuleFunction scePower_driver_F535D928 = new HLEModuleFunction("scePower_driver", "scePower_driver_F535D928") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_F535D928 [0xF535D928]");
        }
    };
    public static final HLEModuleFunction scePowerRegisterCallback = new HLEModuleFunction("scePower_driver", "scePowerRegisterCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerRegisterCallback [0x04B7766E]");
        }
    };
    public static final HLEModuleFunction scePowerUnregisterCallback = new HLEModuleFunction("scePower_driver", "scePowerUnregisterCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerUnregisterCallback [0xDFA8BAF8]");
        }
    };
    public static final HLEModuleFunction scePowerUnregitserCallback = new HLEModuleFunction("scePower_driver", "scePowerUnregitserCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerUnregitserCallback [0xDB9D28DD]");
        }
    };
    public static final HLEModuleFunction scePowerGetTachyonVoltage = new HLEModuleFunction("scePower_driver", "scePowerGetTachyonVoltage") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetTachyonVoltage [0x55D2D789]");
        }
    };
    public static final HLEModuleFunction scePowerSetTachyonVoltage = new HLEModuleFunction("scePower_driver", "scePowerSetTachyonVoltage") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerSetTachyonVoltage [0xDD27F119]");
        }
    };
    public static final HLEModuleFunction scePowerLimitScCpuClock = new HLEModuleFunction("scePower_driver", "scePowerLimitScCpuClock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerLimitScCpuClock [0xD24E6BEB]");
        }
    };
    public static final HLEModuleFunction scePowerLimitScBusClock = new HLEModuleFunction("scePower_driver", "scePowerLimitScBusClock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerLimitScBusClock [0x35B7662E]");
        }
    };
    public static final HLEModuleFunction scePowerLimitPllClock = new HLEModuleFunction("scePower_driver", "scePowerLimitPllClock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerLimitPllClock [0xF9B4DEA1]");
        }
    };
    public static final HLEModuleFunction scePowerSetCpuClockFrequency = new HLEModuleFunction("scePower_driver", "scePowerSetCpuClockFrequency") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerSetCpuClockFrequency [0x843FBF43]");
        }
    };
    public static final HLEModuleFunction scePowerSetBusClockFrequency = new HLEModuleFunction("scePower_driver", "scePowerSetBusClockFrequency") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerSetBusClockFrequency [0xB8D7B3FB]");
        }
    };
    public static final HLEModuleFunction scePowerGetCpuClockFrequency = new HLEModuleFunction("scePower_driver", "scePowerGetCpuClockFrequency") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetCpuClockFrequency [0xFEE03A2F]");
        }
    };
    public static final HLEModuleFunction scePowerGetBusClockFrequency = new HLEModuleFunction("scePower_driver", "scePowerGetBusClockFrequency") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBusClockFrequency [0x478FE6F5]");
        }
    };
    public static final HLEModuleFunction scePowerGetCpuClockFrequencyInt = new HLEModuleFunction("scePower_driver", "scePowerGetCpuClockFrequencyInt") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetCpuClockFrequencyInt [0xFDB5BFE9]");
        }
    };
    public static final HLEModuleFunction scePowerGetBusClockFrequencyInt = new HLEModuleFunction("scePower_driver", "scePowerGetBusClockFrequencyInt") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBusClockFrequencyInt [0xBD681969]");
        }
    };
    public static final HLEModuleFunction scePowerGetPllClockFrequencyInt = new HLEModuleFunction("scePower_driver", "scePowerGetPllClockFrequencyInt") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetPllClockFrequencyInt [0x34F9C463]");
        }
    };
    public static final HLEModuleFunction scePowerGetCpuClockFrequencyFloat = new HLEModuleFunction("scePower_driver", "scePowerGetCpuClockFrequencyFloat") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetCpuClockFrequencyFloat [0xB1A52C83]");
        }
    };
    public static final HLEModuleFunction scePowerGetBusClockFrequencyFloat = new HLEModuleFunction("scePower_driver", "scePowerGetBusClockFrequencyFloat") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetBusClockFrequencyFloat [0x9BADB3EB]");
        }
    };
    public static final HLEModuleFunction scePowerGetPllClockFrequencyFloat = new HLEModuleFunction("scePower_driver", "scePowerGetPllClockFrequencyFloat") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerGetPllClockFrequencyFloat [0xEA382A27]");
        }
    };
    public static final HLEModuleFunction scePowerSetClockFrequency = new HLEModuleFunction("scePower_driver", "scePowerSetClockFrequency") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePowerSetClockFrequency [0x737486F2]");
        }
    };
    public static final HLEModuleFunction scePower_driver_E0B7A95D = new HLEModuleFunction("scePower_driver", "scePower_driver_E0B7A95D") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_E0B7A95D [0xE0B7A95D]");
        }
    };
    public static final HLEModuleFunction scePower_driver_C23AC778 = new HLEModuleFunction("scePower_driver", "scePower_driver_C23AC778") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function scePower_driver_C23AC778 [0xC23AC778]");
        }
    };
};
