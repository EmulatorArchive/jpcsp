/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor

public class sceMpeg implements HLEModule {
	@Override
	public String getName() { return "sceMpeg"; }

	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {

			mm.addFunction(sceMpegQueryStreamOffsetFunction, 0x21FF80E4);
			mm.addFunction(sceMpegQueryStreamSizeFunction, 0x611E9E11);
			mm.addFunction(sceMpegInitFunction, 0x682A619B);
			mm.addFunction(sceMpegFinishFunction, 0x874624D6);
			mm.addFunction(sceMpegQueryMemSizeFunction, 0xC132E22F);
			mm.addFunction(sceMpegCreateFunction, 0xD8C5F121);
			mm.addFunction(sceMpegDeleteFunction, 0x606A4649);
			mm.addFunction(sceMpegRegistStreamFunction, 0x42560F23);
			mm.addFunction(sceMpegUnRegistStreamFunction, 0x591A4AA2);
			mm.addFunction(sceMpegMallocAvcEsBufFunction, 0xA780CF7E);
			mm.addFunction(sceMpegFreeAvcEsBufFunction, 0xCEB870B1);
			mm.addFunction(sceMpegQueryAtracEsSizeFunction, 0xF8DCB679);
			mm.addFunction(sceMpegQueryPcmEsSizeFunction, 0xC02CF6B5);
			mm.addFunction(sceMpegInitAuFunction, 0x167AFD9E);
			mm.addFunction(sceMpegChangeGetAvcAuModeFunction, 0x234586AE);
			mm.addFunction(sceMpegChangeGetAuModeFunction, 0x9DCFB7EA);
			mm.addFunction(sceMpegGetAvcAuFunction, 0xFE246728);
			mm.addFunction(sceMpegGetPcmAuFunction, 0x8C1E027D);
			mm.addFunction(sceMpegGetAtracAuFunction, 0xE1CE83A7);
			mm.addFunction(sceMpegFlushStreamFunction, 0x500F0429);
			mm.addFunction(sceMpegFlushAllStreamFunction, 0x707B7629);
			mm.addFunction(sceMpegAvcDecodeFunction, 0x0E3C2E9D);
			mm.addFunction(sceMpegAvcDecodeDetailFunction, 0x0F6C18D7);
			mm.addFunction(sceMpegAvcDecodeModeFunction, 0xA11C7026);
			mm.addFunction(sceMpegAvcDecodeStopFunction, 0x740FCCD1);
			mm.addFunction(sceMpegAvcDecodeFlushFunction, 0x4571CC64);
			mm.addFunction(sceMpegAvcQueryYCbCrSizeFunction, 0x211A057C);
			mm.addFunction(sceMpegAvcInitYCbCrFunction, 0x67179B1B);
			mm.addFunction(sceMpegAvcDecodeYCbCrFunction, 0xF0EB1125);
			mm.addFunction(sceMpegAvcDecodeStopYCbCrFunction, 0xF2930C9C);
			mm.addFunction(sceMpegAvcCscFunction, 0x31BD0272);
			mm.addFunction(sceMpegAtracDecodeFunction, 0x800C44DF);
			mm.addFunction(sceMpegRingbufferQueryMemSizeFunction, 0xD7A29F46);
			mm.addFunction(sceMpegRingbufferConstructFunction, 0x37295ED8);
			mm.addFunction(sceMpegRingbufferDestructFunction, 0x13407F13);
			mm.addFunction(sceMpegRingbufferPutFunction, 0xB240A59E);
			mm.addFunction(sceMpegRingbufferAvailableSizeFunction, 0xB5F6DC87);
			mm.addFunction(sceMpeg_11CAB459Function, 0x11CAB459);
			mm.addFunction(sceMpegNextAvcRpAuFunction, 0x3C37A7A6);
			mm.addFunction(sceMpeg_B27711A8Function, 0xB27711A8);
			mm.addFunction(sceMpeg_D4DD6E75Function, 0xD4DD6E75);
			mm.addFunction(sceMpeg_C345DED2Function, 0xC345DED2);
			mm.addFunction(sceMpeg_AB0E9556Function, 0xAB0E9556);
			mm.addFunction(sceMpegAvcDecodeDetail2Function, 0xCF3547A2);
			mm.addFunction(sceMpeg_988E9E12Function, 0x988E9E12);

		}
	}

	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {

			mm.removeFunction(sceMpegQueryStreamOffsetFunction);
			mm.removeFunction(sceMpegQueryStreamSizeFunction);
			mm.removeFunction(sceMpegInitFunction);
			mm.removeFunction(sceMpegFinishFunction);
			mm.removeFunction(sceMpegQueryMemSizeFunction);
			mm.removeFunction(sceMpegCreateFunction);
			mm.removeFunction(sceMpegDeleteFunction);
			mm.removeFunction(sceMpegRegistStreamFunction);
			mm.removeFunction(sceMpegUnRegistStreamFunction);
			mm.removeFunction(sceMpegMallocAvcEsBufFunction);
			mm.removeFunction(sceMpegFreeAvcEsBufFunction);
			mm.removeFunction(sceMpegQueryAtracEsSizeFunction);
			mm.removeFunction(sceMpegQueryPcmEsSizeFunction);
			mm.removeFunction(sceMpegInitAuFunction);
			mm.removeFunction(sceMpegChangeGetAvcAuModeFunction);
			mm.removeFunction(sceMpegChangeGetAuModeFunction);
			mm.removeFunction(sceMpegGetAvcAuFunction);
			mm.removeFunction(sceMpegGetPcmAuFunction);
			mm.removeFunction(sceMpegGetAtracAuFunction);
			mm.removeFunction(sceMpegFlushStreamFunction);
			mm.removeFunction(sceMpegFlushAllStreamFunction);
			mm.removeFunction(sceMpegAvcDecodeFunction);
			mm.removeFunction(sceMpegAvcDecodeDetailFunction);
			mm.removeFunction(sceMpegAvcDecodeModeFunction);
			mm.removeFunction(sceMpegAvcDecodeStopFunction);
			mm.removeFunction(sceMpegAvcDecodeFlushFunction);
			mm.removeFunction(sceMpegAvcQueryYCbCrSizeFunction);
			mm.removeFunction(sceMpegAvcInitYCbCrFunction);
			mm.removeFunction(sceMpegAvcDecodeYCbCrFunction);
			mm.removeFunction(sceMpegAvcDecodeStopYCbCrFunction);
			mm.removeFunction(sceMpegAvcCscFunction);
			mm.removeFunction(sceMpegAtracDecodeFunction);
			mm.removeFunction(sceMpegRingbufferQueryMemSizeFunction);
			mm.removeFunction(sceMpegRingbufferConstructFunction);
			mm.removeFunction(sceMpegRingbufferDestructFunction);
			mm.removeFunction(sceMpegRingbufferPutFunction);
			mm.removeFunction(sceMpegRingbufferAvailableSizeFunction);
			mm.removeFunction(sceMpeg_11CAB459Function);
			mm.removeFunction(sceMpegNextAvcRpAuFunction);
			mm.removeFunction(sceMpeg_B27711A8Function);
			mm.removeFunction(sceMpeg_D4DD6E75Function);
			mm.removeFunction(sceMpeg_C345DED2Function);
			mm.removeFunction(sceMpeg_AB0E9556Function);
			mm.removeFunction(sceMpegAvcDecodeDetail2Function);
			mm.removeFunction(sceMpeg_988E9E12Function);

		}
	}


	public void sceMpegQueryStreamOffset(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

        Modules.log.warn("IGNORING:sceMpegQueryStreamOffset");

		cpu.gpr[2] = 0;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegQueryStreamSize(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

        Modules.log.warn("IGNORING:sceMpegQueryStreamSize");

		cpu.gpr[2] = 0;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegInit(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor

		Modules.log.debug("sceMpegInit");

		cpu.gpr[2] = 0;
	}

	public void sceMpegFinish(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegFinish [0x874624D6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegQueryMemSize(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor

		int iUnk = cpu.gpr[4];

		Modules.log.warn("UNIMPLEMENTED:sceMpegQueryMemSize(iUnk=" + iUnk + ")");

        // TODO no idea what this should be, setting it to 128k
        cpu.gpr[2] = 0x20000;
	}

	public void sceMpegCreate(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

        Modules.log.warn("IGNORING:sceMpegCreate");

		cpu.gpr[2] = 0;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegDelete(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegDelete [0x606A4649]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegRegistStream(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegRegistStream [0x42560F23]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegUnRegistStream(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegUnRegistStream [0x591A4AA2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegMallocAvcEsBuf(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegMallocAvcEsBuf [0xA780CF7E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegFreeAvcEsBuf(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegFreeAvcEsBuf [0xCEB870B1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegQueryAtracEsSize(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

        Modules.log.warn("IGNORING:sceMpegQueryAtracEsSize");

		cpu.gpr[2] = 0;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegQueryPcmEsSize(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegQueryPcmEsSize [0xC02CF6B5]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegInitAu(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

        Modules.log.warn("IGNORING:sceMpegInitAu");

		cpu.gpr[2] = 0;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegChangeGetAvcAuMode(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegChangeGetAvcAuMode [0x234586AE]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegChangeGetAuMode(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegChangeGetAuMode [0x9DCFB7EA]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegGetAvcAu(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegGetAvcAu [0xFE246728]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegGetPcmAu(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegGetPcmAu [0x8C1E027D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegGetAtracAu(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegGetAtracAu [0xE1CE83A7]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegFlushStream(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegFlushStream [0x500F0429]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegFlushAllStream(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegFlushAllStream [0x707B7629]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecode(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecode [0x0E3C2E9D]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecodeDetail(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecodeDetail [0x0F6C18D7]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecodeMode(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecodeMode [0xA11C7026]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecodeStop(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecodeStop [0x740FCCD1]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecodeFlush(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecodeFlush [0x4571CC64]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcQueryYCbCrSize(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcQueryYCbCrSize [0x211A057C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcInitYCbCr(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcInitYCbCr [0x67179B1B]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecodeYCbCr(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecodeYCbCr [0xF0EB1125]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecodeStopYCbCr(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecodeStopYCbCr [0xF2930C9C]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcCsc(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcCsc [0x31BD0272]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAtracDecode(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAtracDecode [0x800C44DF]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegRingbufferQueryMemSize(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor

		int iPackets = cpu.gpr[4];

		Modules.log.warn("UNIMPLEMENTED:sceMpegRingbufferQueryMemSize(iPackets=" + iPackets + ")");

        // TODO copied from noxa/pspplayer
        cpu.gpr[2] = ( iPackets * 104 ) + ( iPackets * 2048 );
	}

	public void sceMpegRingbufferConstruct(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

        Modules.log.warn("IGNORING:sceMpegRingbufferConstruct");

		cpu.gpr[2] = 0;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegRingbufferDestruct(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegRingbufferDestruct [0x13407F13]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegRingbufferPut(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegRingbufferPut [0xB240A59E]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegRingbufferAvailableSize(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegRingbufferAvailableSize [0xB5F6DC87]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpeg_11CAB459(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpeg_11CAB459 [0x11CAB459]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegNextAvcRpAu(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegNextAvcRpAu [0x3C37A7A6]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpeg_B27711A8(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpeg_B27711A8 [0xB27711A8]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpeg_D4DD6E75(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpeg_D4DD6E75 [0xD4DD6E75]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpeg_C345DED2(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpeg_C345DED2 [0xC345DED2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpeg_AB0E9556(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpeg_AB0E9556 [0xAB0E9556]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpegAvcDecodeDetail2(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpegAvcDecodeDetail2 [0xCF3547A2]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public void sceMpeg_988E9E12(Processor processor) {
		CpuState cpu = processor.cpu; // New-Style Processor
		// Processor cpu = processor; // Old-Style Processor
		Memory mem = Processor.memory;

		/* put your own code here instead */

		// int a0 = cpu.gpr[4];  int a1 = cpu.gpr[5];  ...  int t3 = cpu.gpr[11];
		// float f12 = cpu.fpr[12];  float f13 = cpu.fpr[13];  ... float f19 = cpu.fpr[19];

		System.out.println("Unimplemented NID function sceMpeg_988E9E12 [0x988E9E12]");

		cpu.gpr[2] = 0xDEADC0DE;

		// cpu.gpr[2] = (int)(result & 0xffffffff);  cpu.gpr[3] = (int)(result  32); cpu.fpr[0] = result;
	}

	public final HLEModuleFunction sceMpegQueryStreamOffsetFunction = new HLEModuleFunction("sceMpeg", "sceMpegQueryStreamOffset") {
		@Override
		public final void execute(Processor processor) {
			sceMpegQueryStreamOffset(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegQueryStreamOffset(processor);";
		}
	};

	public final HLEModuleFunction sceMpegQueryStreamSizeFunction = new HLEModuleFunction("sceMpeg", "sceMpegQueryStreamSize") {
		@Override
		public final void execute(Processor processor) {
			sceMpegQueryStreamSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegQueryStreamSize(processor);";
		}
	};

	public final HLEModuleFunction sceMpegInitFunction = new HLEModuleFunction("sceMpeg", "sceMpegInit") {
		@Override
		public final void execute(Processor processor) {
			sceMpegInit(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegInit(processor);";
		}
	};

	public final HLEModuleFunction sceMpegFinishFunction = new HLEModuleFunction("sceMpeg", "sceMpegFinish") {
		@Override
		public final void execute(Processor processor) {
			sceMpegFinish(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegFinish(processor);";
		}
	};

	public final HLEModuleFunction sceMpegQueryMemSizeFunction = new HLEModuleFunction("sceMpeg", "sceMpegQueryMemSize") {
		@Override
		public final void execute(Processor processor) {
			sceMpegQueryMemSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegQueryMemSize(processor);";
		}
	};

	public final HLEModuleFunction sceMpegCreateFunction = new HLEModuleFunction("sceMpeg", "sceMpegCreate") {
		@Override
		public final void execute(Processor processor) {
			sceMpegCreate(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegCreate(processor);";
		}
	};

	public final HLEModuleFunction sceMpegDeleteFunction = new HLEModuleFunction("sceMpeg", "sceMpegDelete") {
		@Override
		public final void execute(Processor processor) {
			sceMpegDelete(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegDelete(processor);";
		}
	};

	public final HLEModuleFunction sceMpegRegistStreamFunction = new HLEModuleFunction("sceMpeg", "sceMpegRegistStream") {
		@Override
		public final void execute(Processor processor) {
			sceMpegRegistStream(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegRegistStream(processor);";
		}
	};

	public final HLEModuleFunction sceMpegUnRegistStreamFunction = new HLEModuleFunction("sceMpeg", "sceMpegUnRegistStream") {
		@Override
		public final void execute(Processor processor) {
			sceMpegUnRegistStream(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegUnRegistStream(processor);";
		}
	};

	public final HLEModuleFunction sceMpegMallocAvcEsBufFunction = new HLEModuleFunction("sceMpeg", "sceMpegMallocAvcEsBuf") {
		@Override
		public final void execute(Processor processor) {
			sceMpegMallocAvcEsBuf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegMallocAvcEsBuf(processor);";
		}
	};

	public final HLEModuleFunction sceMpegFreeAvcEsBufFunction = new HLEModuleFunction("sceMpeg", "sceMpegFreeAvcEsBuf") {
		@Override
		public final void execute(Processor processor) {
			sceMpegFreeAvcEsBuf(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegFreeAvcEsBuf(processor);";
		}
	};

	public final HLEModuleFunction sceMpegQueryAtracEsSizeFunction = new HLEModuleFunction("sceMpeg", "sceMpegQueryAtracEsSize") {
		@Override
		public final void execute(Processor processor) {
			sceMpegQueryAtracEsSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegQueryAtracEsSize(processor);";
		}
	};

	public final HLEModuleFunction sceMpegQueryPcmEsSizeFunction = new HLEModuleFunction("sceMpeg", "sceMpegQueryPcmEsSize") {
		@Override
		public final void execute(Processor processor) {
			sceMpegQueryPcmEsSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegQueryPcmEsSize(processor);";
		}
	};

	public final HLEModuleFunction sceMpegInitAuFunction = new HLEModuleFunction("sceMpeg", "sceMpegInitAu") {
		@Override
		public final void execute(Processor processor) {
			sceMpegInitAu(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegInitAu(processor);";
		}
	};

	public final HLEModuleFunction sceMpegChangeGetAvcAuModeFunction = new HLEModuleFunction("sceMpeg", "sceMpegChangeGetAvcAuMode") {
		@Override
		public final void execute(Processor processor) {
			sceMpegChangeGetAvcAuMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegChangeGetAvcAuMode(processor);";
		}
	};

	public final HLEModuleFunction sceMpegChangeGetAuModeFunction = new HLEModuleFunction("sceMpeg", "sceMpegChangeGetAuMode") {
		@Override
		public final void execute(Processor processor) {
			sceMpegChangeGetAuMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegChangeGetAuMode(processor);";
		}
	};

	public final HLEModuleFunction sceMpegGetAvcAuFunction = new HLEModuleFunction("sceMpeg", "sceMpegGetAvcAu") {
		@Override
		public final void execute(Processor processor) {
			sceMpegGetAvcAu(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegGetAvcAu(processor);";
		}
	};

	public final HLEModuleFunction sceMpegGetPcmAuFunction = new HLEModuleFunction("sceMpeg", "sceMpegGetPcmAu") {
		@Override
		public final void execute(Processor processor) {
			sceMpegGetPcmAu(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegGetPcmAu(processor);";
		}
	};

	public final HLEModuleFunction sceMpegGetAtracAuFunction = new HLEModuleFunction("sceMpeg", "sceMpegGetAtracAu") {
		@Override
		public final void execute(Processor processor) {
			sceMpegGetAtracAu(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegGetAtracAu(processor);";
		}
	};

	public final HLEModuleFunction sceMpegFlushStreamFunction = new HLEModuleFunction("sceMpeg", "sceMpegFlushStream") {
		@Override
		public final void execute(Processor processor) {
			sceMpegFlushStream(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegFlushStream(processor);";
		}
	};

	public final HLEModuleFunction sceMpegFlushAllStreamFunction = new HLEModuleFunction("sceMpeg", "sceMpegFlushAllStream") {
		@Override
		public final void execute(Processor processor) {
			sceMpegFlushAllStream(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegFlushAllStream(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecode") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecode(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeDetailFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecodeDetail") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecodeDetail(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecodeDetail(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeModeFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecodeMode") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecodeMode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecodeMode(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeStopFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecodeStop") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecodeStop(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecodeStop(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeFlushFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecodeFlush") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecodeFlush(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecodeFlush(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcQueryYCbCrSizeFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcQueryYCbCrSize") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcQueryYCbCrSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcQueryYCbCrSize(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcInitYCbCrFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcInitYCbCr") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcInitYCbCr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcInitYCbCr(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeYCbCrFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecodeYCbCr") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecodeYCbCr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecodeYCbCr(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeStopYCbCrFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecodeStopYCbCr") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecodeStopYCbCr(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecodeStopYCbCr(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcCscFunction = new HLEModuleFunction("sceMpeg", "sceMpegAvcCsc") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcCsc(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcCsc(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAtracDecodeFunction = new HLEModuleFunction("sceMpeg", "sceMpegAtracDecode") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAtracDecode(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAtracDecode(processor);";
		}
	};

	public final HLEModuleFunction sceMpegRingbufferQueryMemSizeFunction = new HLEModuleFunction("sceMpeg", "sceMpegRingbufferQueryMemSize") {
		@Override
		public final void execute(Processor processor) {
			sceMpegRingbufferQueryMemSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegRingbufferQueryMemSize(processor);";
		}
	};

	public final HLEModuleFunction sceMpegRingbufferConstructFunction = new HLEModuleFunction("sceMpeg", "sceMpegRingbufferConstruct") {
		@Override
		public final void execute(Processor processor) {
			sceMpegRingbufferConstruct(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegRingbufferConstruct(processor);";
		}
	};

	public final HLEModuleFunction sceMpegRingbufferDestructFunction = new HLEModuleFunction("sceMpeg", "sceMpegRingbufferDestruct") {
		@Override
		public final void execute(Processor processor) {
			sceMpegRingbufferDestruct(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegRingbufferDestruct(processor);";
		}
	};

	public final HLEModuleFunction sceMpegRingbufferPutFunction = new HLEModuleFunction("sceMpeg", "sceMpegRingbufferPut") {
		@Override
		public final void execute(Processor processor) {
			sceMpegRingbufferPut(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegRingbufferPut(processor);";
		}
	};

	public final HLEModuleFunction sceMpegRingbufferAvailableSizeFunction = new HLEModuleFunction("sceMpeg", "sceMpegRingbufferAvailableSize") {
		@Override
		public final void execute(Processor processor) {
			sceMpegRingbufferAvailableSize(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegRingbufferAvailableSize(processor);";
		}
	};

	public final HLEModuleFunction sceMpeg_11CAB459Function = new HLEModuleFunction("sceMpeg", "sceMpeg_11CAB459") {
		@Override
		public final void execute(Processor processor) {
			sceMpeg_11CAB459(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpeg_11CAB459(processor);";
		}
	};

	public final HLEModuleFunction sceMpegNextAvcRpAuFunction = new HLEModuleFunction("sceMpeg", "sceMpegNextAvcRpAu") {
		@Override
		public final void execute(Processor processor) {
			sceMpegNextAvcRpAu(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegNextAvcRpAu(processor);";
		}
	};

	public final HLEModuleFunction sceMpeg_B27711A8Function = new HLEModuleFunction("sceMpeg", "sceMpeg_B27711A8") {
		@Override
		public final void execute(Processor processor) {
			sceMpeg_B27711A8(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpeg_B27711A8(processor);";
		}
	};

	public final HLEModuleFunction sceMpeg_D4DD6E75Function = new HLEModuleFunction("sceMpeg", "sceMpeg_D4DD6E75") {
		@Override
		public final void execute(Processor processor) {
			sceMpeg_D4DD6E75(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpeg_D4DD6E75(processor);";
		}
	};

	public final HLEModuleFunction sceMpeg_C345DED2Function = new HLEModuleFunction("sceMpeg", "sceMpeg_C345DED2") {
		@Override
		public final void execute(Processor processor) {
			sceMpeg_C345DED2(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpeg_C345DED2(processor);";
		}
	};

	public final HLEModuleFunction sceMpeg_AB0E9556Function = new HLEModuleFunction("sceMpeg", "sceMpeg_AB0E9556") {
		@Override
		public final void execute(Processor processor) {
			sceMpeg_AB0E9556(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpeg_AB0E9556(processor);";
		}
	};

	public final HLEModuleFunction sceMpegAvcDecodeDetail2Function = new HLEModuleFunction("sceMpeg", "sceMpegAvcDecodeDetail2") {
		@Override
		public final void execute(Processor processor) {
			sceMpegAvcDecodeDetail2(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpegAvcDecodeDetail2(processor);";
		}
	};

	public final HLEModuleFunction sceMpeg_988E9E12Function = new HLEModuleFunction("sceMpeg", "sceMpeg_988E9E12") {
		@Override
		public final void execute(Processor processor) {
			sceMpeg_988E9E12(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.sceMpegModule.sceMpeg_988E9E12(processor);";
		}
	};

};
