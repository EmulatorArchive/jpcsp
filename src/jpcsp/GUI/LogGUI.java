/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */
package jpcsp.GUI;

import jpcsp.log.LogWindow;
import jpcsp.MainGUI;
import jpcsp.Resource;
import jpcsp.Settings;

import java.io.File;
import java.io.RandomAccessFile;
import javax.swing.JFileChooser;

public class LogGUI extends javax.swing.JFrame {

    private static final long serialVersionUID = -732715495873159718L;
    private static final String LB = System.getProperty("line.separator");
    private MainGUI mainWindow = null;
    private String LogSettingsPath;

    public LogGUI() {
        initComponents();

        setLogSettingsFile();

        boolean enabled = Settings.getInstance().readBool("gui.openLogwindow");
        openLogwindowCheck.setSelected(enabled);

        enabled = Settings.getInstance().readBool("gui.snapLogwindow");
        snapConsoleCheck.setSelected(enabled);
    }

    public void setMainGUI(MainGUI mainWindow) {
        this.mainWindow = mainWindow;
    }

    private void setLogSettingsFile() {
        LogSettingsPath = xmlpath.getText();
        LogWindow.setConfXMLFile(LogSettingsPath);
        printLogSettingsFile();
    }

    private void printLogSettingsFile() {
        try {
            RandomAccessFile raf = new RandomAccessFile(LogSettingsPath, "r");
            while (raf.getFilePointer() < raf.length()) {
                settingsArea.append(raf.readLine() + LB);
            }
            raf.close();
        } catch (Exception e) {
            settingsArea.setEnabled(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        LoggerGeneralPanel = new javax.swing.JPanel();
        openLogwindowCheck = new javax.swing.JCheckBox();
        snapConsoleCheck = new javax.swing.JCheckBox();
        LoggerSettingsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        settingsArea = new javax.swing.JTextArea();
        fileButton = new javax.swing.JButton();
        xmlpath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        outputToHTML = new javax.swing.JCheckBox();
        outputToText = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        logoutpath = new javax.swing.JTextField();

        setTitle("Customize Logger");
        setResizable(false);

        jButtonOK.setText(Resource.get("ok"));
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonCancel.setText(Resource.get("cancel"));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        openLogwindowCheck.setText(Resource.get("openconsole"));

        snapConsoleCheck.setText(Resource.get("snapconsole"));

        javax.swing.GroupLayout LoggerGeneralPanelLayout = new javax.swing.GroupLayout(LoggerGeneralPanel);
        LoggerGeneralPanel.setLayout(LoggerGeneralPanelLayout);
        LoggerGeneralPanelLayout.setHorizontalGroup(
            LoggerGeneralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoggerGeneralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoggerGeneralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoggerGeneralPanelLayout.createSequentialGroup()
                        .addComponent(snapConsoleCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(LoggerGeneralPanelLayout.createSequentialGroup()
                        .addComponent(openLogwindowCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                        .addGap(592, 592, 592))))
        );
        LoggerGeneralPanelLayout.setVerticalGroup(
            LoggerGeneralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoggerGeneralPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(openLogwindowCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(snapConsoleCheck)
                .addContainerGap(262, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(Resource.get("general"), LoggerGeneralPanel);

        settingsArea.setColumns(20);
        settingsArea.setEditable(false);
        settingsArea.setRows(5);
        jScrollPane1.setViewportView(settingsArea);

        fileButton.setText("...");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        xmlpath.setEditable(false);
        xmlpath.setText("LogSettings.xml");

        jLabel1.setText("Settings file path:");

        saveButton.setText("Generate new settings file");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        outputToHTML.setSelected(true);
        outputToHTML.setText("Output log results to HTML file");

        outputToText.setText("Output log results to text file");

        jLabel2.setText("Output file name:");

        logoutpath.setText("log");

        javax.swing.GroupLayout LoggerSettingsPanelLayout = new javax.swing.GroupLayout(LoggerSettingsPanel);
        LoggerSettingsPanel.setLayout(LoggerSettingsPanelLayout);
        LoggerSettingsPanelLayout.setHorizontalGroup(
            LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoggerSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputToText, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addComponent(outputToHTML, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addGroup(LoggerSettingsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoutpath, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(saveButton)
                        .addGroup(LoggerSettingsPanelLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(xmlpath, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        LoggerSettingsPanelLayout.setVerticalGroup(
            LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoggerSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LoggerSettingsPanelLayout.createSequentialGroup()
                        .addComponent(outputToHTML)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputToText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(logoutpath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(xmlpath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                        .addComponent(saveButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Settings", LoggerSettingsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void RefreshWindow() {
        boolean enabled = Settings.getInstance().readBool("gui.openLogwindow");
        openLogwindowCheck.setSelected(enabled);

        enabled = Settings.getInstance().readBool("gui.snapLogwindow");
        snapConsoleCheck.setSelected(enabled);
    }
private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
    Settings.getInstance().writeBool("gui.openLogwindow", openLogwindowCheck.isSelected());
    Settings.getInstance().writeBool("gui.snapLogwindow", snapConsoleCheck.isSelected());

    if (snapConsoleCheck.isSelected() && mainWindow != null) {
        mainWindow.snaptoMainwindow();
    }

    dispose();
}//GEN-LAST:event_jButtonOKActionPerformed

private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
    RefreshWindow();
    dispose();
}//GEN-LAST:event_jButtonCancelActionPerformed

private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
    JFileChooser folderChooser = new JFileChooser("Select file...");
    int result = folderChooser.showOpenDialog(this);
    if (result == JFileChooser.APPROVE_OPTION) {
        xmlpath.setText(folderChooser.getSelectedFile().getPath());
        setLogSettingsFile();
    }
}//GEN-LAST:event_fileButtonActionPerformed

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    try {
        File f = new File(LogSettingsPath);
        if (f.exists()) {
            f.delete();
        }
        String outName = "log";
        if (!logoutpath.getText().equals("")) {
            outName = logoutpath.getText();
        }

        RandomAccessFile raf = new RandomAccessFile(LogSettingsPath, "rw");

        String header = "<?xml version='1.0' encoding='UTF-8' ?>" + LB +
                "<!DOCTYPE log4j:configuration SYSTEM 'log4j.dtd'>" + LB + LB +
                "<log4j:configuration>" + LB + LB;

        String windowAppender = "<appender name='JpcspAppender' class='jpcsp.log.TextPaneAppender'>" + LB +
                "<layout class='org.apache.log4j.PatternLayout'>" + LB +
                "<param name='ConversionPattern' value='%r [%t] %-5p %c - %m%n' />" + LB +
                "</layout>" + LB +
                "</appender>" + LB;

        String htmlAppender = "<appender name='HTMLAppender' class='org.apache.log4j.FileAppender'>" + LB +
                "<param name='File' value='" + outName + ".html' />" + LB +
                "<param name='Append' value='false' />" + LB +
                "<layout class='jpcsp.log.HTMLLayout'>" + LB +
                "<param name='Title' value='Jpcsp log file' />" + LB +
                "</layout>" + LB +
                "</appender>" + LB;

        String textAppender = "<appender name='TxtAppender' class='org.apache.log4j.FileAppender'>" + LB +
                "<param name='File' value='" + outName + ".txt' />" + LB +
                "<param name='Append' value='false' />" + LB +
                "<layout class='org.apache.log4j.PatternLayout'>" + LB +
                "<param name='ConversionPattern' value='%5p %8c - %t - %m%n' />" + LB +
                "</layout>" + LB +
                "</appender>" + LB;

        String profilerAppender = "<appender name='ProfilerTxtAppender' class='org.apache.log4j.FileAppender'>" + LB +
                "<param name='File' value='profiler.txt' />" + LB +
                "<param name='Append' value='false' />" + LB +
                "<layout class='org.apache.log4j.PatternLayout'>" + LB +
                "<param name='ConversionPattern' value='%m%n' />" + LB +
                "</layout>" + LB +
                "</appender>" + LB;

        String loggers = LB + "<logger name='cpu' />" + LB +
                "<logger name='hle' />" + LB +
                "<logger name='memory' />" + LB +
                "<logger name='ge' />" + LB +
                "<logger name='misc' />" + LB +
                "<!-- Output profiler info to 'profiler.txt' -->" + LB +
                "<logger name='profiler' additivity='false'>" + LB +
                "<level value='info' />" + LB +
                "<appender-ref ref='ProfilerTxtAppender' />" + LB +
                "</logger>" + LB;

        String rootStart = LB + "<root>" + LB +
                "<level value ='off' />" + LB;
        String rootWindowAppender = "<appender-ref ref='JpcspAppender' />" + LB;
        String rootHtmlAppender = "<appender-ref ref='HTMLAppender' />" + LB;
        String rootTextAppender = "<appender-ref ref='TxtAppender' />" + LB;

        String rootEnd = "</root>" + LB + LB +
                "</log4j:configuration>" + LB;

        String contents = header + windowAppender;
        if (outputToHTML.isSelected()) {
            contents += htmlAppender;
        }
        if (outputToText.isSelected()) {
            contents += textAppender;
        }
        contents += profilerAppender;
        contents += loggers;
        contents += rootStart;
        contents += rootWindowAppender;
        if (outputToHTML.isSelected()) {
            contents += rootHtmlAppender;
        }
        if (outputToText.isSelected()) {
            contents += rootTextAppender;
        }
        contents += rootEnd;

        raf.writeBytes(contents);
        raf.close();
    } catch (Exception e) {
        // Ignore.
    }
    settingsArea.setText("");
    setLogSettingsFile();
}//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LoggerGeneralPanel;
    private javax.swing.JPanel LoggerSettingsPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton fileButton;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField logoutpath;
    private javax.swing.JCheckBox openLogwindowCheck;
    private javax.swing.JCheckBox outputToHTML;
    private javax.swing.JCheckBox outputToText;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea settingsArea;
    private javax.swing.JCheckBox snapConsoleCheck;
    private javax.swing.JTextField xmlpath;
    // End of variables declaration//GEN-END:variables

}
