/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */
package jpcsp.util;

import static jpcsp.HLE.modules150.sceDisplay.PSP_DISPLAY_PIXEL_FORMAT_4444;
import static jpcsp.HLE.modules150.sceDisplay.PSP_DISPLAY_PIXEL_FORMAT_5551;
import static jpcsp.HLE.modules150.sceDisplay.PSP_DISPLAY_PIXEL_FORMAT_565;
import static jpcsp.HLE.modules150.sceDisplay.PSP_DISPLAY_PIXEL_FORMAT_8888;
import jpcsp.Memory;
import jpcsp.HLE.Modules;
import jpcsp.HLE.modules150.sceFont;

/**
 * @author gid15
 *
 */
public class Debug {
	public static final int fontPixelSize = 2;

	// Pixel sizes in bytes for the font:
	// FONT_PIXELFORMAT_4 :    0 (means 2 pixels per byte)
	// FONT_PIXELFORMAT_4_REV: 0 (means 2 pixels per byte)
	// FONT_PIXELFORMAT_8 :    1 byte
	// FONT_PIXELFORMAT_24:    3 bytes
	// FONT_PIXELFORMAT_32:    4 bytes
	private static final int[] fontPixelSizeInBytes = { 0, 0, 1, 3, 4 }; // 0 means 2 pixels per byte

    // For sceFont.
    // Use this function to print a char using the font buffer's dimensions.
    public static void printFontbuffer(int base, int bpl, int bufWidth, int bufHeight, int x, int y, int pixelformat, char c) {
        if (Modules.log.isInfoEnabled()) {
        	Modules.log.info(String.format("printFontbuffer '%c' (%d, %d)", c, x, y));
        }

        if (sceFont.getAlternateChar() * 8 >= Font.font.length) {
            sceFont.setAlternateChar('?');
        }
        int fontBaseIndex = c * 8;
        if (fontBaseIndex >= Font.font.length) {
            fontBaseIndex = sceFont.getAlternateChar() * 8;
        }
        int pixelColor0 = getFontPixelColor(0x00000000, pixelformat);
		int pixelColor1 = getFontPixelColor(0xFFFFFFFF, pixelformat);
        for (int i = 0; i < Font.charHeight; i++) {
            for (int j = 0; j < Font.charWidth; j++) {
                int pixel = Font.font[fontBaseIndex + i] & (128 >> j);
                int pixelColor = (pixel != 0) ? pixelColor1 : pixelColor0;
                for (int pixelY = 0; pixelY < fontPixelSize; pixelY++) {
                	for (int pixelX = 0; pixelX < fontPixelSize; pixelX++) {
                        setFontPixel(base, bpl, bufWidth, bufHeight, x + j * fontPixelSize + pixelX, y + i * fontPixelSize + pixelY, pixelColor, pixelformat);
                	}
                }
            }
        }
    }

    // For sceFont.
    private static void setFontPixel(int base, int bpl, int bufWidth, int bufHeight, int x, int y, int pixelColor, int pixelformat) {
    	if (x < 0 || x >= bufWidth || y < 0 || y >= bufHeight) {
    		return;
    	}

		int pixelBytes = getFontPixelBytes(pixelformat);
		// pixelBytes == 0 means 2 pixels per byte
		int bufMaxWidth = (pixelBytes == 0 ? bpl * 2 : bpl / pixelBytes);
		if (x >= bufMaxWidth) {
			return;
		}

		int framebufferAddr = base + (y * bpl) + (pixelBytes == 0 ? x / 2 : x * pixelBytes);

    	Memory mem = Memory.getInstance();
        switch (pixelformat) {
        	case sceFont.PSP_FONT_PIXELFORMAT_4:
        	case sceFont.PSP_FONT_PIXELFORMAT_4_REV: {
        		int oldColor = mem.read8(framebufferAddr);
        		int newColor;
        		if ((x & 1) != pixelformat) {
        			newColor = (pixelColor << 4) | (oldColor & 0xF);
        		} else {
        			newColor = (oldColor & 0xF0) | pixelColor;
        		}
        		mem.write8(framebufferAddr, (byte) newColor);
        		break;
        	}
        	case sceFont.PSP_FONT_PIXELFORMAT_8: {
        		mem.write8(framebufferAddr, (byte) pixelColor);
        		break;
        	}
        	case sceFont.PSP_FONT_PIXELFORMAT_24: {
        		mem.write8(framebufferAddr + 0, (byte) (pixelColor >>  0));
        		mem.write8(framebufferAddr + 1, (byte) (pixelColor >>  8));
        		mem.write8(framebufferAddr + 2, (byte) (pixelColor >> 16));
        		break;
        	}
        	case sceFont.PSP_FONT_PIXELFORMAT_32: {
        		mem.write32(framebufferAddr, pixelColor);
        		break;
        	}
        }
	}

    private static int getFontPixelBytes(int pixelformat) {
    	if (pixelformat >= 0 && pixelformat < fontPixelSizeInBytes.length) {
    		return fontPixelSizeInBytes[pixelformat];
    	}

    	Modules.log.warn("Unknown pixel format for sceFont: " + pixelformat);
    	return 1;
    }

	public static int getFontPixelColor(int color, int pixelformat) {
		switch (pixelformat) {
			case sceFont.PSP_FONT_PIXELFORMAT_4:
			case sceFont.PSP_FONT_PIXELFORMAT_4_REV:
				// Use only 4-bit alpha
				color = (color >> 28) & 0xF;
				break;
			case sceFont.PSP_FONT_PIXELFORMAT_8:
				// Use only 8-bit alpha
				color = (color >> 24) & 0xFF;
				break;
			case sceFont.PSP_FONT_PIXELFORMAT_24:
				// Use RGB with 8-bit values
				color = color & 0x00FFFFFF;
				break;
			case sceFont.PSP_FONT_PIXELFORMAT_32:
				// Use RGBA with 8-bit values
				break;
		}

		return color;
	}

	public static void printFramebuffer(int base, int bufferwidth, int x, int y, int colorFg, int colorBg, int pixelformat, String s) {
		printFramebuffer(base, bufferwidth, x, y, colorFg, colorBg, pixelformat, 1, s);
	}

	public static void printFramebuffer(int base, int bufferwidth, int x, int y, int colorFg, int colorBg, int pixelformat, int size, String s) {
		int length = s.length();
		for (int i = 0; i < length; i++) {
			char c = s.charAt(i);
			if (c == '\n') {
				x = 0;
				y += Font.charHeight * size;
			} else {
				printFramebuffer(base, bufferwidth, x, y, colorFg, colorBg, pixelformat, size, c);
				x += Font.charWidth * size;
			}
		}
	}

	private static void printFramebuffer(int base, int bufferwidth, int x, int y, int colorFg, int colorBg, int pixelformat, int size, char c) {
		int fontBaseIndex = c * 8;
		for (int i = 0; i < Font.charHeight; i++) {
			for (int j = 0; j < Font.charWidth; j++) {
				int pixel = Font.font[fontBaseIndex + i] & (128 >> j);
				if (pixel != 0) {
					setPixel(base, bufferwidth, x + j * size, y + i * size, colorFg, pixelformat, size);
				} else if (colorBg != 0) {
					setPixel(base, bufferwidth, x + j * size, y + i * size, colorBg, pixelformat, size);
				}
			}
		}
	}

	private static void setPixel(int base, int bufferwidth, int x, int y, int color, int pixelformat, int size) {
		Memory mem = Memory.getInstance();
		int pixelBytes = jpcsp.HLE.modules150.sceDisplay.getPixelFormatBytes(pixelformat);
		int framebufferAddr = base + (y * bufferwidth + x) * pixelBytes;
		int pixelColor = getPixelColor(color, pixelformat);
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				if (pixelBytes == 4) {
					mem.write32(framebufferAddr + j * pixelBytes, pixelColor);
				} else if (pixelBytes == 2) {
					mem.write16(framebufferAddr + j * pixelBytes, (short) pixelColor);
				}
			}
			framebufferAddr += bufferwidth * pixelBytes;
		}
	}

	public static int getPixelColor(int color, int pixelformat) {
		switch (pixelformat) {
			case PSP_DISPLAY_PIXEL_FORMAT_565:
				color = ((color & 0x00F80000) >> 8) | ((color & 0x0000FC00) >> 5) | ((color & 0x000000F8) >> 3);
				break;
			case PSP_DISPLAY_PIXEL_FORMAT_5551:
				color = ((color & 0x80000000) >> 16) | ((color & 0x00F80000) >> 9) | ((color & 0x0000F800) >> 6) | ((color & 0x000000F8) >> 3);
				break;
			case PSP_DISPLAY_PIXEL_FORMAT_4444:
				color = ((color & 0xF0000000) >> 16) | ((color & 0x00F00000) >> 12) | ((color & 0x0000F000) >> 8) | ((color & 0x000000F0) >> 4);
				break;
			case PSP_DISPLAY_PIXEL_FORMAT_8888:
				break;
		}
		return color;
	}

	public static class Font {
		public final static int charWidth = 8;
		public final static int charHeight = 8;
		// Font design from pspsdk (debug/font.c)
		public final static char[] font = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0xa5, 0x81, 0xa5, 0x99, 0x42, 0x3c,
			0x3c, 0x7e, 0xdb, 0xff, 0xff, 0xdb, 0x66, 0x3c, 0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
			0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x10, 0x38, 0x54, 0xfe, 0x54, 0x10, 0x38, 0x00,
			0x10, 0x38, 0x7c, 0xfe, 0xfe, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0x38, 0x44, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00,
			0xc7, 0xbb, 0x7d, 0x7d, 0x7d, 0xbb, 0xc7, 0xff, 0x0f, 0x03, 0x05, 0x79, 0x88, 0x88, 0x88, 0x70,
			0x38, 0x44, 0x44, 0x44, 0x38, 0x10, 0x7c, 0x10, 0x30, 0x28, 0x24, 0x24, 0x28, 0x20, 0xe0, 0xc0,
			0x3c, 0x24, 0x3c, 0x24, 0x24, 0xe4, 0xdc, 0x18, 0x10, 0x54, 0x38, 0xee, 0x38, 0x54, 0x10, 0x00,
			0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xff, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xf0, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x1f, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0xf0, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0xf0, 0x00, 0x00, 0x00, 0x00,
			0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
			0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x10, 0x10, 0xff, 0x10, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00,
			0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x50, 0xf8, 0x50, 0xf8, 0x50, 0x50, 0x00,
			0x20, 0x78, 0xa0, 0x70, 0x28, 0xf0, 0x20, 0x00, 0xc0, 0xc8, 0x10, 0x20, 0x40, 0x98, 0x18, 0x00,
			0x40, 0xa0, 0x40, 0xa8, 0x90, 0x98, 0x60, 0x00, 0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10, 0x00, 0x40, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40, 0x00,
			0x20, 0xa8, 0x70, 0x20, 0x70, 0xa8, 0x20, 0x00, 0x00, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x40, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00,
			0x70, 0x88, 0x98, 0xa8, 0xc8, 0x88, 0x70, 0x00, 0x20, 0x60, 0xa0, 0x20, 0x20, 0x20, 0xf8, 0x00,
			0x70, 0x88, 0x08, 0x10, 0x60, 0x80, 0xf8, 0x00, 0x70, 0x88, 0x08, 0x30, 0x08, 0x88, 0x70, 0x00,
			0x10, 0x30, 0x50, 0x90, 0xf8, 0x10, 0x10, 0x00, 0xf8, 0x80, 0xe0, 0x10, 0x08, 0x10, 0xe0, 0x00,
			0x30, 0x40, 0x80, 0xf0, 0x88, 0x88, 0x70, 0x00, 0xf8, 0x88, 0x10, 0x20, 0x20, 0x20, 0x20, 0x00,
			0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70, 0x00, 0x70, 0x88, 0x88, 0x78, 0x08, 0x10, 0x60, 0x00,
			0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x40,
			0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00,
			0xc0, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc0, 0x00, 0x70, 0x88, 0x08, 0x10, 0x20, 0x00, 0x20, 0x00,
			0x70, 0x88, 0x08, 0x68, 0xa8, 0xa8, 0x70, 0x00, 0x20, 0x50, 0x88, 0x88, 0xf8, 0x88, 0x88, 0x00,
			0xf0, 0x48, 0x48, 0x70, 0x48, 0x48, 0xf0, 0x00, 0x30, 0x48, 0x80, 0x80, 0x80, 0x48, 0x30, 0x00,
			0xe0, 0x50, 0x48, 0x48, 0x48, 0x50, 0xe0, 0x00, 0xf8, 0x80, 0x80, 0xf0, 0x80, 0x80, 0xf8, 0x00,
			0xf8, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0x00, 0x70, 0x88, 0x80, 0xb8, 0x88, 0x88, 0x70, 0x00,
			0x88, 0x88, 0x88, 0xf8, 0x88, 0x88, 0x88, 0x00, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00,
			0x38, 0x10, 0x10, 0x10, 0x90, 0x90, 0x60, 0x00, 0x88, 0x90, 0xa0, 0xc0, 0xa0, 0x90, 0x88, 0x00,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xf8, 0x00, 0x88, 0xd8, 0xa8, 0xa8, 0x88, 0x88, 0x88, 0x00,
			0x88, 0xc8, 0xc8, 0xa8, 0x98, 0x98, 0x88, 0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00,
			0xf0, 0x88, 0x88, 0xf0, 0x80, 0x80, 0x80, 0x00, 0x70, 0x88, 0x88, 0x88, 0xa8, 0x90, 0x68, 0x00,
			0xf0, 0x88, 0x88, 0xf0, 0xa0, 0x90, 0x88, 0x00, 0x70, 0x88, 0x80, 0x70, 0x08, 0x88, 0x70, 0x00,
			0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00,
			0x88, 0x88, 0x88, 0x88, 0x50, 0x50, 0x20, 0x00, 0x88, 0x88, 0x88, 0xa8, 0xa8, 0xd8, 0x88, 0x00,
			0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 0x88, 0x00, 0x88, 0x88, 0x88, 0x70, 0x20, 0x20, 0x20, 0x00,
			0xf8, 0x08, 0x10, 0x20, 0x40, 0x80, 0xf8, 0x00, 0x70, 0x40, 0x40, 0x40, 0x40, 0x40, 0x70, 0x00,
			0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00,
			0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00,
			0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00,
			0x80, 0x80, 0xb0, 0xc8, 0x88, 0xc8, 0xb0, 0x00, 0x00, 0x00, 0x70, 0x88, 0x80, 0x88, 0x70, 0x00,
			0x08, 0x08, 0x68, 0x98, 0x88, 0x98, 0x68, 0x00, 0x00, 0x00, 0x70, 0x88, 0xf8, 0x80, 0x70, 0x00,
			0x10, 0x28, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x68, 0x98, 0x98, 0x68, 0x08, 0x70,
			0x80, 0x80, 0xf0, 0x88, 0x88, 0x88, 0x88, 0x00, 0x20, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00,
			0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x90, 0x60, 0x40, 0x40, 0x48, 0x50, 0x60, 0x50, 0x48, 0x00,
			0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00, 0x00, 0xd0, 0xa8, 0xa8, 0xa8, 0xa8, 0x00,
			0x00, 0x00, 0xb0, 0xc8, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00,
			0x00, 0x00, 0xb0, 0xc8, 0xc8, 0xb0, 0x80, 0x80, 0x00, 0x00, 0x68, 0x98, 0x98, 0x68, 0x08, 0x08,
			0x00, 0x00, 0xb0, 0xc8, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x78, 0x80, 0xf0, 0x08, 0xf0, 0x00,
			0x40, 0x40, 0xf0, 0x40, 0x40, 0x48, 0x30, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x68, 0x00,
			0x00, 0x00, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00, 0x00, 0x00, 0x88, 0xa8, 0xa8, 0xa8, 0x50, 0x00,
			0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x88, 0x88, 0x98, 0x68, 0x08, 0x70,
			0x00, 0x00, 0xf8, 0x10, 0x20, 0x40, 0xf8, 0x00, 0x18, 0x20, 0x20, 0x40, 0x20, 0x20, 0x18, 0x00,
			0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0xc0, 0x20, 0x20, 0x10, 0x20, 0x20, 0xc0, 0x00,
			0x40, 0xa8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x50, 0xf8, 0x00, 0x00, 0x00,
			0x70, 0x88, 0x80, 0x80, 0x88, 0x70, 0x20, 0x60, 0x90, 0x00, 0x00, 0x90, 0x90, 0x90, 0x68, 0x00,
			0x10, 0x20, 0x70, 0x88, 0xf8, 0x80, 0x70, 0x00, 0x20, 0x50, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00,
			0x48, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x20, 0x10, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00,
			0x20, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x00, 0x70, 0x80, 0x80, 0x80, 0x70, 0x10, 0x60,
			0x20, 0x50, 0x70, 0x88, 0xf8, 0x80, 0x70, 0x00, 0x50, 0x00, 0x70, 0x88, 0xf8, 0x80, 0x70, 0x00,
			0x20, 0x10, 0x70, 0x88, 0xf8, 0x80, 0x70, 0x00, 0x50, 0x00, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00,
			0x20, 0x50, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00, 0x40, 0x20, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00,
			0x50, 0x00, 0x20, 0x50, 0x88, 0xf8, 0x88, 0x00, 0x20, 0x00, 0x20, 0x50, 0x88, 0xf8, 0x88, 0x00,
			0x10, 0x20, 0xf8, 0x80, 0xf0, 0x80, 0xf8, 0x00, 0x00, 0x00, 0x6c, 0x12, 0x7e, 0x90, 0x6e, 0x00,
			0x3e, 0x50, 0x90, 0x9c, 0xf0, 0x90, 0x9e, 0x00, 0x60, 0x90, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00,
			0x90, 0x00, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00, 0x40, 0x20, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00,
			0x40, 0xa0, 0x00, 0xa0, 0xa0, 0xa0, 0x50, 0x00, 0x40, 0x20, 0x00, 0xa0, 0xa0, 0xa0, 0x50, 0x00,
			0x90, 0x00, 0x90, 0x90, 0xb0, 0x50, 0x10, 0xe0, 0x50, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00,
			0x50, 0x00, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x20, 0x20, 0x78, 0x80, 0x80, 0x78, 0x20, 0x20,
			0x18, 0x24, 0x20, 0xf8, 0x20, 0xe2, 0x5c, 0x00, 0x88, 0x50, 0x20, 0xf8, 0x20, 0xf8, 0x20, 0x00,
			0xc0, 0xa0, 0xa0, 0xc8, 0x9c, 0x88, 0x88, 0x8c, 0x18, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x40,
			0x10, 0x20, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x10, 0x20, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00,
			0x20, 0x40, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00, 0x20, 0x40, 0x00, 0x90, 0x90, 0x90, 0x68, 0x00,
			0x50, 0xa0, 0x00, 0xa0, 0xd0, 0x90, 0x90, 0x00, 0x28, 0x50, 0x00, 0xc8, 0xa8, 0x98, 0x88, 0x00,
			0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0xf8, 0x00, 0x60, 0x90, 0x90, 0x90, 0x60, 0x00, 0xf0,
			0x20, 0x00, 0x20, 0x40, 0x80, 0x88, 0x70, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x80, 0x80, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xf8, 0x08, 0x08, 0x00, 0x00, 0x84, 0x88, 0x90, 0xa8, 0x54, 0x84, 0x08, 0x1c,
			0x84, 0x88, 0x90, 0xa8, 0x58, 0xa8, 0x3c, 0x08, 0x20, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00,
			0x00, 0x00, 0x24, 0x48, 0x90, 0x48, 0x24, 0x00, 0x00, 0x00, 0x90, 0x48, 0x24, 0x48, 0x90, 0x00,
			0x28, 0x50, 0x20, 0x50, 0x88, 0xf8, 0x88, 0x00, 0x28, 0x50, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00,
			0x28, 0x50, 0x00, 0x70, 0x20, 0x20, 0x70, 0x00, 0x28, 0x50, 0x00, 0x20, 0x20, 0x20, 0x70, 0x00,
			0x28, 0x50, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x50, 0xa0, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00,
			0x28, 0x50, 0x00, 0x88, 0x88, 0x88, 0x70, 0x00, 0x50, 0xa0, 0x00, 0xa0, 0xa0, 0xa0, 0x50, 0x00,
			0xfc, 0x48, 0x48, 0x48, 0xe8, 0x08, 0x50, 0x20, 0x00, 0x50, 0x00, 0x50, 0x50, 0x50, 0x10, 0x20,
			0xc0, 0x44, 0xc8, 0x54, 0xec, 0x54, 0x9e, 0x04, 0x10, 0xa8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x20, 0x50, 0x88, 0x50, 0x20, 0x00, 0x00, 0x88, 0x10, 0x20, 0x40, 0x80, 0x28, 0x00, 0x00,
			0x7c, 0xa8, 0xa8, 0x68, 0x28, 0x28, 0x28, 0x00, 0x38, 0x40, 0x30, 0x48, 0x48, 0x30, 0x08, 0x70,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f,
			0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
			0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0,
			0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
			0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x11, 0x22, 0x44, 0x88, 0x11, 0x22, 0x44, 0x88,
			0x88, 0x44, 0x22, 0x11, 0x88, 0x44, 0x22, 0x11, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x80, 0xc0, 0xe0, 0xf0, 0xe0, 0xc0, 0x80, 0x00,
			0x01, 0x03, 0x07, 0x0f, 0x07, 0x03, 0x01, 0x00, 0xff, 0x7e, 0x3c, 0x18, 0x18, 0x3c, 0x7e, 0xff,
			0x81, 0xc3, 0xe7, 0xff, 0xff, 0xe7, 0xc3, 0x81, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc,
			0x00, 0x20, 0x20, 0x50, 0x50, 0x88, 0xf8, 0x00, 0x20, 0x20, 0x70, 0x20, 0x70, 0x20, 0x20, 0x00,
			0x00, 0x00, 0x00, 0x50, 0x88, 0xa8, 0x50, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
			0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x68, 0x90, 0x90, 0x90, 0x68, 0x00, 0x30, 0x48, 0x48, 0x70, 0x48, 0x48, 0x70, 0xc0,
			0xf8, 0x88, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xf8, 0x50, 0x50, 0x50, 0x50, 0x50, 0x98, 0x00,
			0xf8, 0x88, 0x40, 0x20, 0x40, 0x88, 0xf8, 0x00, 0x00, 0x00, 0x78, 0x90, 0x90, 0x90, 0x60, 0x00,
			0x00, 0x50, 0x50, 0x50, 0x50, 0x68, 0x80, 0x80, 0x00, 0x50, 0xa0, 0x20, 0x20, 0x20, 0x20, 0x00,
			0xf8, 0x20, 0x70, 0xa8, 0xa8, 0x70, 0x20, 0xf8, 0x20, 0x50, 0x88, 0xf8, 0x88, 0x50, 0x20, 0x00,
			0x70, 0x88, 0x88, 0x88, 0x50, 0x50, 0xd8, 0x00, 0x30, 0x40, 0x40, 0x20, 0x50, 0x50, 0x50, 0x20,
			0x00, 0x00, 0x00, 0x50, 0xa8, 0xa8, 0x50, 0x00, 0x08, 0x70, 0xa8, 0xa8, 0xa8, 0x70, 0x80, 0x00,
			0x38, 0x40, 0x80, 0xf8, 0x80, 0x40, 0x38, 0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00,
			0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x00, 0xf8, 0x00,
			0xc0, 0x30, 0x08, 0x30, 0xc0, 0x00, 0xf8, 0x00, 0x18, 0x60, 0x80, 0x60, 0x18, 0x00, 0xf8, 0x00,
			0x10, 0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa0, 0x40,
			0x00, 0x20, 0x00, 0xf8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x50, 0xa0, 0x00, 0x50, 0xa0, 0x00, 0x00,
			0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x78, 0x30, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3e, 0x20, 0x20, 0x20, 0xa0, 0x60, 0x20, 0x00,
			0xa0, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x40, 0xa0, 0x20, 0x40, 0xe0, 0x00, 0x00, 0x00,
			0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		};
	}
}