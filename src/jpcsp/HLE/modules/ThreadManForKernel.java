/* This autogenerated file is part of jpcsp. */
package jpcsp.HLE.modules;

import jpcsp.HLE.pspSysMem;
import jpcsp.Memory;
import jpcsp.Processor;

public class ThreadManForKernel implements HLEModule {

    @Override
    public final String getName() {
        return "ThreadManForKernel";
    }

    @Override
    public void installModule(HLEModuleManager mm, int version) {

        mm.add(sceKernelRegisterThreadEventHandler, 0x0C106E53);

        mm.add(sceKernelReleaseThreadEventHandler, 0x72F3C145);

        mm.add(sceKernelReferThreadEventHandlerStatus, 0x369EEB6B);

        mm.add(sceKernelCreateCallback, 0xE81CAF8F);

        mm.add(sceKernelDeleteCallback, 0xEDBA5844);

        mm.add(sceKernelNotifyCallback, 0xC11BA8C4);

        mm.add(sceKernelCancelCallback, 0xBA4051D6);

        mm.add(sceKernelGetCallbackCount, 0x2A3D44FF);

        mm.add(sceKernelCheckCallback, 0x349D6D6C);

        mm.add(sceKernelReferCallbackStatus, 0x730ED8BC);

        mm.add(sceKernelSleepThread, 0x9ACE131E);

        mm.add(sceKernelSleepThreadCB, 0x82826F70);

        mm.add(sceKernelWakeupThread, 0xD59EAD2F);

        mm.add(sceKernelCancelWakeupThread, 0xFCCFAD26);

        mm.add(sceKernelSuspendThread, 0x9944F31F);

        mm.add(sceKernelResumeThread, 0x75156E8F);

        mm.add(sceKernelSuspendAllUserThreads, 0x8FD9F70C);

        mm.add(sceKernelWaitThreadEnd, 0x278C0DF5);

        mm.add(sceKernelWaitThreadEndCB, 0x840E8133);

        mm.add(sceKernelDelayThread, 0xCEADEB47);

        mm.add(sceKernelDelayThreadCB, 0x68DA9E36);

        mm.add(sceKernelDelaySysClockThread, 0xBD123D9E);

        mm.add(sceKernelDelaySysClockThreadCB, 0x1181E963);

        mm.add(sceKernelCreateSema, 0xD6DA4BA1);

        mm.add(sceKernelDeleteSema, 0x28B6489C);

        mm.add(sceKernelSignalSema, 0x3F53E640);

        mm.add(sceKernelWaitSema, 0x4E3A1105);

        mm.add(sceKernelWaitSemaCB, 0x6D212BAC);

        mm.add(sceKernelPollSema, 0x58B1F937);

        mm.add(sceKernelCancelSema, 0x8FFDF9A2);

        mm.add(sceKernelReferSemaStatus, 0xBC6FEBC5);

        mm.add(sceKernelCreateEventFlag, 0x55C20A00);

        mm.add(sceKernelDeleteEventFlag, 0xEF9E4C70);

        mm.add(sceKernelSetEventFlag, 0x1FB15A32);

        mm.add(sceKernelClearEventFlag, 0x812346E4);

        mm.add(sceKernelWaitEventFlag, 0x402FCF22);

        mm.add(sceKernelWaitEventFlagCB, 0x328C546A);

        mm.add(sceKernelPollEventFlag, 0x30FD48F0);

        mm.add(sceKernelCancelEventFlag, 0xCD203292);

        mm.add(sceKernelReferEventFlagStatus, 0xA66B0120);

        mm.add(sceKernelCreateMbx, 0x8125221D);

        mm.add(sceKernelDeleteMbx, 0x86255ADA);

        mm.add(sceKernelSendMbx, 0xE9B3061E);

        mm.add(sceKernelReceiveMbx, 0x18260574);

        mm.add(sceKernelReceiveMbxCB, 0xF3986382);

        mm.add(sceKernelPollMbx, 0x0D81716A);

        mm.add(sceKernelCancelReceiveMbx, 0x87D4DD36);

        mm.add(sceKernelReferMbxStatus, 0xA8E8C846);

        mm.add(sceKernelCreateMsgPipe, 0x7C0DC2A0);

        mm.add(sceKernelDeleteMsgPipe, 0xF0B7DA1C);

        mm.add(sceKernelSendMsgPipe, 0x876DBFAD);

        mm.add(sceKernelSendMsgPipeCB, 0x7C41F2C2);

        mm.add(sceKernelTrySendMsgPipe, 0x884C9F90);

        mm.add(sceKernelReceiveMsgPipe, 0x74829B76);

        mm.add(sceKernelReceiveMsgPipeCB, 0xFBFA697D);

        mm.add(sceKernelTryReceiveMsgPipe, 0xDF52098F);

        mm.add(sceKernelCancelMsgPipe, 0x349B864D);

        mm.add(sceKernelReferMsgPipeStatus, 0x33BE4024);

        mm.add(sceKernelCreateVpl, 0x56C039B5);

        mm.add(sceKernelDeleteVpl, 0x89B3D48C);

        mm.add(sceKernelAllocateVpl, 0xBED27435);

        mm.add(sceKernelAllocateVplCB, 0xEC0A693F);

        mm.add(sceKernelTryAllocateVpl, 0xAF36D708);

        mm.add(sceKernelFreeVpl, 0xB736E9FF);

        mm.add(sceKernelCancelVpl, 0x1D371B8A);

        mm.add(sceKernelReferVplStatus, 0x39810265);

        mm.add(sceKernelCreateFpl, 0xC07BB470);

        mm.add(sceKernelDeleteFpl, 0xED1410E0);

        mm.add(sceKernelAllocateFpl, 0xD979E9BF);

        mm.add(sceKernelAllocateFplCB, 0xE7282CB6);

        mm.add(sceKernelTryAllocateFpl, 0x623AE665);

        mm.add(sceKernelFreeFpl, 0xF6414A71);

        mm.add(sceKernelCancelFpl, 0xA8AA591F);

        mm.add(sceKernelReferFplStatus, 0xD8199E4C);

        mm.add(sceKernelUSec2SysClock, 0x110DEC9A);

        mm.add(sceKernelUSec2SysClockWide, 0xC8CD158C);

        mm.add(sceKernelSysClock2USec, 0xBA6B92E2);

        mm.add(sceKernelSysClock2USecWide, 0xE1619D7C);

        mm.add(sceKernelGetSystemTime, 0xDB738F35);

        mm.add(sceKernelGetSystemTimeWide, 0x82BC5777);

        mm.add(sceKernelGetSystemTimeLow, 0x369ED59D);

        mm.add(sceKernelSetAlarm, 0x6652B8CA);

        mm.add(sceKernelSetSysClockAlarm, 0xB2C25152);

        mm.add(sceKernelCancelAlarm, 0x7E65B999);

        mm.add(sceKernelReferAlarmStatus, 0xDAA3F564);

        mm.add(sceKernelCreateVTimer, 0x20FFF560);

        mm.add(sceKernelDeleteVTimer, 0x328F9E52);

        mm.add(sceKernelGetVTimerBase, 0xB3A59970);

        mm.add(sceKernelGetVTimerBaseWide, 0xB7C18B77);

        mm.add(sceKernelGetVTimerTime, 0x034A921F);

        mm.add(sceKernelGetVTimerTimeWide, 0xC0B3FFD2);

        mm.add(sceKernelSetVTimerTime, 0x542AD630);

        mm.add(sceKernelSetVTimerTimeWide, 0xFB6425C3);

        mm.add(sceKernelStartVTimer, 0xC68D9437);

        mm.add(sceKernelStopVTimer, 0xD0AEEE87);

        mm.add(sceKernelSetVTimerHandler, 0xD8B299AE);

        mm.add(sceKernelSetVTimerHandlerWide, 0x53B00E9A);

        mm.add(sceKernelCancelVTimerHandler, 0xD2D615EF);

        mm.add(sceKernelReferVTimerStatus, 0x5F32BEAA);

        mm.add(sceKernelAllocateKTLS, 0x04E72261);

        mm.add(sceKernelFreeKTLS, 0xD198B811);

        mm.add(sceKernelGetThreadKTLS, 0x3AD875C3);

        mm.add(sceKernelGetKTLS, 0xA249EAAE);

        mm.add(ThreadManForKernel_B50F4E46, 0xB50F4E46);

        mm.add(sceKernelCreateThread, 0x446D8DE6);

        mm.add(sceKernelDeleteThread, 0x9FA03CD3);

        mm.add(sceKernelStartThread, 0xF475845D);

        mm.add(sceKernelExitThread, 0xAA73C935);

        mm.add(sceKernelExitDeleteThread, 0x809CE29B);

        mm.add(sceKernelTerminateThread, 0x616403BA);

        mm.add(sceKernelTerminateDeleteThread, 0x383F7BCC);

        mm.add(sceKernelSuspendDispatchThread, 0x3AD58B8C);

        mm.add(sceKernelResumeDispatchThread, 0x27E22EC2);

        mm.add(sceKernelChangeCurrentThreadAttr, 0xEA748E31);

        mm.add(sceKernelChangeThreadPriority, 0x71BC9871);

        mm.add(sceKernelRotateThreadReadyQueue, 0x912354A7);

        mm.add(sceKernelReleaseWaitThread, 0x2C34E053);

        mm.add(sceKernelGetThreadId, 0x293B45B8);

        mm.add(sceKernelGetThreadCurrentPriority, 0x94AA61EE);

        mm.add(sceKernelGetThreadExitStatus, 0x3B183E26);

        mm.add(sceKernelGetUserLevel, 0xF6427665);

        mm.add(sceKernelIsUserModeThread, 0x85A2A5BF);

        mm.add(sceKernelGetSyscallRA, 0xDD55A192);

        mm.add(sceKernelExtendKernelStack, 0xBC31C1B9);

        mm.add(sceKernelCheckThreadKernelStack, 0x4FE44D5E);

        mm.add(sceKernelCheckThreadStack, 0xD13BDE95);

        mm.add(sceKernelGetThreadStackFreeSize, 0x52089CA1);

        mm.add(sceKernelGetThreadKernelStackFreeSize, 0xD890B370);

        mm.add(sceKernelReferThreadStatus, 0x17C1684E);

        mm.add(sceKernelReferThreadRunStatus, 0xFFC36A14);

        mm.add(ThreadManForKernel_2D69D086, 0x2D69D086);

        mm.add(sceKernelGetSystemStatusFlag, 0xFCB5EB49);

        mm.add(sceKernelReferSystemStatus, 0x627E6F3A);

        mm.add(sceKernelGetThreadmanIdList, 0x94416130);

        mm.add(sceKernelGetThreadmanIdType, 0x57CF62DD);

    }

    @Override
    public void uninstallModule(HLEModuleManager mm, int version) {

        mm.remove(sceKernelRegisterThreadEventHandler);

        mm.remove(sceKernelReleaseThreadEventHandler);

        mm.remove(sceKernelReferThreadEventHandlerStatus);

        mm.remove(sceKernelCreateCallback);

        mm.remove(sceKernelDeleteCallback);

        mm.remove(sceKernelNotifyCallback);

        mm.remove(sceKernelCancelCallback);

        mm.remove(sceKernelGetCallbackCount);

        mm.remove(sceKernelCheckCallback);

        mm.remove(sceKernelReferCallbackStatus);

        mm.remove(sceKernelSleepThread);

        mm.remove(sceKernelSleepThreadCB);

        mm.remove(sceKernelWakeupThread);

        mm.remove(sceKernelCancelWakeupThread);

        mm.remove(sceKernelSuspendThread);

        mm.remove(sceKernelResumeThread);

        mm.remove(sceKernelSuspendAllUserThreads);

        mm.remove(sceKernelWaitThreadEnd);

        mm.remove(sceKernelWaitThreadEndCB);

        mm.remove(sceKernelDelayThread);

        mm.remove(sceKernelDelayThreadCB);

        mm.remove(sceKernelDelaySysClockThread);

        mm.remove(sceKernelDelaySysClockThreadCB);

        mm.remove(sceKernelCreateSema);

        mm.remove(sceKernelDeleteSema);

        mm.remove(sceKernelSignalSema);

        mm.remove(sceKernelWaitSema);

        mm.remove(sceKernelWaitSemaCB);

        mm.remove(sceKernelPollSema);

        mm.remove(sceKernelCancelSema);

        mm.remove(sceKernelReferSemaStatus);

        mm.remove(sceKernelCreateEventFlag);

        mm.remove(sceKernelDeleteEventFlag);

        mm.remove(sceKernelSetEventFlag);

        mm.remove(sceKernelClearEventFlag);

        mm.remove(sceKernelWaitEventFlag);

        mm.remove(sceKernelWaitEventFlagCB);

        mm.remove(sceKernelPollEventFlag);

        mm.remove(sceKernelCancelEventFlag);

        mm.remove(sceKernelReferEventFlagStatus);

        mm.remove(sceKernelCreateMbx);

        mm.remove(sceKernelDeleteMbx);

        mm.remove(sceKernelSendMbx);

        mm.remove(sceKernelReceiveMbx);

        mm.remove(sceKernelReceiveMbxCB);

        mm.remove(sceKernelPollMbx);

        mm.remove(sceKernelCancelReceiveMbx);

        mm.remove(sceKernelReferMbxStatus);

        mm.remove(sceKernelCreateMsgPipe);

        mm.remove(sceKernelDeleteMsgPipe);

        mm.remove(sceKernelSendMsgPipe);

        mm.remove(sceKernelSendMsgPipeCB);

        mm.remove(sceKernelTrySendMsgPipe);

        mm.remove(sceKernelReceiveMsgPipe);

        mm.remove(sceKernelReceiveMsgPipeCB);

        mm.remove(sceKernelTryReceiveMsgPipe);

        mm.remove(sceKernelCancelMsgPipe);

        mm.remove(sceKernelReferMsgPipeStatus);

        mm.remove(sceKernelCreateVpl);

        mm.remove(sceKernelDeleteVpl);

        mm.remove(sceKernelAllocateVpl);

        mm.remove(sceKernelAllocateVplCB);

        mm.remove(sceKernelTryAllocateVpl);

        mm.remove(sceKernelFreeVpl);

        mm.remove(sceKernelCancelVpl);

        mm.remove(sceKernelReferVplStatus);

        mm.remove(sceKernelCreateFpl);

        mm.remove(sceKernelDeleteFpl);

        mm.remove(sceKernelAllocateFpl);

        mm.remove(sceKernelAllocateFplCB);

        mm.remove(sceKernelTryAllocateFpl);

        mm.remove(sceKernelFreeFpl);

        mm.remove(sceKernelCancelFpl);

        mm.remove(sceKernelReferFplStatus);

        mm.remove(sceKernelUSec2SysClock);

        mm.remove(sceKernelUSec2SysClockWide);

        mm.remove(sceKernelSysClock2USec);

        mm.remove(sceKernelSysClock2USecWide);

        mm.remove(sceKernelGetSystemTime);

        mm.remove(sceKernelGetSystemTimeWide);

        mm.remove(sceKernelGetSystemTimeLow);

        mm.remove(sceKernelSetAlarm);

        mm.remove(sceKernelSetSysClockAlarm);

        mm.remove(sceKernelCancelAlarm);

        mm.remove(sceKernelReferAlarmStatus);

        mm.remove(sceKernelCreateVTimer);

        mm.remove(sceKernelDeleteVTimer);

        mm.remove(sceKernelGetVTimerBase);

        mm.remove(sceKernelGetVTimerBaseWide);

        mm.remove(sceKernelGetVTimerTime);

        mm.remove(sceKernelGetVTimerTimeWide);

        mm.remove(sceKernelSetVTimerTime);

        mm.remove(sceKernelSetVTimerTimeWide);

        mm.remove(sceKernelStartVTimer);

        mm.remove(sceKernelStopVTimer);

        mm.remove(sceKernelSetVTimerHandler);

        mm.remove(sceKernelSetVTimerHandlerWide);

        mm.remove(sceKernelCancelVTimerHandler);

        mm.remove(sceKernelReferVTimerStatus);

        mm.remove(sceKernelAllocateKTLS);

        mm.remove(sceKernelFreeKTLS);

        mm.remove(sceKernelGetThreadKTLS);

        mm.remove(sceKernelGetKTLS);

        mm.remove(ThreadManForKernel_B50F4E46);

        mm.remove(sceKernelCreateThread);

        mm.remove(sceKernelDeleteThread);

        mm.remove(sceKernelStartThread);

        mm.remove(sceKernelExitThread);

        mm.remove(sceKernelExitDeleteThread);

        mm.remove(sceKernelTerminateThread);

        mm.remove(sceKernelTerminateDeleteThread);

        mm.remove(sceKernelSuspendDispatchThread);

        mm.remove(sceKernelResumeDispatchThread);

        mm.remove(sceKernelChangeCurrentThreadAttr);

        mm.remove(sceKernelChangeThreadPriority);

        mm.remove(sceKernelRotateThreadReadyQueue);

        mm.remove(sceKernelReleaseWaitThread);

        mm.remove(sceKernelGetThreadId);

        mm.remove(sceKernelGetThreadCurrentPriority);

        mm.remove(sceKernelGetThreadExitStatus);

        mm.remove(sceKernelGetUserLevel);

        mm.remove(sceKernelIsUserModeThread);

        mm.remove(sceKernelGetSyscallRA);

        mm.remove(sceKernelExtendKernelStack);

        mm.remove(sceKernelCheckThreadKernelStack);

        mm.remove(sceKernelCheckThreadStack);

        mm.remove(sceKernelGetThreadStackFreeSize);

        mm.remove(sceKernelGetThreadKernelStackFreeSize);

        mm.remove(sceKernelReferThreadStatus);

        mm.remove(sceKernelReferThreadRunStatus);

        mm.remove(ThreadManForKernel_2D69D086);

        mm.remove(sceKernelGetSystemStatusFlag);

        mm.remove(sceKernelReferSystemStatus);

        mm.remove(sceKernelGetThreadmanIdList);

        mm.remove(sceKernelGetThreadmanIdType);

    }
    public static final HLEModuleFunction sceKernelRegisterThreadEventHandler = new HLEModuleFunction("ThreadManForKernel", "sceKernelRegisterThreadEventHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelRegisterThreadEventHandler [0x0C106E53]");
        }
    };
    public static final HLEModuleFunction sceKernelReleaseThreadEventHandler = new HLEModuleFunction("ThreadManForKernel", "sceKernelReleaseThreadEventHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReleaseThreadEventHandler [0x72F3C145]");
        }
    };
    public static final HLEModuleFunction sceKernelReferThreadEventHandlerStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferThreadEventHandlerStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferThreadEventHandlerStatus [0x369EEB6B]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateCallback = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateCallback [0xE81CAF8F]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteCallback = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteCallback [0xEDBA5844]");
        }
    };
    public static final HLEModuleFunction sceKernelNotifyCallback = new HLEModuleFunction("ThreadManForKernel", "sceKernelNotifyCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelNotifyCallback [0xC11BA8C4]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelCallback = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelCallback [0xBA4051D6]");
        }
    };
    public static final HLEModuleFunction sceKernelGetCallbackCount = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetCallbackCount") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetCallbackCount [0x2A3D44FF]");
        }
    };
    public static final HLEModuleFunction sceKernelCheckCallback = new HLEModuleFunction("ThreadManForKernel", "sceKernelCheckCallback") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCheckCallback [0x349D6D6C]");
        }
    };
    public static final HLEModuleFunction sceKernelReferCallbackStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferCallbackStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferCallbackStatus [0x730ED8BC]");
        }
    };
    public static final HLEModuleFunction sceKernelSleepThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelSleepThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSleepThread [0x9ACE131E]");
        }
    };
    public static final HLEModuleFunction sceKernelSleepThreadCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelSleepThreadCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSleepThreadCB [0x82826F70]");
        }
    };
    public static final HLEModuleFunction sceKernelWakeupThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelWakeupThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelWakeupThread [0xD59EAD2F]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelWakeupThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelWakeupThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelWakeupThread [0xFCCFAD26]");
        }
    };
    public static final HLEModuleFunction sceKernelSuspendThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelSuspendThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSuspendThread [0x9944F31F]");
        }
    };
    public static final HLEModuleFunction sceKernelResumeThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelResumeThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelResumeThread [0x75156E8F]");
        }
    };
    public static final HLEModuleFunction sceKernelSuspendAllUserThreads = new HLEModuleFunction("ThreadManForKernel", "sceKernelSuspendAllUserThreads") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSuspendAllUserThreads [0x8FD9F70C]");
        }
    };
    public static final HLEModuleFunction sceKernelWaitThreadEnd = new HLEModuleFunction("ThreadManForKernel", "sceKernelWaitThreadEnd") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelWaitThreadEnd [0x278C0DF5]");
        }
    };
    public static final HLEModuleFunction sceKernelWaitThreadEndCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelWaitThreadEndCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelWaitThreadEndCB [0x840E8133]");
        }
    };
    public static final HLEModuleFunction sceKernelDelayThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelDelayThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDelayThread [0xCEADEB47]");
        }
    };
    public static final HLEModuleFunction sceKernelDelayThreadCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelDelayThreadCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDelayThreadCB [0x68DA9E36]");
        }
    };
    public static final HLEModuleFunction sceKernelDelaySysClockThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelDelaySysClockThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDelaySysClockThread [0xBD123D9E]");
        }
    };
    public static final HLEModuleFunction sceKernelDelaySysClockThreadCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelDelaySysClockThreadCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDelaySysClockThreadCB [0x1181E963]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateSema = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateSema") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateSema [0xD6DA4BA1]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteSema = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteSema") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteSema [0x28B6489C]");
        }
    };
    public static final HLEModuleFunction sceKernelSignalSema = new HLEModuleFunction("ThreadManForKernel", "sceKernelSignalSema") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSignalSema [0x3F53E640]");
        }
    };
    public static final HLEModuleFunction sceKernelWaitSema = new HLEModuleFunction("ThreadManForKernel", "sceKernelWaitSema") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelWaitSema [0x4E3A1105]");
        }
    };
    public static final HLEModuleFunction sceKernelWaitSemaCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelWaitSemaCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelWaitSemaCB [0x6D212BAC]");
        }
    };
    public static final HLEModuleFunction sceKernelPollSema = new HLEModuleFunction("ThreadManForKernel", "sceKernelPollSema") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelPollSema [0x58B1F937]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelSema = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelSema") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelSema [0x8FFDF9A2]");
        }
    };
    public static final HLEModuleFunction sceKernelReferSemaStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferSemaStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferSemaStatus [0xBC6FEBC5]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateEventFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateEventFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateEventFlag [0x55C20A00]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteEventFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteEventFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteEventFlag [0xEF9E4C70]");
        }
    };
    public static final HLEModuleFunction sceKernelSetEventFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelSetEventFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetEventFlag [0x1FB15A32]");
        }
    };
    public static final HLEModuleFunction sceKernelClearEventFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelClearEventFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelClearEventFlag [0x812346E4]");
        }
    };
    public static final HLEModuleFunction sceKernelWaitEventFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelWaitEventFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelWaitEventFlag [0x402FCF22]");
        }
    };
    public static final HLEModuleFunction sceKernelWaitEventFlagCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelWaitEventFlagCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelWaitEventFlagCB [0x328C546A]");
        }
    };
    public static final HLEModuleFunction sceKernelPollEventFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelPollEventFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelPollEventFlag [0x30FD48F0]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelEventFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelEventFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelEventFlag [0xCD203292]");
        }
    };
    public static final HLEModuleFunction sceKernelReferEventFlagStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferEventFlagStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferEventFlagStatus [0xA66B0120]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateMbx = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateMbx") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateMbx [0x8125221D]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteMbx = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteMbx") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteMbx [0x86255ADA]");
        }
    };
    public static final HLEModuleFunction sceKernelSendMbx = new HLEModuleFunction("ThreadManForKernel", "sceKernelSendMbx") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSendMbx [0xE9B3061E]");
        }
    };
    public static final HLEModuleFunction sceKernelReceiveMbx = new HLEModuleFunction("ThreadManForKernel", "sceKernelReceiveMbx") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReceiveMbx [0x18260574]");
        }
    };
    public static final HLEModuleFunction sceKernelReceiveMbxCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelReceiveMbxCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReceiveMbxCB [0xF3986382]");
        }
    };
    public static final HLEModuleFunction sceKernelPollMbx = new HLEModuleFunction("ThreadManForKernel", "sceKernelPollMbx") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelPollMbx [0x0D81716A]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelReceiveMbx = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelReceiveMbx") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelReceiveMbx [0x87D4DD36]");
        }
    };
    public static final HLEModuleFunction sceKernelReferMbxStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferMbxStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferMbxStatus [0xA8E8C846]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateMsgPipe = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateMsgPipe") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateMsgPipe [0x7C0DC2A0]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteMsgPipe = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteMsgPipe") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteMsgPipe [0xF0B7DA1C]");
        }
    };
    public static final HLEModuleFunction sceKernelSendMsgPipe = new HLEModuleFunction("ThreadManForKernel", "sceKernelSendMsgPipe") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSendMsgPipe [0x876DBFAD]");
        }
    };
    public static final HLEModuleFunction sceKernelSendMsgPipeCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelSendMsgPipeCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSendMsgPipeCB [0x7C41F2C2]");
        }
    };
    public static final HLEModuleFunction sceKernelTrySendMsgPipe = new HLEModuleFunction("ThreadManForKernel", "sceKernelTrySendMsgPipe") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelTrySendMsgPipe [0x884C9F90]");
        }
    };
    public static final HLEModuleFunction sceKernelReceiveMsgPipe = new HLEModuleFunction("ThreadManForKernel", "sceKernelReceiveMsgPipe") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReceiveMsgPipe [0x74829B76]");
        }
    };
    public static final HLEModuleFunction sceKernelReceiveMsgPipeCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelReceiveMsgPipeCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReceiveMsgPipeCB [0xFBFA697D]");
        }
    };
    public static final HLEModuleFunction sceKernelTryReceiveMsgPipe = new HLEModuleFunction("ThreadManForKernel", "sceKernelTryReceiveMsgPipe") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelTryReceiveMsgPipe [0xDF52098F]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelMsgPipe = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelMsgPipe") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelMsgPipe [0x349B864D]");
        }
    };
    public static final HLEModuleFunction sceKernelReferMsgPipeStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferMsgPipeStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferMsgPipeStatus [0x33BE4024]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateVpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateVpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateVpl [0x56C039B5]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteVpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteVpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteVpl [0x89B3D48C]");
        }
    };
    public static final HLEModuleFunction sceKernelAllocateVpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelAllocateVpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelAllocateVpl [0xBED27435]");
        }
    };
    public static final HLEModuleFunction sceKernelAllocateVplCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelAllocateVplCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelAllocateVplCB [0xEC0A693F]");
        }
    };
    public static final HLEModuleFunction sceKernelTryAllocateVpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelTryAllocateVpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelTryAllocateVpl [0xAF36D708]");
        }
    };
    public static final HLEModuleFunction sceKernelFreeVpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelFreeVpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelFreeVpl [0xB736E9FF]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelVpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelVpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelVpl [0x1D371B8A]");
        }
    };
    public static final HLEModuleFunction sceKernelReferVplStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferVplStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferVplStatus [0x39810265]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateFpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateFpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateFpl [0xC07BB470]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteFpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteFpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteFpl [0xED1410E0]");
        }
    };
    public static final HLEModuleFunction sceKernelAllocateFpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelAllocateFpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelAllocateFpl [0xD979E9BF]");
        }
    };
    public static final HLEModuleFunction sceKernelAllocateFplCB = new HLEModuleFunction("ThreadManForKernel", "sceKernelAllocateFplCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelAllocateFplCB [0xE7282CB6]");
        }
    };
    public static final HLEModuleFunction sceKernelTryAllocateFpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelTryAllocateFpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelTryAllocateFpl [0x623AE665]");
        }
    };
    public static final HLEModuleFunction sceKernelFreeFpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelFreeFpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelFreeFpl [0xF6414A71]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelFpl = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelFpl") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelFpl [0xA8AA591F]");
        }
    };
    public static final HLEModuleFunction sceKernelReferFplStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferFplStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferFplStatus [0xD8199E4C]");
        }
    };
    public static final HLEModuleFunction sceKernelUSec2SysClock = new HLEModuleFunction("ThreadManForKernel", "sceKernelUSec2SysClock") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelUSec2SysClock [0x110DEC9A]");
        }
    };
    public static final HLEModuleFunction sceKernelUSec2SysClockWide = new HLEModuleFunction("ThreadManForKernel", "sceKernelUSec2SysClockWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelUSec2SysClockWide [0xC8CD158C]");
        }
    };
    public static final HLEModuleFunction sceKernelSysClock2USec = new HLEModuleFunction("ThreadManForKernel", "sceKernelSysClock2USec") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSysClock2USec [0xBA6B92E2]");
        }
    };
    public static final HLEModuleFunction sceKernelSysClock2USecWide = new HLEModuleFunction("ThreadManForKernel", "sceKernelSysClock2USecWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSysClock2USecWide [0xE1619D7C]");
        }
    };
    public static final HLEModuleFunction sceKernelGetSystemTime = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetSystemTime") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetSystemTime [0xDB738F35]");
        }
    };
    public static final HLEModuleFunction sceKernelGetSystemTimeWide = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetSystemTimeWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetSystemTimeWide [0x82BC5777]");
        }
    };
    public static final HLEModuleFunction sceKernelGetSystemTimeLow = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetSystemTimeLow") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetSystemTimeLow [0x369ED59D]");
        }
    };
    public static final HLEModuleFunction sceKernelSetAlarm = new HLEModuleFunction("ThreadManForKernel", "sceKernelSetAlarm") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetAlarm [0x6652B8CA]");
        }
    };
    public static final HLEModuleFunction sceKernelSetSysClockAlarm = new HLEModuleFunction("ThreadManForKernel", "sceKernelSetSysClockAlarm") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetSysClockAlarm [0xB2C25152]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelAlarm = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelAlarm") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelAlarm [0x7E65B999]");
        }
    };
    public static final HLEModuleFunction sceKernelReferAlarmStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferAlarmStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferAlarmStatus [0xDAA3F564]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateVTimer = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateVTimer") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateVTimer [0x20FFF560]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteVTimer = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteVTimer") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteVTimer [0x328F9E52]");
        }
    };
    public static final HLEModuleFunction sceKernelGetVTimerBase = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetVTimerBase") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetVTimerBase [0xB3A59970]");
        }
    };
    public static final HLEModuleFunction sceKernelGetVTimerBaseWide = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetVTimerBaseWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetVTimerBaseWide [0xB7C18B77]");
        }
    };
    public static final HLEModuleFunction sceKernelGetVTimerTime = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetVTimerTime") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetVTimerTime [0x034A921F]");
        }
    };
    public static final HLEModuleFunction sceKernelGetVTimerTimeWide = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetVTimerTimeWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetVTimerTimeWide [0xC0B3FFD2]");
        }
    };
    public static final HLEModuleFunction sceKernelSetVTimerTime = new HLEModuleFunction("ThreadManForKernel", "sceKernelSetVTimerTime") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetVTimerTime [0x542AD630]");
        }
    };
    public static final HLEModuleFunction sceKernelSetVTimerTimeWide = new HLEModuleFunction("ThreadManForKernel", "sceKernelSetVTimerTimeWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetVTimerTimeWide [0xFB6425C3]");
        }
    };
    public static final HLEModuleFunction sceKernelStartVTimer = new HLEModuleFunction("ThreadManForKernel", "sceKernelStartVTimer") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStartVTimer [0xC68D9437]");
        }
    };
    public static final HLEModuleFunction sceKernelStopVTimer = new HLEModuleFunction("ThreadManForKernel", "sceKernelStopVTimer") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStopVTimer [0xD0AEEE87]");
        }
    };
    public static final HLEModuleFunction sceKernelSetVTimerHandler = new HLEModuleFunction("ThreadManForKernel", "sceKernelSetVTimerHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetVTimerHandler [0xD8B299AE]");
        }
    };
    public static final HLEModuleFunction sceKernelSetVTimerHandlerWide = new HLEModuleFunction("ThreadManForKernel", "sceKernelSetVTimerHandlerWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetVTimerHandlerWide [0x53B00E9A]");
        }
    };
    public static final HLEModuleFunction sceKernelCancelVTimerHandler = new HLEModuleFunction("ThreadManForKernel", "sceKernelCancelVTimerHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCancelVTimerHandler [0xD2D615EF]");
        }
    };
    public static final HLEModuleFunction sceKernelReferVTimerStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferVTimerStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferVTimerStatus [0x5F32BEAA]");
        }
    };
    public static final HLEModuleFunction sceKernelAllocateKTLS = new HLEModuleFunction("ThreadManForKernel", "sceKernelAllocateKTLS") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelAllocateKTLS [0x04E72261]");
        }
    };
    public static final HLEModuleFunction sceKernelFreeKTLS = new HLEModuleFunction("ThreadManForKernel", "sceKernelFreeKTLS") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelFreeKTLS [0xD198B811]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadKTLS = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadKTLS") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadKTLS [0x3AD875C3]");
        }
    };
    public static final HLEModuleFunction sceKernelGetKTLS = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetKTLS") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetKTLS [0xA249EAAE]");
        }
    };
    public static final HLEModuleFunction ThreadManForKernel_B50F4E46 = new HLEModuleFunction("ThreadManForKernel", "ThreadManForKernel_B50F4E46") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function ThreadManForKernel_B50F4E46 [0xB50F4E46]");
        }
    };
    public static final HLEModuleFunction sceKernelCreateThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelCreateThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCreateThread [0x446D8DE6]");
        }
    };
    public static final HLEModuleFunction sceKernelDeleteThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelDeleteThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDeleteThread [0x9FA03CD3]");
        }
    };
    public static final HLEModuleFunction sceKernelStartThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelStartThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStartThread [0xF475845D]");
        }
    };
    public static final HLEModuleFunction sceKernelExitThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelExitThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelExitThread [0xAA73C935]");
        }
    };
    public static final HLEModuleFunction sceKernelExitDeleteThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelExitDeleteThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelExitDeleteThread [0x809CE29B]");
        }
    };
    public static final HLEModuleFunction sceKernelTerminateThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelTerminateThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelTerminateThread [0x616403BA]");
        }
    };
    public static final HLEModuleFunction sceKernelTerminateDeleteThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelTerminateDeleteThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelTerminateDeleteThread [0x383F7BCC]");
        }
    };
    public static final HLEModuleFunction sceKernelSuspendDispatchThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelSuspendDispatchThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSuspendDispatchThread [0x3AD58B8C]");
        }
    };
    public static final HLEModuleFunction sceKernelResumeDispatchThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelResumeDispatchThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelResumeDispatchThread [0x27E22EC2]");
        }
    };
    public static final HLEModuleFunction sceKernelChangeCurrentThreadAttr = new HLEModuleFunction("ThreadManForKernel", "sceKernelChangeCurrentThreadAttr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelChangeCurrentThreadAttr [0xEA748E31]");
        }
    };
    public static final HLEModuleFunction sceKernelChangeThreadPriority = new HLEModuleFunction("ThreadManForKernel", "sceKernelChangeThreadPriority") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelChangeThreadPriority [0x71BC9871]");
        }
    };
    public static final HLEModuleFunction sceKernelRotateThreadReadyQueue = new HLEModuleFunction("ThreadManForKernel", "sceKernelRotateThreadReadyQueue") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelRotateThreadReadyQueue [0x912354A7]");
        }
    };
    public static final HLEModuleFunction sceKernelReleaseWaitThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelReleaseWaitThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReleaseWaitThread [0x2C34E053]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadId = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadId") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadId [0x293B45B8]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadCurrentPriority = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadCurrentPriority") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadCurrentPriority [0x94AA61EE]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadExitStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadExitStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadExitStatus [0x3B183E26]");
        }
    };
    public static final HLEModuleFunction sceKernelGetUserLevel = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetUserLevel") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetUserLevel [0xF6427665]");
        }
    };
    public static final HLEModuleFunction sceKernelIsUserModeThread = new HLEModuleFunction("ThreadManForKernel", "sceKernelIsUserModeThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelIsUserModeThread [0x85A2A5BF]");
        }
    };
    public static final HLEModuleFunction sceKernelGetSyscallRA = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetSyscallRA") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetSyscallRA [0xDD55A192]");
        }
    };
    public static final HLEModuleFunction sceKernelExtendKernelStack = new HLEModuleFunction("ThreadManForKernel", "sceKernelExtendKernelStack") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelExtendKernelStack [0xBC31C1B9]");
        }
    };
    public static final HLEModuleFunction sceKernelCheckThreadKernelStack = new HLEModuleFunction("ThreadManForKernel", "sceKernelCheckThreadKernelStack") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCheckThreadKernelStack [0x4FE44D5E]");
        }
    };
    public static final HLEModuleFunction sceKernelCheckThreadStack = new HLEModuleFunction("ThreadManForKernel", "sceKernelCheckThreadStack") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCheckThreadStack [0xD13BDE95]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadStackFreeSize = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadStackFreeSize") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadStackFreeSize [0x52089CA1]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadKernelStackFreeSize = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadKernelStackFreeSize") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadKernelStackFreeSize [0xD890B370]");
        }
    };
    public static final HLEModuleFunction sceKernelReferThreadStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferThreadStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferThreadStatus [0x17C1684E]");
        }
    };
    public static final HLEModuleFunction sceKernelReferThreadRunStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferThreadRunStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferThreadRunStatus [0xFFC36A14]");
        }
    };
    public static final HLEModuleFunction ThreadManForKernel_2D69D086 = new HLEModuleFunction("ThreadManForKernel", "ThreadManForKernel_2D69D086") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function ThreadManForKernel_2D69D086 [0x2D69D086]");
        }
    };
    public static final HLEModuleFunction sceKernelGetSystemStatusFlag = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetSystemStatusFlag") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetSystemStatusFlag [0xFCB5EB49]");
        }
    };
    public static final HLEModuleFunction sceKernelReferSystemStatus = new HLEModuleFunction("ThreadManForKernel", "sceKernelReferSystemStatus") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReferSystemStatus [0x627E6F3A]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadmanIdList = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadmanIdList") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadmanIdList [0x94416130]");
        }
    };
    public static final HLEModuleFunction sceKernelGetThreadmanIdType = new HLEModuleFunction("ThreadManForKernel", "sceKernelGetThreadmanIdType") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetThreadmanIdType [0x57CF62DD]");
        }
    };
};
