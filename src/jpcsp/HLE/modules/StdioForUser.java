/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */
package jpcsp.HLE.modules;

import jpcsp.HLE.pspSysMem;
import jpcsp.Memory;
import jpcsp.Processor;

public class StdioForUser implements HLEModule {

    @Override
    public final String getName() {
        return "StdioForUser";
    }

    @Override
    public void installModule(HLEModuleManager mm, int version) {

        mm.add(sceKernelStdioRead, 0x3054D478);

        mm.add(sceKernelStdioLseek, 0x0CBB0571);

        mm.add(sceKernelStdioSendChar, 0xA46785C9);

        mm.add(sceKernelStdioWrite, 0xA3B931DB);

        mm.add(sceKernelStdioClose, 0x9D061C19);

        mm.add(sceKernelStdioOpen, 0x924ABA61);
/*
        // Here we can change the functionality and/or the NID based on the
        // firmware version.
        if (version >= pspSysMem.PSP_FIRMWARE_271) {
            mm.add(sceKernelStdin271, 0x172D316E);
        } else {
            mm.add(sceKernelStdin150, 0x172D316E);
        }
 */      
        mm.add(sceKernelStdin, 0x172D316E);

        mm.add(sceKernelStdout, 0xA6BAB2E9);

        mm.add(sceKernelStderr, 0xF78BA90A);

    }

    @Override
    public void uninstallModule(HLEModuleManager mm, int version) {

        mm.remove(sceKernelStdioRead);

        mm.remove(sceKernelStdioLseek);

        mm.remove(sceKernelStdioSendChar);

        mm.remove(sceKernelStdioWrite);

        mm.remove(sceKernelStdioClose);

        mm.remove(sceKernelStdioOpen);

/*
        if (version >= pspSysMem.PSP_FIRMWARE_271) {
            mm.remove(sceKernelStdin271);
        } else {
            mm.remove(sceKernelStdin150);
        }
*/        
        mm.remove(sceKernelStdin);

        mm.remove(sceKernelStdout);

        mm.remove(sceKernelStderr);

    }
    public static final HLEModuleFunction sceKernelStdioRead = new HLEModuleFunction("StdioForUser", "sceKernelStdioRead") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStdioRead [0x3054D478]");
        }
    };
    public static final HLEModuleFunction sceKernelStdioLseek = new HLEModuleFunction("StdioForUser", "sceKernelStdioLseek") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStdioLseek [0x0CBB0571]");
        }
    };
    public static final HLEModuleFunction sceKernelStdioSendChar = new HLEModuleFunction("StdioForUser", "sceKernelStdioSendChar") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStdioSendChar [0xA46785C9]");
        }
    };
    public static final HLEModuleFunction sceKernelStdioWrite = new HLEModuleFunction("StdioForUser", "sceKernelStdioWrite") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStdioWrite [0xA3B931DB]");
        }
    };
    public static final HLEModuleFunction sceKernelStdioClose = new HLEModuleFunction("StdioForUser", "sceKernelStdioClose") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStdioClose [0x9D061C19]");
        }
    };
    public static final HLEModuleFunction sceKernelStdioOpen = new HLEModuleFunction("StdioForUser", "sceKernelStdioOpen") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelStdioOpen [0x924ABA61]");
        }
    };
    
/*            
    public static final HLEModuleFunction sceKernelStdin150 = new HLEModuleFunction("StdioForUser", "sceKernelStdin") {
        @Override
        public void execute(Processor cpu, Memory mem) {
            cpu.gpr[2] = 3;
        }
    };

 // The code is exactly the same as 150, but it's an example of how different
    // firmware can be handled.
    // Here we can change the functionality and the NID.
    public static final HLEModuleFunction sceKernelStdin271 = new HLEModuleFunction("StdioForUser", "sceKernelStdin") {
        @Override
        public void execute(Processor cpu, Memory mem) {
            cpu.gpr[2] = 3;
        }
    };
*/    
    public static final HLEModuleFunction sceKernelStdin = new HLEModuleFunction("StdioForUser", "sceKernelStdin") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            cpu.gpr[2] = 3;
        }
    };
    public static final HLEModuleFunction sceKernelStdout = new HLEModuleFunction("StdioForUser", "sceKernelStdout") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            cpu.gpr[2] = 1;
        }
    };
    public static final HLEModuleFunction sceKernelStderr = new HLEModuleFunction("StdioForUser", "sceKernelStderr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            cpu.gpr[2] = 2;
        }
    };
};
