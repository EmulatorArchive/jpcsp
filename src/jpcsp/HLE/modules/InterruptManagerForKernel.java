/* This autogenerated file is part of jpcsp. */
package jpcsp.HLE.modules;

import jpcsp.HLE.pspSysMem;
import jpcsp.Memory;
import jpcsp.Processor;

public class InterruptManagerForKernel implements HLEModule {

    @Override
    public final String getName() {
        return "InterruptManagerForKernel";
    }

    @Override
    public void installModule(HLEModuleManager mm, int version) {

        mm.add(sceKernelCpuSuspendIntr, 0x092968F4);

        mm.add(sceKernelCpuResumeIntr, 0x5F10D406);

        mm.add(sceKernelCpuResumeIntrWithSync, 0x3B84732D);

        mm.add(sceKernelIsIntrContext, 0xFE28C6D9);

        mm.add(InterruptManagerForKernel_53991063, 0x53991063);

        mm.add(sceKernelGetInterruptExitCount, 0x468BC716);

        mm.add(ReturnToThread, 0x43CD40EF);

        mm.add(SaveThreadContext, 0x85F7766D);

        mm.add(sceKernelCpuEnableIntr, 0x02314986);

        mm.add(QueryInterruptManCB, 0x00B6B0F3);

        mm.add(sceKernelRegisterIntrHandler, 0x58DD8978);

        mm.add(InterruptManagerForKernel_15894D0B, 0x15894D0B);

        mm.add(sceKernelReleaseIntrHandler, 0xF987B1F0);

        mm.add(sceKernelSetIntrLevel, 0xB5A15B30);

        mm.add(InterruptManagerForKernel_43A7BBDC, 0x43A7BBDC);

        mm.add(sceKernelIsInterruptOccurred, 0x02475AAF);

        mm.add(sceKernelEnableIntr, 0x4D6E7305);

        mm.add(sceKernelSuspendIntr, 0x750E2507);

        mm.add(sceKernelDisableIntr, 0xD774BA45);

        mm.add(sceKernelResumeIntr, 0x494D6D2B);

        mm.add(RegisterContextHooks, 0x2CD783A1);

        mm.add(ReleaseContextHooks, 0x55242A8B);

        mm.add(UnSupportIntr, 0x27BC9A45);

        mm.add(SupportIntr, 0x0E224D66);

        mm.add(sceKernelRegisterDebuggerIntrHandler, 0x272766F8);

        mm.add(sceKernelReleaseDebuggerIntrHandler, 0xB386A459);

        mm.add(sceKernelCallSubIntrHandler, 0xCDC86B64);

        mm.add(sceKernelGetUserIntrStack, 0xD6878EB6);

        mm.add(sceKernelCallUserIntrHandler, 0xF4454E44);

        mm.add(sceKernelRegisterSubIntrHandler, 0xCA04A2B9);

        mm.add(sceKernelReleaseSubIntrHandler, 0xD61E6961);

        mm.add(sceKernelEnableSubIntr, 0xFB8E22EC);

        mm.add(sceKernelDisableSubIntr, 0x8A389411);

        mm.add(sceKernelSuspendSubIntr, 0x5CB5A78B);

        mm.add(sceKernelResumeSubIntr, 0x7860E0DC);

        mm.add(sceKernelIsSubInterruptOccurred, 0xFC4374B8);

        mm.add(InterruptManagerForKernel_D2E8363F, 0xD2E8363F);

        mm.add(sceKernelGetCpuClockCounter, 0x30C08374);

        mm.add(sceKernelGetCpuClockCounterWide, 0x35634A64);

        mm.add(_sceKernelGetCpuClockCounterLow, 0x2DC9709B);

        mm.add(_sceKernelGetCpuClockCounterHigh, 0xE9E652A9);

        mm.add(sceKernelSetPrimarySyscallHandler, 0x0FC68A56);

        mm.add(sceKernelRegisterSystemCallTable, 0xF4D443F3);

        mm.add(sceKernelQuerySystemCall, 0x8B61808B);

    }

    @Override
    public void uninstallModule(HLEModuleManager mm, int version) {

        mm.remove(sceKernelCpuSuspendIntr);

        mm.remove(sceKernelCpuResumeIntr);

        mm.remove(sceKernelCpuResumeIntrWithSync);

        mm.remove(sceKernelIsIntrContext);

        mm.remove(InterruptManagerForKernel_53991063);

        mm.remove(sceKernelGetInterruptExitCount);

        mm.remove(ReturnToThread);

        mm.remove(SaveThreadContext);

        mm.remove(sceKernelCpuEnableIntr);

        mm.remove(QueryInterruptManCB);

        mm.remove(sceKernelRegisterIntrHandler);

        mm.remove(InterruptManagerForKernel_15894D0B);

        mm.remove(sceKernelReleaseIntrHandler);

        mm.remove(sceKernelSetIntrLevel);

        mm.remove(InterruptManagerForKernel_43A7BBDC);

        mm.remove(sceKernelIsInterruptOccurred);

        mm.remove(sceKernelEnableIntr);

        mm.remove(sceKernelSuspendIntr);

        mm.remove(sceKernelDisableIntr);

        mm.remove(sceKernelResumeIntr);

        mm.remove(RegisterContextHooks);

        mm.remove(ReleaseContextHooks);

        mm.remove(UnSupportIntr);

        mm.remove(SupportIntr);

        mm.remove(sceKernelRegisterDebuggerIntrHandler);

        mm.remove(sceKernelReleaseDebuggerIntrHandler);

        mm.remove(sceKernelCallSubIntrHandler);

        mm.remove(sceKernelGetUserIntrStack);

        mm.remove(sceKernelCallUserIntrHandler);

        mm.remove(sceKernelRegisterSubIntrHandler);

        mm.remove(sceKernelReleaseSubIntrHandler);

        mm.remove(sceKernelEnableSubIntr);

        mm.remove(sceKernelDisableSubIntr);

        mm.remove(sceKernelSuspendSubIntr);

        mm.remove(sceKernelResumeSubIntr);

        mm.remove(sceKernelIsSubInterruptOccurred);

        mm.remove(InterruptManagerForKernel_D2E8363F);

        mm.remove(sceKernelGetCpuClockCounter);

        mm.remove(sceKernelGetCpuClockCounterWide);

        mm.remove(_sceKernelGetCpuClockCounterLow);

        mm.remove(_sceKernelGetCpuClockCounterHigh);

        mm.remove(sceKernelSetPrimarySyscallHandler);

        mm.remove(sceKernelRegisterSystemCallTable);

        mm.remove(sceKernelQuerySystemCall);

    }
    public static final HLEModuleFunction sceKernelCpuSuspendIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuSuspendIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCpuSuspendIntr [0x092968F4]");
        }
    };
    public static final HLEModuleFunction sceKernelCpuResumeIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuResumeIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCpuResumeIntr [0x5F10D406]");
        }
    };
    public static final HLEModuleFunction sceKernelCpuResumeIntrWithSync = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuResumeIntrWithSync") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCpuResumeIntrWithSync [0x3B84732D]");
        }
    };
    public static final HLEModuleFunction sceKernelIsIntrContext = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelIsIntrContext") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelIsIntrContext [0xFE28C6D9]");
        }
    };
    public static final HLEModuleFunction InterruptManagerForKernel_53991063 = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_53991063") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function InterruptManagerForKernel_53991063 [0x53991063]");
        }
    };
    public static final HLEModuleFunction sceKernelGetInterruptExitCount = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetInterruptExitCount") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetInterruptExitCount [0x468BC716]");
        }
    };
    public static final HLEModuleFunction ReturnToThread = new HLEModuleFunction("InterruptManagerForKernel", "ReturnToThread") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function ReturnToThread [0x43CD40EF]");
        }
    };
    public static final HLEModuleFunction SaveThreadContext = new HLEModuleFunction("InterruptManagerForKernel", "SaveThreadContext") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function SaveThreadContext [0x85F7766D]");
        }
    };
    public static final HLEModuleFunction sceKernelCpuEnableIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCpuEnableIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCpuEnableIntr [0x02314986]");
        }
    };
    public static final HLEModuleFunction QueryInterruptManCB = new HLEModuleFunction("InterruptManagerForKernel", "QueryInterruptManCB") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function QueryInterruptManCB [0x00B6B0F3]");
        }
    };
    public static final HLEModuleFunction sceKernelRegisterIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelRegisterIntrHandler [0x58DD8978]");
        }
    };
    public static final HLEModuleFunction InterruptManagerForKernel_15894D0B = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_15894D0B") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function InterruptManagerForKernel_15894D0B [0x15894D0B]");
        }
    };
    public static final HLEModuleFunction sceKernelReleaseIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelReleaseIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReleaseIntrHandler [0xF987B1F0]");
        }
    };
    public static final HLEModuleFunction sceKernelSetIntrLevel = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSetIntrLevel") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetIntrLevel [0xB5A15B30]");
        }
    };
    public static final HLEModuleFunction InterruptManagerForKernel_43A7BBDC = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_43A7BBDC") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function InterruptManagerForKernel_43A7BBDC [0x43A7BBDC]");
        }
    };
    public static final HLEModuleFunction sceKernelIsInterruptOccurred = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelIsInterruptOccurred") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelIsInterruptOccurred [0x02475AAF]");
        }
    };
    public static final HLEModuleFunction sceKernelEnableIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelEnableIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelEnableIntr [0x4D6E7305]");
        }
    };
    public static final HLEModuleFunction sceKernelSuspendIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSuspendIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSuspendIntr [0x750E2507]");
        }
    };
    public static final HLEModuleFunction sceKernelDisableIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelDisableIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDisableIntr [0xD774BA45]");
        }
    };
    public static final HLEModuleFunction sceKernelResumeIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelResumeIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelResumeIntr [0x494D6D2B]");
        }
    };
    public static final HLEModuleFunction RegisterContextHooks = new HLEModuleFunction("InterruptManagerForKernel", "RegisterContextHooks") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function RegisterContextHooks [0x2CD783A1]");
        }
    };
    public static final HLEModuleFunction ReleaseContextHooks = new HLEModuleFunction("InterruptManagerForKernel", "ReleaseContextHooks") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function ReleaseContextHooks [0x55242A8B]");
        }
    };
    public static final HLEModuleFunction UnSupportIntr = new HLEModuleFunction("InterruptManagerForKernel", "UnSupportIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function UnSupportIntr [0x27BC9A45]");
        }
    };
    public static final HLEModuleFunction SupportIntr = new HLEModuleFunction("InterruptManagerForKernel", "SupportIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function SupportIntr [0x0E224D66]");
        }
    };
    public static final HLEModuleFunction sceKernelRegisterDebuggerIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterDebuggerIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelRegisterDebuggerIntrHandler [0x272766F8]");
        }
    };
    public static final HLEModuleFunction sceKernelReleaseDebuggerIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelReleaseDebuggerIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReleaseDebuggerIntrHandler [0xB386A459]");
        }
    };
    public static final HLEModuleFunction sceKernelCallSubIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCallSubIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCallSubIntrHandler [0xCDC86B64]");
        }
    };
    public static final HLEModuleFunction sceKernelGetUserIntrStack = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetUserIntrStack") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetUserIntrStack [0xD6878EB6]");
        }
    };
    public static final HLEModuleFunction sceKernelCallUserIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelCallUserIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelCallUserIntrHandler [0xF4454E44]");
        }
    };
    public static final HLEModuleFunction sceKernelRegisterSubIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterSubIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelRegisterSubIntrHandler [0xCA04A2B9]");
        }
    };
    public static final HLEModuleFunction sceKernelReleaseSubIntrHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelReleaseSubIntrHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelReleaseSubIntrHandler [0xD61E6961]");
        }
    };
    public static final HLEModuleFunction sceKernelEnableSubIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelEnableSubIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelEnableSubIntr [0xFB8E22EC]");
        }
    };
    public static final HLEModuleFunction sceKernelDisableSubIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelDisableSubIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelDisableSubIntr [0x8A389411]");
        }
    };
    public static final HLEModuleFunction sceKernelSuspendSubIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSuspendSubIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSuspendSubIntr [0x5CB5A78B]");
        }
    };
    public static final HLEModuleFunction sceKernelResumeSubIntr = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelResumeSubIntr") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelResumeSubIntr [0x7860E0DC]");
        }
    };
    public static final HLEModuleFunction sceKernelIsSubInterruptOccurred = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelIsSubInterruptOccurred") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelIsSubInterruptOccurred [0xFC4374B8]");
        }
    };
    public static final HLEModuleFunction InterruptManagerForKernel_D2E8363F = new HLEModuleFunction("InterruptManagerForKernel", "InterruptManagerForKernel_D2E8363F") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function InterruptManagerForKernel_D2E8363F [0xD2E8363F]");
        }
    };
    public static final HLEModuleFunction sceKernelGetCpuClockCounter = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetCpuClockCounter") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetCpuClockCounter [0x30C08374]");
        }
    };
    public static final HLEModuleFunction sceKernelGetCpuClockCounterWide = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelGetCpuClockCounterWide") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelGetCpuClockCounterWide [0x35634A64]");
        }
    };
    public static final HLEModuleFunction _sceKernelGetCpuClockCounterLow = new HLEModuleFunction("InterruptManagerForKernel", "_sceKernelGetCpuClockCounterLow") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function _sceKernelGetCpuClockCounterLow [0x2DC9709B]");
        }
    };
    public static final HLEModuleFunction _sceKernelGetCpuClockCounterHigh = new HLEModuleFunction("InterruptManagerForKernel", "_sceKernelGetCpuClockCounterHigh") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function _sceKernelGetCpuClockCounterHigh [0xE9E652A9]");
        }
    };
    public static final HLEModuleFunction sceKernelSetPrimarySyscallHandler = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelSetPrimarySyscallHandler") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelSetPrimarySyscallHandler [0x0FC68A56]");
        }
    };
    public static final HLEModuleFunction sceKernelRegisterSystemCallTable = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelRegisterSystemCallTable") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelRegisterSystemCallTable [0xF4D443F3]");
        }
    };
    public static final HLEModuleFunction sceKernelQuerySystemCall = new HLEModuleFunction("InterruptManagerForKernel", "sceKernelQuerySystemCall") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceKernelQuerySystemCall [0x8B61808B]");
        }
    };
};
