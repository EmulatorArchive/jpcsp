/* This autogenerated file is part of jpcsp. */
package jpcsp.HLE.modules;

import jpcsp.HLE.pspSysMem;
import jpcsp.Memory;
import jpcsp.Processor;

public class sceLcdc_driver implements HLEModule {

    @Override
    public final String getName() {
        return "sceLcdc_driver";
    }

    @Override
    public void installModule(HLEModuleManager mm, int version) {

        mm.add(sceLcdcInit, 0xB55500A3);

        mm.add(sceLcdcEnd, 0x0E8E8774);

        mm.add(sceLcdcSuspend, 0xDCD51769);

        mm.add(sceLcdcResume, 0xC6F10C77);

        mm.add(sceLcdcEnable, 0xA182B32C);

        mm.add(sceLcdcDisable, 0xA0032C3D);

        mm.add(sceLcdcCheckMode, 0x73A3A01D);

        mm.add(sceLcdcSetMode, 0x0BC2B5E2);

        mm.add(sceLcdcReset, 0xA2E70DA6);

        mm.add(sceLcdcGetPixelClockFreq, 0x965D1633);

        mm.add(sceLcdcGetHsyncFreq, 0xB3BA421A);

        mm.add(sceLcdcGetVsyncFreq, 0x3107417C);

        mm.add(sceLcdcInsertDisplay_default, 0x551C5BC3);

        mm.add(sceLcdcReadHPC, 0xFE5A8859);

        mm.add(sceLcdcReadVPC, 0x7BDC15C8);

        mm.add(sceLcdc_driver_E08B076B, 0xE08B076B);

    }

    @Override
    public void uninstallModule(HLEModuleManager mm, int version) {

        mm.remove(sceLcdcInit);

        mm.remove(sceLcdcEnd);

        mm.remove(sceLcdcSuspend);

        mm.remove(sceLcdcResume);

        mm.remove(sceLcdcEnable);

        mm.remove(sceLcdcDisable);

        mm.remove(sceLcdcCheckMode);

        mm.remove(sceLcdcSetMode);

        mm.remove(sceLcdcReset);

        mm.remove(sceLcdcGetPixelClockFreq);

        mm.remove(sceLcdcGetHsyncFreq);

        mm.remove(sceLcdcGetVsyncFreq);

        mm.remove(sceLcdcInsertDisplay_default);

        mm.remove(sceLcdcReadHPC);

        mm.remove(sceLcdcReadVPC);

        mm.remove(sceLcdc_driver_E08B076B);

    }
    public static final HLEModuleFunction sceLcdcInit = new HLEModuleFunction("sceLcdc_driver", "sceLcdcInit") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcInit [0xB55500A3]");
        }
    };
    public static final HLEModuleFunction sceLcdcEnd = new HLEModuleFunction("sceLcdc_driver", "sceLcdcEnd") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcEnd [0x0E8E8774]");
        }
    };
    public static final HLEModuleFunction sceLcdcSuspend = new HLEModuleFunction("sceLcdc_driver", "sceLcdcSuspend") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcSuspend [0xDCD51769]");
        }
    };
    public static final HLEModuleFunction sceLcdcResume = new HLEModuleFunction("sceLcdc_driver", "sceLcdcResume") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcResume [0xC6F10C77]");
        }
    };
    public static final HLEModuleFunction sceLcdcEnable = new HLEModuleFunction("sceLcdc_driver", "sceLcdcEnable") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcEnable [0xA182B32C]");
        }
    };
    public static final HLEModuleFunction sceLcdcDisable = new HLEModuleFunction("sceLcdc_driver", "sceLcdcDisable") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcDisable [0xA0032C3D]");
        }
    };
    public static final HLEModuleFunction sceLcdcCheckMode = new HLEModuleFunction("sceLcdc_driver", "sceLcdcCheckMode") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcCheckMode [0x73A3A01D]");
        }
    };
    public static final HLEModuleFunction sceLcdcSetMode = new HLEModuleFunction("sceLcdc_driver", "sceLcdcSetMode") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcSetMode [0x0BC2B5E2]");
        }
    };
    public static final HLEModuleFunction sceLcdcReset = new HLEModuleFunction("sceLcdc_driver", "sceLcdcReset") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcReset [0xA2E70DA6]");
        }
    };
    public static final HLEModuleFunction sceLcdcGetPixelClockFreq = new HLEModuleFunction("sceLcdc_driver", "sceLcdcGetPixelClockFreq") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcGetPixelClockFreq [0x965D1633]");
        }
    };
    public static final HLEModuleFunction sceLcdcGetHsyncFreq = new HLEModuleFunction("sceLcdc_driver", "sceLcdcGetHsyncFreq") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcGetHsyncFreq [0xB3BA421A]");
        }
    };
    public static final HLEModuleFunction sceLcdcGetVsyncFreq = new HLEModuleFunction("sceLcdc_driver", "sceLcdcGetVsyncFreq") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcGetVsyncFreq [0x3107417C]");
        }
    };
    public static final HLEModuleFunction sceLcdcInsertDisplay_default = new HLEModuleFunction("sceLcdc_driver", "sceLcdcInsertDisplay_default") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcInsertDisplay_default [0x551C5BC3]");
        }
    };
    public static final HLEModuleFunction sceLcdcReadHPC = new HLEModuleFunction("sceLcdc_driver", "sceLcdcReadHPC") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcReadHPC [0xFE5A8859]");
        }
    };
    public static final HLEModuleFunction sceLcdcReadVPC = new HLEModuleFunction("sceLcdc_driver", "sceLcdcReadVPC") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdcReadVPC [0x7BDC15C8]");
        }
    };
    public static final HLEModuleFunction sceLcdc_driver_E08B076B = new HLEModuleFunction("sceLcdc_driver", "sceLcdc_driver_E08B076B") {

        @Override
        public void execute(Processor cpu, Memory mem) {
            System.out.println("Unimplement function sceLcdc_driver_E08B076B [0xE08B076B]");
        }
    };
};
