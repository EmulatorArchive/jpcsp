/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import java.util.Calendar;
import java.util.GregorianCalendar;

import jpcsp.HLE.Modules;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;

import jpcsp.Emulator;
import jpcsp.Memory;
import jpcsp.Processor;

import jpcsp.Allegrex.CpuState; // New-Style Processor
import jpcsp.HLE.kernel.types.ScePspDateTime;

public class sceRtc implements HLEModule {
    @Override
    public String getName() { return "sceRtc"; }

    @Override
    public void installModule(HLEModuleManager mm, int version) {
        if (version >= 150) {

            mm.addFunction(sceRtcGetTickResolutionFunction, 0xC41C2853);
            mm.addFunction(sceRtcGetCurrentTickFunction, 0x3F7AD767);
            mm.addFunction(sceRtcGetAccumulativeTimeFunction, 0x011F03C1);
            mm.addFunction(sceRtc_029CA3B3Function, 0x029CA3B3);
            mm.addFunction(sceRtcGetCurrentClockFunction, 0x4CFA57B0);
            mm.addFunction(sceRtcGetCurrentClockLocalTimeFunction, 0xE7C27D1B);
            mm.addFunction(sceRtcConvertUtcToLocalTimeFunction, 0x34885E0D);
            mm.addFunction(sceRtcConvertLocalTimeToUTCFunction, 0x779242A2);
            mm.addFunction(sceRtcIsLeapYearFunction, 0x42307A17);
            mm.addFunction(sceRtcGetDaysInMonthFunction, 0x05EF322C);
            mm.addFunction(sceRtcGetDayOfWeekFunction, 0x57726BC1);
            mm.addFunction(sceRtcCheckValidFunction, 0x4B1B5E82);
            mm.addFunction(sceRtcSetTime_tFunction, 0x3A807CC8);
            mm.addFunction(sceRtcGetTime_tFunction, 0x27C4594C);
            mm.addFunction(sceRtcSetDosTimeFunction, 0xF006F264);
            mm.addFunction(sceRtcGetDosTimeFunction, 0x36075567);
            mm.addFunction(sceRtcSetWin32FileTimeFunction, 0x7ACE4C04);
            mm.addFunction(sceRtcGetWin32FileTimeFunction, 0xCF561893);
            mm.addFunction(sceRtcSetTickFunction, 0x7ED29E40);
            mm.addFunction(sceRtcGetTickFunction, 0x6FF40ACC);
            mm.addFunction(sceRtcCompareTickFunction, 0x9ED0AE87);
            mm.addFunction(sceRtcTickAddTicksFunction, 0x44F45E05);
            mm.addFunction(sceRtcTickAddMicrosecondsFunction, 0x26D25A5D);
            mm.addFunction(sceRtcTickAddSecondsFunction, 0xF2A4AFE5);
            mm.addFunction(sceRtcTickAddMinutesFunction, 0xE6605BCA);
            mm.addFunction(sceRtcTickAddHoursFunction, 0x26D7A24A);
            mm.addFunction(sceRtcTickAddDaysFunction, 0xE51B4B7A);
            mm.addFunction(sceRtcTickAddWeeksFunction, 0xCF3A2CA8);
            mm.addFunction(sceRtcTickAddMonthsFunction, 0xDBF74F1B);
            mm.addFunction(sceRtcTickAddYearsFunction, 0x42842C77);
            mm.addFunction(sceRtcFormatRFC2822Function, 0xC663B3B9);
            mm.addFunction(sceRtcFormatRFC2822LocalTimeFunction, 0x7DE6711B);
            mm.addFunction(sceRtcFormatRFC3339Function, 0x0498FB3C);
            mm.addFunction(sceRtcFormatRFC3339LocalTimeFunction, 0x27F98543);
            mm.addFunction(sceRtcParseDateTimeFunction, 0xDFBC5F16);
            mm.addFunction(sceRtcParseRFC3339Function, 0x28E1E988);

        }
    }

    @Override
    public void uninstallModule(HLEModuleManager mm, int version) {
        if (version >= 150) {

            mm.removeFunction(sceRtcGetTickResolutionFunction);
            mm.removeFunction(sceRtcGetCurrentTickFunction);
            mm.removeFunction(sceRtcGetAccumulativeTimeFunction);
            mm.removeFunction(sceRtc_029CA3B3Function);
            mm.removeFunction(sceRtcGetCurrentClockFunction);
            mm.removeFunction(sceRtcGetCurrentClockLocalTimeFunction);
            mm.removeFunction(sceRtcConvertUtcToLocalTimeFunction);
            mm.removeFunction(sceRtcConvertLocalTimeToUTCFunction);
            mm.removeFunction(sceRtcIsLeapYearFunction);
            mm.removeFunction(sceRtcGetDaysInMonthFunction);
            mm.removeFunction(sceRtcGetDayOfWeekFunction);
            mm.removeFunction(sceRtcCheckValidFunction);
            mm.removeFunction(sceRtcSetTime_tFunction);
            mm.removeFunction(sceRtcGetTime_tFunction);
            mm.removeFunction(sceRtcSetDosTimeFunction);
            mm.removeFunction(sceRtcGetDosTimeFunction);
            mm.removeFunction(sceRtcSetWin32FileTimeFunction);
            mm.removeFunction(sceRtcGetWin32FileTimeFunction);
            mm.removeFunction(sceRtcSetTickFunction);
            mm.removeFunction(sceRtcGetTickFunction);
            mm.removeFunction(sceRtcCompareTickFunction);
            mm.removeFunction(sceRtcTickAddTicksFunction);
            mm.removeFunction(sceRtcTickAddMicrosecondsFunction);
            mm.removeFunction(sceRtcTickAddSecondsFunction);
            mm.removeFunction(sceRtcTickAddMinutesFunction);
            mm.removeFunction(sceRtcTickAddHoursFunction);
            mm.removeFunction(sceRtcTickAddDaysFunction);
            mm.removeFunction(sceRtcTickAddWeeksFunction);
            mm.removeFunction(sceRtcTickAddMonthsFunction);
            mm.removeFunction(sceRtcTickAddYearsFunction);
            mm.removeFunction(sceRtcFormatRFC2822Function);
            mm.removeFunction(sceRtcFormatRFC2822LocalTimeFunction);
            mm.removeFunction(sceRtcFormatRFC3339Function);
            mm.removeFunction(sceRtcFormatRFC3339LocalTimeFunction);
            mm.removeFunction(sceRtcParseDateTimeFunction);
            mm.removeFunction(sceRtcParseRFC3339Function);

        }
    }

    protected long hleGetCurrentTick() {
        return Emulator.getClock().microTime();
    }

    public void sceRtcGetTickResolution(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor

        Memory mem = Processor.memory;

        // resolution = micro seconds
        cpu.gpr[2] = 1000000;
    }

    public void sceRtcGetCurrentTick(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        Memory mem = Processor.memory;

        int addr = cpu.gpr[4];
        mem.write64(addr, hleGetCurrentTick());

        cpu.gpr[2] = 0;
    }

    public void sceRtcGetAccumulativeTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcGetAccumulativeTime [0x011F03C1]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtc_029CA3B3(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtc_029CA3B3 [0x029CA3B3]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcGetCurrentClock(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcGetCurrentClock [0x4CFA57B0]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcGetCurrentClockLocalTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        Memory mem = Processor.memory;

        int addr = cpu.gpr[4];
        ScePspDateTime pspTime = new ScePspDateTime();
        pspTime.write(mem, addr);

        cpu.gpr[2] = 0;
    }

    public void sceRtcConvertUtcToLocalTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        int utc_addr = cpu.gpr[4];
        int local_addr = cpu.gpr[5];

        Modules.log.debug("PARTIAL:sceRtcConvertUtcToLocalTime");

        long utc = mem.read64(utc_addr);
        long local = utc; // TODO
        mem.write64(local_addr, local);

        cpu.gpr[2] = 0;
    }

    public void sceRtcConvertLocalTimeToUTC(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        int local_addr = cpu.gpr[4];
        int utc_addr = cpu.gpr[5];

        Modules.log.debug("PARTIAL:sceRtcConvertLocalTimeToUTC");

        long local = mem.read64(local_addr);
        long utc = local; // TODO
        mem.write64(utc_addr, utc);

        cpu.gpr[2] = 0;
    }

    public void sceRtcIsLeapYear(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor

        Modules.log.debug("sceRtcIsLeapYear");

        int year = cpu.gpr[4];

        if((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0))
            cpu.gpr[2] = 1;
        else
            cpu.gpr[2] = 0;
    }

    public void sceRtcGetDaysInMonth(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor

        int year = cpu.gpr[4];
        int month = cpu.gpr[5];

        Calendar cal = new GregorianCalendar(year, month - 1, 1);

        int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

        Modules.log.debug(String.format("sceRtcGetDaysInMonth %04d-%02d ret:%d", year, month, days));
        cpu.gpr[2] = days;
    }

    // pspsdk says 0=monday but I tested and 0=sunday... (fiveofhearts)
    public void sceRtcGetDayOfWeek(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor

        int year = cpu.gpr[4];
        int month = cpu.gpr[5];
        int day = cpu.gpr[6];

        Calendar cal = Calendar.getInstance();
        cal.set(year, month - 1, day);

        int number = cal.get(Calendar.DAY_OF_WEEK);
        number = (number - 1 + 7) % 7;

        Modules.log.debug(String.format("sceRtcGetDayOfWeek %04d-%02d-%02d ret:%d", year, month, day, number));
        cpu.gpr[2] = number;
    }

    final static int PSP_TIME_INVALID_YEAR = -1;
    final static int PSP_TIME_INVALID_MONTH = -2;
    final static int PSP_TIME_INVALID_DAY = -3;
    final static int PSP_TIME_INVALID_HOUR = -4;
    final static int PSP_TIME_INVALID_MINUTES = -5;
    final static int PSP_TIME_INVALID_SECONDS = -6;
    final static int PSP_TIME_INVALID_MICROSECONDS = -7;

    /**
     * Validate pspDate component ranges
     *
     * @param date - pointer to pspDate struct to be checked
     * @return 0 on success, one of PSP_TIME_INVALID_* on error
     */
    public void sceRtcCheckValid(Processor processor) {
        CpuState cpu = processor.cpu;
        Memory mem = Processor.memory;

        int time_addr = cpu.gpr[4];

        if (mem.isAddressGood(time_addr)) {
            ScePspDateTime time = new ScePspDateTime();
            time.read(mem, time_addr);
            Calendar cal = new GregorianCalendar(time.year, time.month - 1, time.day,
                time.hour, time.minute, time.second);
            int result = 0;
            if (time.year < 1582 || time.year > 3000) {	// What are valid years?
            	result = PSP_TIME_INVALID_YEAR;
            } else if (time.month < 1 || time.month > 12) {
            	result = PSP_TIME_INVALID_MONTH;
            } else if (time.day < 1 || time.day > 31) {
            	result = PSP_TIME_INVALID_DAY;
            } else if (time.hour < 0 || time.hour > 23) {
            	result = PSP_TIME_INVALID_HOUR;
            } else if (time.minute < 0 || time.minute > 59) {
            	result = PSP_TIME_INVALID_MINUTES;
            } else if (time.second < 0 || time.second > 59) {
            	result = PSP_TIME_INVALID_SECONDS;
            } else if (time.microsecond < 0 || time.microsecond >= 1000000) {
            	result = PSP_TIME_INVALID_MICROSECONDS;
            } else if (cal.get(Calendar.DAY_OF_MONTH) != time.day) { // Check if this is a valid day of the month
            	result = PSP_TIME_INVALID_DAY;
            }

            if (Modules.log.isDebugEnabled()) {
            	Modules.log.debug("sceRtcCheckValid " + time.toString() + ", cal: " + cal + ", result: " + result);
            }

            cpu.gpr[2] = result;
        } else {
            Modules.log.warn("sceRtcGetTick bad address " + String.format("0x%08X", time_addr));
            cpu.gpr[2] = -1;
        }
    }

    public void sceRtcSetTime_t(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcSetTime_t [0x3A807CC8]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcGetTime_t(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */

        int date_addr = cpu.gpr[4];
        int time_addr = cpu.gpr[5];

        if (mem.isAddressGood(date_addr) && mem.isAddressGood(time_addr)) {
            ScePspDateTime dateTime = new ScePspDateTime();
            dateTime.read(mem, date_addr);
            Calendar cal = Calendar.getInstance();
            cal.set(dateTime.year, dateTime.month - 1, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
            int unixtime = (int)(cal.getTime().getTime() / 1000L);
            Modules.log.debug("sceRtcGetTime_t psptime:" + dateTime + " unixtime:" + unixtime);
            mem.write32(time_addr, unixtime);
            cpu.gpr[2] = 0;
        } else {
            Modules.log.warn("sceRtcGetTime_t bad address " + String.format("0x%08X 0x%08X", date_addr, time_addr));
            cpu.gpr[2] = -1;
        }
    }

    public void sceRtcSetDosTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcSetDosTime [0xF006F264]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcGetDosTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcGetDosTime [0x36075567]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcSetWin32FileTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcSetWin32FileTime [0x7ACE4C04]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcGetWin32FileTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcGetWin32FileTime [0xCF561893]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    private long rtcMagicOffset = 62135596800000000L;

    /** Set a pspTime struct based on ticks. */
    public void sceRtcSetTick(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        int time_addr = cpu.gpr[4];
        int ticks_addr = cpu.gpr[5];

        Modules.log.debug("sceRtcSetTick");

        if (mem.isAddressGood(time_addr) && mem.isAddressGood(ticks_addr)) {
            long ticks = mem.read64(ticks_addr) - rtcMagicOffset;
            ScePspDateTime time = ScePspDateTime.fromMicros(ticks);
            time.write(mem, time_addr);
            cpu.gpr[2] = 0;
        } else {
            Modules.log.warn("sceRtcSetTick bad address "
                + String.format("0x%08X 0x%08X", time_addr, ticks_addr));
            cpu.gpr[2] = -1;
        }
    }

    /** Set ticks based on a pspTime struct. */
    public void sceRtcGetTick(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        int time_addr = cpu.gpr[4];
        int ticks_addr = cpu.gpr[5];

        if (mem.isAddressGood(time_addr) && mem.isAddressGood(ticks_addr)) {
            // use java library to convert a date to seconds, then multiply it by the tick resolution
            ScePspDateTime time = new ScePspDateTime();
            time.read(mem, time_addr);
            Calendar cal = new GregorianCalendar(time.year, time.month - 1, time.day,
                time.hour, time.minute, time.second);
            long ticks = rtcMagicOffset + (cal.getTimeInMillis() * 1000) + (time.microsecond % 1000);
            mem.write64(ticks_addr, ticks);

            Modules.log.debug("sceRtcGetTick " + time.toString() + " -> tick:" + ticks + " saved to 0x" + Integer.toHexString(ticks_addr));
            cpu.gpr[2] = 0;
        } else {
            Modules.log.warn("sceRtcGetTick bad address "
                + String.format("0x%08X 0x%08X", time_addr, ticks_addr));
            cpu.gpr[2] = -1;
        }
    }

    public void sceRtcCompareTick(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        int first = cpu.gpr[4];
        int second = cpu.gpr[5];

        Modules.log.debug("sceRtcCompareTick");

        if (mem.isAddressGood(first) && mem.isAddressGood(second)) {
            long tick1 = mem.read64(first);
            long tick2 = mem.read64(second);

            if (tick1 == tick2)
                cpu.gpr[2] = 0;
            else if (tick1 < tick2)
                cpu.gpr[2] = -1;
            else if (tick1 > tick2)
                cpu.gpr[2] = 1;
        } else {
            Modules.log.warn("sceRtcCompareTick bad address "
                + String.format("0x%08X 0x%08X", first, second));
            cpu.gpr[2] = -1;
        }
    }

    /** 64 bit addend */
    protected void hleRtcTickAdd64(Processor processor, long multiplier) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        int dest_addr = cpu.gpr[4];
        int src_addr = cpu.gpr[5];
        long value = ((((long)cpu.gpr[6]) & 0xFFFFFFFFL) | (((long)cpu.gpr[7])<<32));

        Modules.log.debug("hleRtcTickAdd64 " + multiplier + " * " + value);

        if (mem.isAddressGood(src_addr) && mem.isAddressGood(dest_addr)) {
            long src = mem.read64(src_addr);
            mem.write64(dest_addr, src + multiplier * value);
            cpu.gpr[2] = 0;
        } else {
            Modules.log.warn("hleRtcTickAdd64 bad address "
                + String.format("0x%08X 0x%08X", src_addr, dest_addr));
            cpu.gpr[2] = -1;
        }
    }

    /** 32 bit addend */
    protected void hleRtcTickAdd32(Processor processor, long multiplier) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        int dest_addr = cpu.gpr[4];
        int src_addr = cpu.gpr[5];
        int value = cpu.gpr[6];

        Modules.log.debug("hleRtcTickAdd32 " + multiplier + " * " + value);

        if (mem.isAddressGood(src_addr) && mem.isAddressGood(dest_addr)) {
            long src = mem.read64(src_addr);
            mem.write64(dest_addr, src + multiplier * value);
            cpu.gpr[2] = 0;
        } else {
            Modules.log.warn("hleRtcTickAdd32 bad address "
                + String.format("0x%08X 0x%08X", src_addr, dest_addr));
            cpu.gpr[2] = -1;
        }
    }

    public void sceRtcTickAddTicks(Processor processor) {
        Modules.log.debug("sceRtcTickAddTicks redirecting to hleRtcTickAdd64(1)");
        hleRtcTickAdd64(processor, 1);
    }

    public void sceRtcTickAddMicroseconds(Processor processor) {
        Modules.log.debug("sceRtcTickAddMicroseconds redirecting to hleRtcTickAdd64(1)");
        hleRtcTickAdd64(processor, 1);
    }

    public void sceRtcTickAddSeconds(Processor processor) {
        Modules.log.debug("sceRtcTickAddSeconds redirecting to hleRtcTickAdd64(1000000)");
        hleRtcTickAdd64(processor, 1000000L);
    }

    public void sceRtcTickAddMinutes(Processor processor) {
        Modules.log.debug("sceRtcTickAddMinutes redirecting to hleRtcTickAdd64(60*1000000)");
        hleRtcTickAdd64(processor, 60*1000000L);
    }

    public void sceRtcTickAddHours(Processor processor) {
        Modules.log.debug("sceRtcTickAddHours redirecting to hleRtcTickAdd32(60*60*1000000)");
        hleRtcTickAdd32(processor, 60*60*1000000L);
    }

    public void sceRtcTickAddDays(Processor processor) {
        Modules.log.debug("sceRtcTickAddDays redirecting to hleRtcTickAdd32(24*60*60*1000000)");
        hleRtcTickAdd32(processor, 24*60*60*1000000L);
    }

    public void sceRtcTickAddWeeks(Processor processor) {
        Modules.log.debug("sceRtcTickAddWeeks redirecting to hleRtcTickAdd32(7*24*60*60*1000000)");
        hleRtcTickAdd32(processor, 7*24*60*60*1000000L);
    }

    /** TODO check on real psp.
     * maybe take account of different number of days in each month,
     * decompose the source ticks into parts add months, re-assemble.
     * setting 1 month as 30 days */
    public void sceRtcTickAddMonths(Processor processor) {
        Modules.log.warn("PARTIAL:sceRtcTickAddMonths redirecting to hleRtcTickAdd32(30*24*60*60*1000000)");
        hleRtcTickAdd32(processor, 30*24*60*60*1000000L);
    }

    /** TODO check on real psp.
     * maybe take account of different number of days in each year.
     * setting 1 year as 365 days */
    public void sceRtcTickAddYears(Processor processor) {
        Modules.log.debug("PARTIAL:sceRtcTickAddYears redirecting to hleRtcTickAdd32(365*24*60*60*1000000)");
        hleRtcTickAdd32(processor, 365*24*60*60*1000000L);
    }

    public void sceRtcFormatRFC2822(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcFormatRFC2822 [0xC663B3B9]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcFormatRFC2822LocalTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcFormatRFC2822LocalTime [0x7DE6711B]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcFormatRFC3339(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcFormatRFC3339 [0x0498FB3C]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcFormatRFC3339LocalTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcFormatRFC3339LocalTime [0x27F98543]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcParseDateTime(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcParseDateTime [0xDFBC5F16]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public void sceRtcParseRFC3339(Processor processor) {
        CpuState cpu = processor.cpu; // New-Style Processor
        //////Processor cpu = processor; // Old-Style Processor
        Memory mem = Processor.memory;

        /* put your own code here instead */




        Modules.log.warn("Unimplemented NID function sceRtcParseRFC3339 [0x28E1E988]");

        cpu.gpr[2] = 0xDEADC0DE;


    }

    public final HLEModuleFunction sceRtcGetTickResolutionFunction = new HLEModuleFunction("sceRtc", "sceRtcGetTickResolution") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetTickResolution(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetTickResolution(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetCurrentTickFunction = new HLEModuleFunction("sceRtc", "sceRtcGetCurrentTick") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetCurrentTick(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetCurrentTick(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetAccumulativeTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcGetAccumulativeTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetAccumulativeTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetAccumulativeTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtc_029CA3B3Function = new HLEModuleFunction("sceRtc", "sceRtc_029CA3B3") {
        @Override
        public final void execute(Processor processor) {
            sceRtc_029CA3B3(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtc_029CA3B3(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetCurrentClockFunction = new HLEModuleFunction("sceRtc", "sceRtcGetCurrentClock") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetCurrentClock(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetCurrentClock(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetCurrentClockLocalTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcGetCurrentClockLocalTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetCurrentClockLocalTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetCurrentClockLocalTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcConvertUtcToLocalTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcConvertUtcToLocalTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcConvertUtcToLocalTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcConvertUtcToLocalTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcConvertLocalTimeToUTCFunction = new HLEModuleFunction("sceRtc", "sceRtcConvertLocalTimeToUTC") {
        @Override
        public final void execute(Processor processor) {
            sceRtcConvertLocalTimeToUTC(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcConvertLocalTimeToUTC(processor);";
        }
    };

    public final HLEModuleFunction sceRtcIsLeapYearFunction = new HLEModuleFunction("sceRtc", "sceRtcIsLeapYear") {
        @Override
        public final void execute(Processor processor) {
            sceRtcIsLeapYear(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcIsLeapYear(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetDaysInMonthFunction = new HLEModuleFunction("sceRtc", "sceRtcGetDaysInMonth") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetDaysInMonth(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetDaysInMonth(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetDayOfWeekFunction = new HLEModuleFunction("sceRtc", "sceRtcGetDayOfWeek") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetDayOfWeek(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetDayOfWeek(processor);";
        }
    };

    public final HLEModuleFunction sceRtcCheckValidFunction = new HLEModuleFunction("sceRtc", "sceRtcCheckValid") {
        @Override
        public final void execute(Processor processor) {
            sceRtcCheckValid(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcCheckValid(processor);";
        }
    };

    public final HLEModuleFunction sceRtcSetTime_tFunction = new HLEModuleFunction("sceRtc", "sceRtcSetTime_t") {
        @Override
        public final void execute(Processor processor) {
            sceRtcSetTime_t(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcSetTime_t(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetTime_tFunction = new HLEModuleFunction("sceRtc", "sceRtcGetTime_t") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetTime_t(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetTime_t(processor);";
        }
    };

    public final HLEModuleFunction sceRtcSetDosTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcSetDosTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcSetDosTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcSetDosTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetDosTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcGetDosTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetDosTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetDosTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcSetWin32FileTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcSetWin32FileTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcSetWin32FileTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcSetWin32FileTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetWin32FileTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcGetWin32FileTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetWin32FileTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetWin32FileTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcSetTickFunction = new HLEModuleFunction("sceRtc", "sceRtcSetTick") {
        @Override
        public final void execute(Processor processor) {
            sceRtcSetTick(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcSetTick(processor);";
        }
    };

    public final HLEModuleFunction sceRtcGetTickFunction = new HLEModuleFunction("sceRtc", "sceRtcGetTick") {
        @Override
        public final void execute(Processor processor) {
            sceRtcGetTick(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcGetTick(processor);";
        }
    };

    public final HLEModuleFunction sceRtcCompareTickFunction = new HLEModuleFunction("sceRtc", "sceRtcCompareTick") {
        @Override
        public final void execute(Processor processor) {
            sceRtcCompareTick(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcCompareTick(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddTicksFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddTicks") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddTicks(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddTicks(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddMicrosecondsFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddMicroseconds") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddMicroseconds(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddMicroseconds(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddSecondsFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddSeconds") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddSeconds(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddSeconds(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddMinutesFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddMinutes") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddMinutes(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddMinutes(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddHoursFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddHours") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddHours(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddHours(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddDaysFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddDays") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddDays(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddDays(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddWeeksFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddWeeks") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddWeeks(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddWeeks(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddMonthsFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddMonths") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddMonths(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddMonths(processor);";
        }
    };

    public final HLEModuleFunction sceRtcTickAddYearsFunction = new HLEModuleFunction("sceRtc", "sceRtcTickAddYears") {
        @Override
        public final void execute(Processor processor) {
            sceRtcTickAddYears(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcTickAddYears(processor);";
        }
    };

    public final HLEModuleFunction sceRtcFormatRFC2822Function = new HLEModuleFunction("sceRtc", "sceRtcFormatRFC2822") {
        @Override
        public final void execute(Processor processor) {
            sceRtcFormatRFC2822(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcFormatRFC2822(processor);";
        }
    };

    public final HLEModuleFunction sceRtcFormatRFC2822LocalTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcFormatRFC2822LocalTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcFormatRFC2822LocalTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcFormatRFC2822LocalTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcFormatRFC3339Function = new HLEModuleFunction("sceRtc", "sceRtcFormatRFC3339") {
        @Override
        public final void execute(Processor processor) {
            sceRtcFormatRFC3339(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcFormatRFC3339(processor);";
        }
    };

    public final HLEModuleFunction sceRtcFormatRFC3339LocalTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcFormatRFC3339LocalTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcFormatRFC3339LocalTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcFormatRFC3339LocalTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcParseDateTimeFunction = new HLEModuleFunction("sceRtc", "sceRtcParseDateTime") {
        @Override
        public final void execute(Processor processor) {
            sceRtcParseDateTime(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcParseDateTime(processor);";
        }
    };

    public final HLEModuleFunction sceRtcParseRFC3339Function = new HLEModuleFunction("sceRtc", "sceRtcParseRFC3339") {
        @Override
        public final void execute(Processor processor) {
            sceRtcParseRFC3339(processor);
        }
        @Override
        public final String compiledString() {
            return "jpcsp.HLE.Modules.sceRtcModule.sceRtcParseRFC3339(processor);";
        }
    };

};
