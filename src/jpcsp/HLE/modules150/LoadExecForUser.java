/* This autogenerated file is part of jpcsp. */
/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

package jpcsp.HLE.modules150;

import java.io.IOException;
import java.nio.ByteBuffer;

import jpcsp.Emulator;
import jpcsp.GeneralJpcspException;
import jpcsp.Loader;
import jpcsp.Processor;
import jpcsp.Allegrex.CpuState;
import jpcsp.HLE.Modules;
import jpcsp.HLE.kernel.types.SceModule;
import jpcsp.HLE.modules.HLEModule;
import jpcsp.HLE.modules.HLEModuleFunction;
import jpcsp.HLE.modules.HLEModuleManager;
import jpcsp.filesystems.SeekableDataInput;
import jpcsp.util.Utilities;

public class LoadExecForUser implements HLEModule {
	@Override
	public String getName() { return "LoadExecForUser"; }
	
	@Override
	public void installModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.addFunction(sceKernelLoadExecFunction, 0xBD2F1094);
			mm.addFunction(sceKernelExitGameWithStatusFunction, 0x2AC9954B);
			mm.addFunction(sceKernelExitGameFunction, 0x05572A5F);
			mm.addFunction(sceKernelRegisterExitCallbackFunction, 0x4AC57943);
			
		}
	}
	
	@Override
	public void uninstallModule(HLEModuleManager mm, int version) {
		if (version >= 150) {
		
			mm.removeFunction(sceKernelLoadExecFunction);
			mm.removeFunction(sceKernelExitGameWithStatusFunction);
			mm.removeFunction(sceKernelExitGameFunction);
			mm.removeFunction(sceKernelRegisterExitCallbackFunction);
			
		}
	}
	
	
	public void sceKernelLoadExec(Processor processor) {
		CpuState cpu = processor.cpu;

		int filename_addr = cpu.gpr[4];
		int option_addr = cpu.gpr[5];
		
		String name = Utilities.readStringZ(filename_addr);

        Modules.log.debug("sceKernelLoadExec file='" + name + "' option=0x" + Integer.toHexString(option_addr));

        if (option_addr != 0)
            Modules.log.warn("UNIMPLEMENTED:sceKernelLoadExec option=0x" + Integer.toHexString(option_addr));

        try {
            SeekableDataInput moduleInput = Modules.IoFileMgrForUserModule.getFile(name, IoFileMgrForUser.PSP_O_RDONLY);
            if (moduleInput != null) {
                byte[] moduleBytes = new byte[(int) moduleInput.length()];
                moduleInput.readFully(moduleBytes);
                ByteBuffer moduleBuffer = ByteBuffer.wrap(moduleBytes);

                SceModule module = Emulator.getInstance().load(name, moduleBuffer, true);
                Emulator.getClock().resume();

                if ((module.fileFormat & Loader.FORMAT_ELF) == Loader.FORMAT_ELF) {
                    cpu.gpr[2] = 0;
                } else {
                    Modules.log.warn("sceKernelLoadExec - failed, target is not an ELF");
                    cpu.gpr[2] = -1;
                }

                moduleInput.close();
            }
        } catch (GeneralJpcspException e) {
            Modules.log.error("General Error : " + e.getMessage());
            Emulator.PauseEmu();
        } catch (IOException e) {
            Modules.log.error("sceKernelLoadExec - Error while loading module " + name + ": " + e.getMessage());
            cpu.gpr[2] = -1;
        }
	}
    
	public void sceKernelExitGameWithStatus(Processor processor) {
		CpuState cpu = processor.cpu;
		
		int status = cpu.gpr[4];

		Modules.log.info("Program exit detected with status=" + status + " (sceKernelExitGameWithStatus)");
        Emulator.PauseEmuWithStatus(Emulator.EMU_STATUS_OK);
	}
    
	public void sceKernelExitGame(Processor processor) {
		Modules.log.info("Program exit detected (sceKernelExitGame)");
        Emulator.PauseEmuWithStatus(Emulator.EMU_STATUS_OK);
	}
    
	public void sceKernelRegisterExitCallback(Processor processor) {
		CpuState cpu = processor.cpu;
		
		int uid = cpu.gpr[4];

		Modules.log.debug("IGNORING:sceKernelRegisterExitCallback SceUID=" + Integer.toHexString(uid));
        Emulator.getProcessor().cpu.gpr[2] = 0;
	}
    
	public final HLEModuleFunction sceKernelLoadExecFunction = new HLEModuleFunction("LoadExecForUser", "sceKernelLoadExec") {
		@Override
		public final void execute(Processor processor) {
			sceKernelLoadExec(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.LoadExecForUserModule.sceKernelLoadExec(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelExitGameWithStatusFunction = new HLEModuleFunction("LoadExecForUser", "sceKernelExitGameWithStatus") {
		@Override
		public final void execute(Processor processor) {
			sceKernelExitGameWithStatus(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.LoadExecForUserModule.sceKernelExitGameWithStatus(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelExitGameFunction = new HLEModuleFunction("LoadExecForUser", "sceKernelExitGame") {
		@Override
		public final void execute(Processor processor) {
			sceKernelExitGame(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.LoadExecForUserModule.sceKernelExitGame(processor);";
		}
	};
    
	public final HLEModuleFunction sceKernelRegisterExitCallbackFunction = new HLEModuleFunction("LoadExecForUser", "sceKernelRegisterExitCallback") {
		@Override
		public final void execute(Processor processor) {
			sceKernelRegisterExitCallback(processor);
		}
		@Override
		public final String compiledString() {
			return "jpcsp.HLE.Modules.LoadExecForUserModule.sceKernelRegisterExitCallback(processor);";
		}
	};
    
};
